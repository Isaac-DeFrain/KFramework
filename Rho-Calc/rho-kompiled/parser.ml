type token =
  | STRING of (string)
  | KLABEL of (string)
  | KSEQ
  | DOTK
  | LPAREN
  | RPAREN
  | COMMA
  | DOTKLIST
  | TOKENLABEL
  | KLABELLABEL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Constants.K
# 19 "parser.ml"
let yytransl_const = [|
  259 (* KSEQ *);
  260 (* DOTK *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* COMMA *);
  264 (* DOTKLIST *);
  265 (* TOKENLABEL *);
  266 (* KLABELLABEL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* KLABEL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\005\000\
\005\000\005\000\005\000\004\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\001\000\004\000\004\000\006\000\001\000\
\003\000\004\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\004\000\000\000\000\000\014\000\000\000\
\002\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\003\000\011\000\000\000\000\000\000\000\006\000\005\000\
\000\000\013\000\000\000\000\000\009\000\007\000\010\000"

let yydgoto = "\002\000\
\007\000\020\000\009\000\010\000\021\000\027\000"

let yysindex = "\004\000\
\012\255\000\000\000\000\000\000\010\255\015\255\000\000\001\000\
\000\000\022\255\027\255\028\255\012\255\000\000\009\255\024\255\
\023\255\000\000\000\000\029\255\017\255\032\255\000\000\000\000\
\000\255\000\000\030\255\009\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\022\000\234\255\000\000"

let yytablesize = 260
let yytable = "\008\000\
\014\000\003\000\029\000\004\000\001\000\031\000\028\000\019\000\
\005\000\006\000\003\000\018\000\004\000\003\000\011\000\004\000\
\019\000\005\000\006\000\012\000\005\000\006\000\024\000\025\000\
\008\000\008\000\015\000\016\000\023\000\003\000\022\000\013\000\
\026\000\017\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000"

let yycheck = "\001\000\
\000\000\002\001\025\000\004\001\001\000\028\000\007\001\008\001\
\009\001\010\001\002\001\013\000\004\001\002\001\005\001\004\001\
\008\001\009\001\010\001\005\001\009\001\010\001\006\001\007\001\
\006\001\007\001\005\001\001\001\006\001\002\001\007\001\003\001\
\001\001\012\000\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001"

let yynames_const = "\
  KSEQ\000\
  DOTK\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  DOTKLIST\000\
  TOKENLABEL\000\
  KLABELLABEL\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  KLABEL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'k) in
    Obj.repr(
# 15 "parser.mly"
           ( _1 )
# 164 "parser.ml"
               : Constants.k))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kitem) in
    Obj.repr(
# 18 "parser.mly"
        ( _1 )
# 171 "parser.ml"
               : 'k))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'k) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'k) in
    Obj.repr(
# 19 "parser.mly"
           ( _1 @ _3 )
# 179 "parser.ml"
               : 'k))
; (fun __caml_parser_env ->
    Obj.repr(
# 20 "parser.mly"
       ( [] )
# 185 "parser.ml"
               : 'k))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'klabel) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'klist) in
    Obj.repr(
# 23 "parser.mly"
                             ( let module Def = (val Plugin.get () : Plugin.Definition) in if !Prelude.no_parse_eval then [Constants.denormalize (Constants.KApply(_1, _3))] else Def.eval (Constants.KApply(_1, _3)) [] )
# 193 "parser.ml"
               : 'kitem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'klabel) in
    Obj.repr(
# 24 "parser.mly"
                                   ( [InjectedKLabel _3] )
# 200 "parser.ml"
               : 'kitem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'sort) in
    Obj.repr(
# 25 "parser.mly"
                                             ( [Prelude.ktoken _5 _3] )
# 208 "parser.ml"
               : 'kitem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'k) in
    Obj.repr(
# 28 "parser.mly"
    ( [_1] )
# 215 "parser.ml"
               : 'klist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'klist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'klist) in
    Obj.repr(
# 29 "parser.mly"
                    ( _1 @ _3 )
# 223 "parser.ml"
               : 'klist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'klist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'klist) in
    Obj.repr(
# 30 "parser.mly"
                          ( _1 @ _4 )
# 231 "parser.ml"
               : 'klist))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
           ( [] )
# 237 "parser.ml"
               : 'klist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 33 "parser.mly"
               ( Constants.parse_klabel _1 )
# 244 "parser.ml"
               : 'klabel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 35 "parser.mly"
             ( Constants.parse_sort _1 )
# 251 "parser.ml"
               : 'sort))
(* Entry top *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Constants.k)
