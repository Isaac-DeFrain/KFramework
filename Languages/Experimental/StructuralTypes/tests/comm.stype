// Type - complex

  type[ @\x!(Nil) | for( y,@\z <- x ){ (*y,\z,Nil) } | for( y,z <- @\x ){ ( *y|*z , Nil) } ]

/*
Output:

    type[ "par" ;; 
      type[ "par" ;; 
        type[ "send" ;; 
          type[ "quote" ;; type[ "leaf" ;; "procvar" ;; \ x ] ;; type[ #truncate ] ] ;; 
          type[ "tuple" ;; type[ "leaf" ;; "nil" ;; "Nil" ] ;; type[ #truncate ] ] ] ;; 
        type[ "receive" ;; 
          type[ "lbind" ;; 
            type[ "names" ;; type[ "leaf" ;; "namevar" ;; y ] ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; \ z ] ;; type[ #truncate ] ] ] ;; 
            type[ "leaf" ;; "namevar" ;; x ] ] ;; 
          type[ "tuple" ;; type[ "eval" ;; type[ "leaf" ;; "namevar" ;; y ] ;; type[ #truncate ] ] ;; type[ "procs" ;; type[ "leaf" ;; "procvar" ;; \ z ] ;; type[ "leaf" ;; "nil" ;; "Nil" ] ] ] ] ] ;; 
        type[ "receive" ;; 
          type[ "lbind" ;; 
            type[ "names" ;; type[ "leaf" ;; "namevar" ;; y ] ;; type[ "leaf" ;; "namevar" ;; z ] ] ;; 
            type[ "quote" ;; type[ "leaf" ;; "procvar" ;; \ x ] ;; type[ #truncate ] ] ] ;; 
          type[ "tuple" ;; type[ "par" ;; type[ "eval" ;; type[ "leaf" ;; "namevar" ;; y ] ;; type[ #truncate ] ] ;; type[ "eval" ;; type[ "leaf" ;; "namevar" ;; z ] ;; type[ #truncate ] ] ] ;; type[ "leaf" ;; "nil" ;; "Nil" ] ] ] ]
  
*/