// Type - match

  type[ match x {           WildProc :=> @x1!(m1)
                 WildName!(WildProc) :=> @x2!(m2)
                        WildProc | 1 :=> @x3!(m3)
                }
      ]

/*
  Output:
  type[ "match" ;; type[ "leaf" ;; "procvar" ;; x ] ;; type[ "cases" ;; type[ "case" ;; type[ "leaf" ;; "wildcard" ;; "proc" ] ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; x1 ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "procvar" ;; m1 ] ;; type[ #truncate ] ] ] ] ;; type[ "cases" ;; type[ "case" ;; type[ "send" ;; type[ "leaf" ;; "wildcard" ;; "name" ] ;; type[ "tuple" ;; type[ "leaf" ;; "wildcard" ;; "proc" ] ;; type[ #truncate ] ] ] ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; x2 ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "procvar" ;; m2 ] ;; type[ #truncate ] ] ] ] ;; type[ "case" ;; type[ "par" ;; type[ "leaf" ;; "wildcard" ;; "proc" ] ;; type[ "leaf" ;; "int" ;; 1 ] ] ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; x3 ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "procvar" ;; m3 ] ;; type[ #truncate ] ] ] ] ] ] ]
*/