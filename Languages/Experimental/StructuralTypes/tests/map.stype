// Type - map

 type[ { @x!(y) : for( @y <- @z ){ @y!(Nil) } , x : y , @Nil!(a) : z } ]

/*
  Output:
  type[ "map" ;; type[ "kvpair" ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; x ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "procvar" ;; y ] ;; type[ #truncate ] ] ] ;; type[ "receive" ;; type[ "lbind" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; y ] ;; type[ #truncate ] ] ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; z ] ;; type[ #truncate ] ] ] ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "procvar" ;; y ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "nil" ;; "Nil" ] ;; type[ #truncate ] ] ] ] ] ;; type[ "kvpairs" ;; type[ "kvpair" ;; type[ "leaf" ;; "procvar" ;; x ] ;; type[ "leaf" ;; "procvar" ;; y ] ] ;; type[ "kvpair" ;; type[ "send" ;; type[ "quote" ;; type[ "leaf" ;; "nil" ;; "Nil" ] ;; type[ #truncate ] ] ;; type[ "tuple" ;; type[ "leaf" ;; "procvar" ;; a ] ;; type[ #truncate ] ] ] ;; type[ "leaf" ;; "procvar" ;; z ] ] ] ]
*/