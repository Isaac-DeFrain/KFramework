// Reduce - one step reductions

  x!(*y) | x!("x") | y!("y") | for( z <- x ){ z!(for( z <- x ){ "hi" }) } | for( z <- y ){ *z }

/*
  Output:
  Result ==K <T>
    <Threads>
      .ThreadCellBag
    </Threads>
    <Tuplespace>
      <Sends>
        .SendCellBag
      </Sends>
      <Receives>
        .RecCellBag
      </Receives>
    </Tuplespace>
    <Reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <how>
        1
      </how>
    </Reaction>
    <Repar>
      "y" | for ( z <- x ) { z ! ( for ( z <- x ) { "hi" } ) } | x ! ( "x" ) | x ! ( * y )
    </Repar>
    <Store>
      .
    </Store>
  </T>
#Or
  Result ==K <T>
    <Threads>
      <Thread>
        <k>
          "hi"
        </k>
      </Thread>
    </Threads>
    <Tuplespace>
      <Sends>
        <Send>
          <schan>
            y
          </schan>
          <msg>
            "y"
          </msg>
          <tuple>
            1
          </tuple>
          <sper>
            0
          </sper>
        </Send>
      </Sends>
      <Receives>
        .RecCellBag
      </Receives>
    </Tuplespace>
    <Reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <how>
        3
      </how>
    </Reaction>
    <Repar>
      .
    </Repar>
    <Store>
      .
    </Store>
  </T>
#Or
  Result ==K <T>
    <Threads>
      <Thread>
        <k>
          "y"
        </k>
      </Thread>
    </Threads>
    <Tuplespace>
      <Sends>
        <Send>
          <schan>
            @ "x"
          </schan>
          <msg>
            for ( z <- x ) { "hi" }
          </msg>
          <tuple>
            1
          </tuple>
          <sper>
            0
          </sper>
        </Send> <Send>
          <schan>
            x
          </schan>
          <msg>
            * y
          </msg>
          <tuple>
            1
          </tuple>
          <sper>
            0
          </sper>
        </Send>
      </Sends>
      <Receives>
        .RecCellBag
      </Receives>
    </Tuplespace>
    <Reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <how>
        2
      </how>
    </Reaction>
    <Repar>
      .
    </Repar>
    <Store>
      .
    </Store>
  </T>
#Or
  Result ==K <T>
    <Threads>
      <Thread>
        <k>
          "y"
        </k>
      </Thread>
    </Threads>
    <Tuplespace>
      <Sends>
        <Send>
          <schan>
            x
          </schan>
          <msg>
            "x"
          </msg>
          <tuple>
            1
          </tuple>
          <sper>
            0
          </sper>
        </Send> <Send>
          <schan>
            y
          </schan>
          <msg>
            for ( z <- x ) { "hi" }
          </msg>
          <tuple>
            1
          </tuple>
          <sper>
            0
          </sper>
        </Send>
      </Sends>
      <Receives>
        .RecCellBag
      </Receives>
    </Tuplespace>
    <Reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <how>
        2
      </how>
    </Reaction>
    <Repar>
      .
    </Repar>
    <Store>
      .
    </Store>
  </T>
*/