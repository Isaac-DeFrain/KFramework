// De Bruijn levels - nested receives

    #deBruijn( 0 ; new x in { for( @\a,b <- x ){ for( @\a <- x ){ for( @\a,b <- @\a ){ for( @\a <- x ){ b!(\a) } } | *b } } } ; .Map )

/*
Output:

    new boundN( 0 ) in { 
      for ( @ boundP( 1 ) , boundN( 2 ) <- boundN( 0 ) ) { 
        for ( @ boundP( 3 ) <- boundN( 0 ) ) { 
          for ( @ boundP( 4 ) , boundN( 5 ) <- @ boundP( 3 ) ) { 
            for ( @ boundP( 6 ) <- boundN( 0 ) ) { 
              boundN( 5 ) ! ( boundP( 6 ) ) 
            } 
          } | 
          * boundN( 2 ) 
        } 
      } 
    }

From RNode: 

    

*/