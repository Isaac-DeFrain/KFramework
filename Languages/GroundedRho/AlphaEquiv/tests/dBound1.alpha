// De Bruijn levels - new bound in receive

    #dBound( 0 ; new x in { for( @\a,b,@{for( @\c <- x ){ \c | *d }} <- x ){ x!!(*d) | \c } } ; .Map )
  
/*
Output:

    new boundN( 1 , 0 ) in { 

      for ( @ boundP( 1 , 1 ) , 
              boundN( 1 , 2 ) , 
            @ for ( @ boundP( 2 , 0 ) <- boundN( 1 , 3 ) ) { 
                boundP( 2 , 0 ) | * boundN( 1 , 4 ) 
              } <- boundN( 1 , 0 ) ) { 
        boundN( 1 , 3 ) !! ( * boundN( 1 , 4 ) ) | boundP( 1 , 3 ) 
      }
    }

*/