// Guarded receive

    new x in { x!(41,true) | x!(-43,true and true) | for( y,@\b <- x if \b == true ){ *y + 1 } }

/*
Output:
<T>
    <threads>
      <thread>
        <k>
          42
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        <send>
          <schan>
            @ unforgeable( 0 )
          </schan>
          <msg>
            -43 , true
          </msg>
          <tuple>
            2
          </tuple>
          <stype>
            0
          </stype>
        </send>
      </sends>
      <receives>
        .RecCellBag
      </receives>
    </tuplespace>
    <nextLoc>
      1
    </nextLoc>
    <freeVars>
      .Set
    </freeVars>
    <deBruijn>
      new boundN( 0 ) in { boundN( 0 ) ! ( 41 , true ) | boundN( 0 ) ! ( -43 , true ) | #deBruijn( 1 ; for ( y , @ \ b <- boundN( 0 ) if \ b == true ) { * y + 1 } ; x |-> boundN( 0 ) ) }
    </deBruijn>
  </T>
#Or
  Result ==K <T>
    <threads>
      <thread>
        <k>
          -42
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        <send>
          <schan>
            @ unforgeable( 0 )
          </schan>
          <msg>
            41 , true
          </msg>
          <tuple>
            2
          </tuple>
          <stype>
            0
          </stype>
        </send>
      </sends>
      <receives>
        .RecCellBag
      </receives>
    </tuplespace>
    <nextLoc>
      1
    </nextLoc>
    <freeVars>
      .Set
    </freeVars>
    <deBruijn>
      new boundN( 0 ) in { boundN( 0 ) ! ( 41 , true ) | boundN( 0 ) ! ( -43 , true ) | #deBruijn( 1 ; for ( y , @ \ b <- boundN( 0 ) if \ b == true ) { * y + 1 } ; x |-> boundN( 0 ) ) }
    </deBruijn>
  </T>
*/