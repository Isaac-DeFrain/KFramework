// SeqSimLet expression

    let \myVar <- @0!("a") > \a <- 0 & \b <- 1 > \c <- [0,1] in { @"a"!(\myVar) | for( @0 <- @\a ){ [1,2,\b,4,5,\c] } }

/*
Output:
<T>
  <activity>
    .TaskCellBag
  </activity>
  <tuplespace>
    <sends>
      <send>
        ( @ "a" ) ! ( ( @ 0 ) ! ( "a" ) )
      </send>
    </sends>
    <input>
      <receives>
        <receive>
          for ( @ 0 <- @ 0 ) { [ 1 , 2 , 1 , 4 , 5 , [ 0 , 1 ] ] }
        </receive>
      </receives>
      <sums>
        .SumCellBag
      </sums>
    </input>
  </tuplespace>
  <contracts>
    .Map
  </contracts>
  <nextLoc>
    0
  </nextLoc>
  <original>
    let \ myVar <- ( @ 0 ) ! ( "a" ) > \ a <- 0 & ( \ b <- 1 ) > \ c <- [ 0 , 1 ] in { ( @ "a" ) ! ( \ myVar ) | for ( @ 0 <- @ \ a ) { [ 1 , 2 , \ b , 4 , 5 , \ c ] } }
  </original>
  <OGfreevar>
    .Set
  </OGfreevar>
  <OGdeBruijn>
    let x( 0 ) <- ( @ 0 ) ! ( "a" ) > x( 1 ) <- 0 & x( 2 ) <- 1 > ( x( 2 ) <- [ 0 , 1 ] ) in { ( @ "a" ) ! ( x( 0 ) ) | for ( @ 0 <- @ x( 1 ) ) { [ 1 , 2 , x( 2 ) , 4 , 5 , x( 3 ) ] } }
  </OGdeBruijn>
</T>
*/
