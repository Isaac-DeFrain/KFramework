// Nondeterministic comm with multiple messages

    new x in { x!(1,2,3,Nil) | for( a,b,c,d <- x ){ (*d,*b,*a,*c) } | x!("a","b","c",true) }

/*
Output:
<T>
    <threads>
      <thread>
        <k>
          ( Nil , 2 , 1 , 3 )
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        <send>
          <schan>
            @ unforgeable( 0 )
          </schan>
          <msg>
            "a" , "b" , "c" , true
          </msg>
          <tuple>
            4
          </tuple>
          <stype>
            0
          </stype>
        </send>
      </sends>
      <receives>
        .RecCellBag
      </receives>
    </tuplespace>
    <nextLoc>
      1
    </nextLoc>
    <freeVars>
      .Set
    </freeVars>
    <deBruijn>
      new boundN( 0 ) in { boundN( 0 ) ! ( 1 , 2 , ( 3 , Nil ) ) | for ( boundN( 1 ) , boundN( 2 ) , boundN( 3 ) , boundN( 4 ) <- boundN( 0 ) ) { ( * boundN( 4 ) , * boundN( 2 ) , * boundN( 1 ) , * boundN( 3 ) ) } | boundN( 0 ) ! ( "a" , "b" , ( "c" , true ) ) }
    </deBruijn>
  </T>
#Or
  Result ==K <T>
    <threads>
      <thread>
        <k>
          ( true , "b" , "a" , "c" )
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        <send>
          <schan>
            @ unforgeable( 0 )
          </schan>
          <msg>
            1 , 2 , 3 , Nil
          </msg>
          <tuple>
            4
          </tuple>
          <stype>
            0
          </stype>
        </send>
      </sends>
      <receives>
        .RecCellBag
      </receives>
    </tuplespace>
    <nextLoc>
      1
    </nextLoc>
    <freeVars>
      .Set
    </freeVars>
    <deBruijn>
      new boundN( 0 ) in { boundN( 0 ) ! ( 1 , 2 , ( 3 , Nil ) ) | for ( boundN( 1 ) , boundN( 2 ) , boundN( 3 ) , boundN( 4 ) <- boundN( 0 ) ) { ( * boundN( 4 ) , * boundN( 2 ) , * boundN( 1 ) , * boundN( 3 ) ) } | boundN( 0 ) ! ( "a" , "b" , ( "c" , true ) ) }
    </deBruijn>
  </T>
*/
