// Contract

    contract @0( x ) = { [Nil,*x] } | @0( @2 ) | let \a <- @0(@1) in {\a ++ [true]}

/*
Output:
<T>
  <activity>
    <task>
      <k>
        [ Nil , 1 , true ]
      </k>
    </task> <task>
      <k>
        [ Nil , 2 ]
      </k>
    </task>
  </activity>
  <tuplespace>
    <sends>
      .SendCellBag
    </sends>
    <input>
      <receives>
        <receive>
          for ( x <= @ 0 ) { [ Nil , * x ] }
        </receive>
      </receives>
      <sums>
        .SumCellBag
      </sums>
    </input>
  </tuplespace>
  <contracts>
    @ 0 ( x ) |-> [ Nil , * x ]
  </contracts>
  <nextLoc>
    0
  </nextLoc>
  <original>
    contract @ 0 ( x ) = { [ Nil , * x ] } | @ 0 ( @ 2 ) | let \ a <- ( @ 0 ) ( @ 1 ) in { \ a ++ [ true ] }
  </original>
  <OGfreevar>
    .Set
  </OGfreevar>
  <OGdeBruijn>
    contract @ 0 ( @ x( 0 ) ) = { [ Nil , x( 0 ) ] } | @ 0 ( @ 2 ) | let x( 0 ) <- ( @ 0 ) ( @ 1 ) in { x( 0 ) ++ [ true ] }
  </OGdeBruijn>
</T>
*/
