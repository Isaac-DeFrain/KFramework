// Grounded rho - linear join

    for( a,b <- x ; c <- y ){ (*a,*b,*c) } | y!("y") | x!("a","b") | y!!("y") | x!(true,true)

/*
Output:
<T>
  <threads>
    .ThreadCellBag
  </threads>
  <tuplespace>
    <sends>
      <send>
        <schan>
          x
        </schan>
        <msg>
          "a" , "b"
        </msg>
        <tuple>
          2
        </tuple>
        <stype>
          0
        </stype>
      </send> <send>
        <schan>
          x
        </schan>
        <msg>
          true , true
        </msg>
        <tuple>
          2
        </tuple>
        <stype>
          0
        </stype>
      </send> <send>
        <schan>
          y
        </schan>
        <msg>
          "y"
        </msg>
        <tuple>
          1
        </tuple>
        <stype>
          0
        </stype>
      </send> <send>
        <schan>
          y
        </schan>
        <msg>
          "y"
        </msg>
        <tuple>
          1
        </tuple>
        <stype>
          1
        </stype>
      </send>
    </sends>
    <receives>
      <rec>
        <rchan>
          x , y
        </rchan>
        <bvars>
          a , b , c
        </bvars>
        <bnum>
          2
        </bnum>
        <rtype>
          0
        </rtype>
        <guard>
          true
        </guard>
        <cont>
          ( * a , * b , * c )
        </cont>
      </rec>
    </receives>
  </tuplespace>
  <nextLoc>
    0
  </nextLoc>
  <freeVars>
    SetItem ( x : name )
    SetItem ( y : name )
  </freeVars>
  <deBruijn>
    #deBruijn( 0 ; for ( a , b <- x ; c <- y ) { ( * a , * b , * c ) } ; .Map ) | y ! ( "y" ) | x ! ( "a" , "b" ) | y !! ( "y" ) | x ! ( true , true )
  </deBruijn>
</T>
*/