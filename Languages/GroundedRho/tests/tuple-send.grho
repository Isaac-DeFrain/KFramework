// Send

    new x,y in { x!(@42!(Nil)) | for( @{@Int!(\a)} <- x ){ x!(Nil,*y,[1,2,\a,2],{1:2,3:4,1:2},Set(x!(1,[2],(Set(3),))),(1,2,"a",)) } }

/*
Output:
<T>
  <activity>
    .TaskCellBag
  </activity>
  <tuplespace>
    <sends>
      .SendCellBag
    </sends>
    <receives>
      <rec>
        <rchan>
          @ unforgeable( 0 )
        </rchan>
        <bvars>
          @ ( ( @ Int ) ! ( \ a ) )
        </bvars>
        <bnum>
          1
        </bnum>
        <rtype>
          0
        </rtype>
        <guard>
          true
        </guard>
        <cont>
          ( @ unforgeable( 0 ) ) ! ( Nil , unforgeable( 1 ) , [ 1 , 2 , \ a , 2 ] , { 1 : 2 , 3 : 4 , 1 : 2 } , Set( ( @ unforgeable( 0 ) ) ! ( 1 , [ 2 ] , ( Set( 3 ) ,) ) ) , ( 1 , 2 , "a" ,) )
        </cont>
      </rec>
    </receives>
  </tuplespace>
  <nextLoc>
    2
  </nextLoc>
  <original>
    new x , y in { for ( @ ( ( @ Int ) ! ( \ a ) ) <- x ) { x ! ( Nil , * y , ( [ 1 , 2 , \ a , 2 ] , { 1 : 2 , 3 : 4 , 1 : 2 } , Set( x ! ( 1 , [ 2 ] , ( Set( 3 ) ,) ) ) , ( 1 , 2 , "a" ,) ) ) } }
  </original>
  <OGfreevar>
    .Set
  </OGfreevar>
  <OGvarcontexts>
    .Set
  </OGvarcontexts>
  <OGdeBruijn>
    new boundN( 0 ) , boundN( 1 ) in { for ( @ ( @ Int ) ! ( boundP( 2 ) ) <- boundN( 0 ) ) { boundN( 0 ) ! ( Nil , * boundN( 1 ) , [ 1 , 2 , boundP( 2 ) , 2 ] , { 1 : 2 , 3 : 4 , 1 : 2 } , Set( boundN( 0 ) ! ( 1 , [ 2 ] , ( Set( 3 ) ,) ) ) , ( 1 , 2 , "a" ,) ) } }
  </OGdeBruijn>
</T>
*/