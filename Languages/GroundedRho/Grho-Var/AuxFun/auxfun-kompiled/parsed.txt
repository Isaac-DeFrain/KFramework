module ARRAY$SYNTAX [org.kframework.attributes.Location(Location(86,1,90,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports ARRAY-SYMBOLIC$SYNTAX
endmodule


module ARRAY-IN-K$SYNTAX [org.kframework.attributes.Location(Location(58,1,84,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports ARRAY-SYNTAX$SYNTAX
  syntax List ::= "ensureOffsetList" "(" List "," Int "," KItem ")" [function() klabel(ensureOffsetList)]
  syntax Array ::= "makeArray" "(" Int "," KItem ")" [function() hook(ARRAY.make) klabel(makeArray)]
  syntax Array ::= "arr" "(" List "," Int "," KItem ")" [klabel(arr)]
endmodule


module ARRAY-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(50,1,52,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports ARRAY-IN-K$SYNTAX
endmodule


module ARRAY-SYNTAX [org.kframework.attributes.Location(Location(24,1,38,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports LIST
  imports ARRAY-SYNTAX$SYNTAX
  ModuleComment( Sets a range of indices (given by an index into the array and the number
   of indices to set) to the same value. ,[org.kframework.attributes.Location(Location(33,3,34,43)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module ARRAY-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(24,1,38,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports LIST$SYNTAX
  syntax KItem ::= Array "[" Int "]" [function() hook(ARRAY.lookup)]
  syntax Bool ::= Int "in_keys" "(" Array ")" [function() functional() hook(ARRAY.in_keys)]
  syntax Array [element(_[_<-_]) hook(ARRAY.Array) org.kframework.attributes.Location(Location(27,3,27,69)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) unit(arrayCtor)]
  syntax Array ::= Array "[" Int "<-" KItem "]" [function() hook(ARRAY.update) klabel(_[_<-_]) symbol()]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function() hook(ARRAY.remove)]
  syntax Array ::= "updateArray" "(" Array "," Int "," List ")" [function() hook(ARRAY.updateAll) klabel(updateArray)]
  syntax Array ::= "fillArray" "(" Array "," Int "," Int "," KItem ")" [function() hook(ARRAY.fill) klabel(fillArray)]
endmodule


module AUTO-CASTS [org.kframework.attributes.Location(Location(169,1,177,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports AUTO-CASTS$SYNTAX
  ModuleComment( this is part of the mechanism that allows concrete user syntax in K,[org.kframework.attributes.Location(Location(176,3,176,73)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(170,3,170,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( generates, for all sorts, productions of the form:,[org.kframework.attributes.Location(Location(171,3,171,56)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Sort  ::= Sort ":Sort",[org.kframework.attributes.Location(Location(173,3,173,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Sort  ::= Sort "::Sort",[org.kframework.attributes.Location(Location(172,3,172,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Sort  ::= K    ":>Sort",[org.kframework.attributes.Location(Location(175,3,175,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( KBott ::= Sort "<:Sort",[org.kframework.attributes.Location(Location(174,3,174,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module AUTO-CASTS$SYNTAX [org.kframework.attributes.Location(Location(169,1,177,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module AUTO-FOLLOW [org.kframework.attributes.Location(Location(179,1,190,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports AUTO-FOLLOW$SYNTAX
  ModuleComment( syntax K ::= K K,[org.kframework.attributes.Location(Location(186,3,186,22)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "b",[org.kframework.attributes.Location(Location(184,3,184,22)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "ab",[org.kframework.attributes.Location(Location(185,3,185,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "a",[org.kframework.attributes.Location(Location(183,3,183,22)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( of another terminal. This is useful to prevent ambiguities such as:,[org.kframework.attributes.Location(Location(182,3,182,73)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(180,3,180,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( generates a follow restriction for every terminal which is a prefix,[org.kframework.attributes.Location(Location(181,3,181,73)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( because it would turn the terminal into the terminal "ab".,[org.kframework.attributes.Location(Location(189,3,189,64)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( In the above example, the terminal "a" is not allowed to be followed by a "b",[org.kframework.attributes.Location(Location(188,3,188,83)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( #parse("ab", "K"),[org.kframework.attributes.Location(Location(187,3,187,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module AUTO-FOLLOW$SYNTAX [org.kframework.attributes.Location(Location(179,1,190,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module AUXFUN [org.kframework.attributes.Location(Location(100,1,555,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))]
  imports DEFAULT-CONFIGURATION
  imports AUXFUN-SYNTAX
  imports AUXFUN$SYNTAX
  rule `_#ine(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(A),#SemanticCastToBinds(B))=>`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(231) org.kframework.attributes.Location(Location(231,8,231,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#ine(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A),#SemanticCastToBinds(B))=>`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(230) org.kframework.attributes.Location(Location(230,8,230,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#ine(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A),#SemanticCastToBind(B))=>`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(229) org.kframework.attributes.Location(Location(229,8,229,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_set__AUXFUN-SYNTAX`(#SemanticCastToProc(_),`Set()_GRHO-SYNTAX`(.KList))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(401) org.kframework.attributes.Location(Location(401,8,401,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_set__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`Set(_)_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(Elm1),#SemanticCastToProcs(Rest))))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Elm1)),`_#in_set__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`Set(_)_GRHO-SYNTAX`(#SemanticCastToProcs(Rest)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(404) org.kframework.attributes.Location(Location(404,8,404,95)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_set__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`Set(_)_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(Elm1),#SemanticCastToProc(Elm2))))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Elm1)),`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Elm2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(403) org.kframework.attributes.Location(Location(403,8,403,84)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_set__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`Set(_)_GRHO-SYNTAX`(#SemanticCastToProc(Elm)))=>`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Elm)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(402) org.kframework.attributes.Location(Location(402,8,402,51)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToRhoMap(`{}_GRHO-SYNTAX`(.KList)))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(395) org.kframework.attributes.Location(Location(395,8,395,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`{_}_GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(Key),#SemanticCastToProc(Val))))=>`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Key)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(396) org.kframework.attributes.Location(Location(396,8,396,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`{_}_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(Key),#SemanticCastToProc(Val)),#SemanticCastToRhoKVPairs(KVs))))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Key)),`_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`{_}_GRHO-SYNTAX`(#SemanticCastToRhoKVPairs(KVs)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(398) org.kframework.attributes.Location(Location(398,8,398,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`{_}_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(Key),#SemanticCastToProc(Val)),#SemanticCastToRhoKVPair(KV))))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToProc(A),#SemanticCastToProc(Key)),`_#in_keys__AUXFUN-SYNTAX`(#SemanticCastToProc(A),`{_}_GRHO-SYNTAX`(#SemanticCastToRhoKVPair(KV)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(397) org.kframework.attributes.Location(Location(397,8,397,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in__AUXFUN-SYNTAX`(#SemanticCastToInt(A),tuple(`_,__GRHO-SYNTAX`(#SemanticCastToInt(B),#SemanticCastToProcs(C))))=>`_orBool__BOOL`(`_==Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B)),`_#in__AUXFUN-SYNTAX`(#SemanticCastToInt(A),tuple(#SemanticCastToProcs(C)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(215) org.kframework.attributes.Location(Location(215,8,215,68)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in__AUXFUN-SYNTAX`(#SemanticCastToInt(A),tuple(`_,__GRHO-SYNTAX`(#SemanticCastToInt(B),#SemanticCastToInt(C))))=>`_orBool__BOOL`(`_==Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B)),`_==Int_`(#SemanticCastToInt(A),#SemanticCastToInt(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(214) org.kframework.attributes.Location(Location(214,8,214,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in__AUXFUN-SYNTAX`(#SemanticCastToInt(A),tuple(#SemanticCastToInt(B)))=>`_==Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(213) org.kframework.attributes.Location(Location(213,8,213,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),`_,__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToNames(C)))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToName(A),#SemanticCastToName(B)),`_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(220) org.kframework.attributes.Location(Location(220,8,220,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),`_,__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(C)))=>`_orBool__BOOL`(`_==K_`(#SemanticCastToName(A),#SemanticCastToName(B)),`_==K_`(#SemanticCastToName(A),#SemanticCastToName(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(219) org.kframework.attributes.Location(Location(219,8,219,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B))=>`_==K_`(#SemanticCastToName(A),#SemanticCastToName(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(218) org.kframework.attributes.Location(Location(218,8,218,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(A),#SemanticCastToBinds(B))=>`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(226) org.kframework.attributes.Location(Location(226,8,226,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A),#SemanticCastToBinds(B))=>`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(225) org.kframework.attributes.Location(Location(225,8,225,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A),#SemanticCastToBind(B))=>`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(224) org.kframework.attributes.Location(Location(224,8,224,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stype(_)_AUXFUN-SYNTAX`(`_!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProcList(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(116) org.kframework.attributes.Location(Location(116,8,116,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stype(_)_AUXFUN-SYNTAX`(`_!!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProcList(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(117) org.kframework.attributes.Location(Location(117,8,117,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(`{_}_GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProc(_))))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(240) org.kframework.attributes.Location(Location(240,8,240,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(`{_}_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProc(_)),`_:__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProc(_)))))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(241) org.kframework.attributes.Location(Location(241,8,241,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(`{_}_GRHO-SYNTAX`(`_,__GRHO-SYNTAX`(`_:__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProc(_)),#SemanticCastToRhoKVPairs(R))))=>`_+Int_`(#token("1","Int"),`#size__AUXFUN-SYNTAX`(`{_}_GRHO-SYNTAX`(#SemanticCastToRhoKVPairs(R)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(242) org.kframework.attributes.Location(Location(242,8,242,71)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(`Set(_)_GRHO-SYNTAX`(#SemanticCastToProcList(P)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToProcList(P)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(237) org.kframework.attributes.Location(Location(237,8,237,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(`Set()_GRHO-SYNTAX`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(236) org.kframework.attributes.Location(Location(236,8,236,25)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#size__AUXFUN-SYNTAX`(#SemanticCastToRhoMap(`{}_GRHO-SYNTAX`(.KList)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(239) org.kframework.attributes.Location(Location(239,8,239,29)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToRbinds(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(153) org.kframework.attributes.Location(Location(153,8,153,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToRbind(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(152) org.kframework.attributes.Location(Location(152,8,152,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToPbinds(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(157) org.kframework.attributes.Location(Location(157,8,157,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToPbind(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(156) org.kframework.attributes.Location(Location(156,8,156,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToLbinds(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(149) org.kframework.attributes.Location(Location(149,8,149,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToLbind(_),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(148) org.kframework.attributes.Location(Location(148,8,148,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToRbinds(_),#SemanticCastToProc(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(151) org.kframework.attributes.Location(Location(151,8,151,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToRbind(_),#SemanticCastToProc(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(150) org.kframework.attributes.Location(Location(150,8,150,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToPbinds(_),#SemanticCastToProc(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(155) org.kframework.attributes.Location(Location(155,8,155,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToPbind(_),#SemanticCastToProc(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(154) org.kframework.attributes.Location(Location(154,8,154,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToLbinds(_),#SemanticCastToProc(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(147) org.kframework.attributes.Location(Location(147,8,147,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToLbind(_),#SemanticCastToProc(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(146) org.kframework.attributes.Location(Location(146,8,146,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToRbinds(_),#SemanticCastToGuard(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(166) org.kframework.attributes.Location(Location(166,8,166,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToRbind(_),#SemanticCastToGuard(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(165) org.kframework.attributes.Location(Location(165,8,165,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToPbinds(_),#SemanticCastToGuard(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(170) org.kframework.attributes.Location(Location(170,8,170,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToPbind(_),#SemanticCastToGuard(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(169) org.kframework.attributes.Location(Location(169,8,169,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToLbinds(_),#SemanticCastToGuard(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(162) org.kframework.attributes.Location(Location(162,8,162,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToLbind(_),#SemanticCastToGuard(_)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(161) org.kframework.attributes.Location(Location(161,8,161,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(_))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(164) org.kframework.attributes.Location(Location(164,8,164,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(_))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(163) org.kframework.attributes.Location(Location(163,8,163,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(_))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(168) org.kframework.attributes.Location(Location(168,8,168,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(_))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(167) org.kframework.attributes.Location(Location(167,8,167,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(_))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(160) org.kframework.attributes.Location(Location(160,8,160,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#rtype(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(_))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(159) org.kframework.attributes.Location(Location(159,8,159,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#quotes(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProcs(B)))=>`_,__GRHO-SYNTAX`(`@__GRHO-SYNTAX`(#SemanticCastToProc(A)),`#quotes(_)_AUXFUN-SYNTAX`(#SemanticCastToProcs(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(389) org.kframework.attributes.Location(Location(389,8,389,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#quotes(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProc(B)))=>`_,__GRHO-SYNTAX`(`@__GRHO-SYNTAX`(#SemanticCastToProc(A)),`@__GRHO-SYNTAX`(#SemanticCastToProc(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(388) org.kframework.attributes.Location(Location(388,8,388,47)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#msg(_)_AUXFUN-SYNTAX`(`_!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProcs(P)))=>#SemanticCastToProcs(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(110) org.kframework.attributes.Location(Location(110,8,110,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#msg(_)_AUXFUN-SYNTAX`(`_!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(109) org.kframework.attributes.Location(Location(109,8,109,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#msg(_)_AUXFUN-SYNTAX`(`_!!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProcs(P)))=>#SemanticCastToProcs(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(112) org.kframework.attributes.Location(Location(112,8,112,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#msg(_)_AUXFUN-SYNTAX`(`_!!(_)_GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(111) org.kframework.attributes.Location(Location(111,8,111,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbinds(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#lengths(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(309) org.kframework.attributes.Location(Location(309,8,309,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbind(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbinds(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#lengths(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbind(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(311) org.kframework.attributes.Location(Location(311,8,311,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbinds(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#lengths(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(306) org.kframework.attributes.Location(Location(306,8,306,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#lengths(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbind(C)))=>`_,__GRHO-SYNTAX`(`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length__AUXFUN-SYNTAX`(`[_]_GRHO-SYNTAX`(#SemanticCastToProcList(P)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToProcList(P)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(281) org.kframework.attributes.Location(Location(281,8,281,44)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length__AUXFUN-SYNTAX`(`[]_GRHO-SYNTAX`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(280) org.kframework.attributes.Location(Location(280,8,280,24)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(299) org.kframework.attributes.Location(Location(299,8,299,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(_),#SemanticCastToRbinds(C)))=>`_+Int_`(#token("1","Int"),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(294) org.kframework.attributes.Location(Location(294,8,294,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(_),#SemanticCastToRbind(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(293) org.kframework.attributes.Location(Location(293,8,293,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(_),#SemanticCastToPbinds(C)))=>`_+Int_`(#token("1","Int"),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(297) org.kframework.attributes.Location(Location(297,8,297,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(_),#SemanticCastToPbind(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(296) org.kframework.attributes.Location(Location(296,8,296,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(_),#SemanticCastToLbinds(C)))=>`_+Int_`(#token("1","Int"),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(291) org.kframework.attributes.Location(Location(291,8,291,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(_),#SemanticCastToLbind(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(290) org.kframework.attributes.Location(Location(290,8,290,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProcs(P)))=>`_+Int_`(#token("1","Int"),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToProcs(P))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(277) org.kframework.attributes.Location(Location(277,8,277,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(_),#SemanticCastToProc(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(276) org.kframework.attributes.Location(Location(276,8,276,41)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToNames(N)))=>`_+Int_`(#token("1","Int"),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(N))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,286,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(_)))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(285) org.kframework.attributes.Location(Location(285,8,285,41)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(#SemanticCastToSend(S))=>`#length(_)_AUXFUN-SYNTAX`(`#msg(_)_AUXFUN-SYNTAX`(#SemanticCastToSend(S))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(114) org.kframework.attributes.Location(Location(114,8,114,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(#SemanticCastToProc(_))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(275) org.kframework.attributes.Location(Location(275,8,275,41)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length(_)_AUXFUN-SYNTAX`(#SemanticCastToName(_))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(284) org.kframework.attributes.Location(Location(284,8,284,41)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#length()_AUXFUN-SYNTAX`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(274) org.kframework.attributes.Location(Location(274,8,274,24)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#guard(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(_),`if__GRHO-SYNTAX`(#SemanticCastToBExp(B))),#SemanticCastToProc(_)))=>#SemanticCastToBExp(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(176) org.kframework.attributes.Location(Location(176,8,176,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#guard(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(_),`if__GRHO-SYNTAX`(#SemanticCastToBExp(B))),#SemanticCastToProc(_)))=>#SemanticCastToBExp(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(175) org.kframework.attributes.Location(Location(175,8,175,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#guard(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(_),#SemanticCastToProc(_)))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(174) org.kframework.attributes.Location(Location(174,8,174,51)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#guard(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(_),#SemanticCastToProc(_)))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(173) org.kframework.attributes.Location(Location(173,8,173,51)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#cont(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(_),#SemanticCastToGuard(_)),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(138) org.kframework.attributes.Location(Location(138,8,138,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#cont(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(_),#SemanticCastToGuard(_)),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(137) org.kframework.attributes.Location(Location(137,8,137,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#cont(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(_),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(136) org.kframework.attributes.Location(Location(136,8,136,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#cont(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(_),#SemanticCastToProc(P)))=>#SemanticCastToProc(P) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(135) org.kframework.attributes.Location(Location(135,8,135,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(C),#SemanticCastToRbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToRbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToRbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(457) org.kframework.attributes.Location(Location(457,8,457,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(C),#SemanticCastToRbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToRbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToRbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(455) org.kframework.attributes.Location(Location(455,8,455,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(C),#SemanticCastToPbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToPbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToPbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(462) org.kframework.attributes.Location(Location(462,8,462,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(C),#SemanticCastToPbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToPbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToPbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(460) org.kframework.attributes.Location(Location(460,8,460,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(C),#SemanticCastToLbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToLbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToLbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(452) org.kframework.attributes.Location(Location(452,8,452,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(C),#SemanticCastToLbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToLbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToLbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(450) org.kframework.attributes.Location(Location(450,8,450,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToRbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)),#SemanticCastToRbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(445) org.kframework.attributes.Location(Location(445,8,445,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToPbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)),#SemanticCastToPbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(447) org.kframework.attributes.Location(Location(447,8,447,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToLbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)),#SemanticCastToLbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(443) org.kframework.attributes.Location(Location(443,8,443,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(C),#SemanticCastToRbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToRbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToRbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(456) org.kframework.attributes.Location(Location(456,8,456,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(C),#SemanticCastToRbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToRbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToRbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(454) org.kframework.attributes.Location(Location(454,8,454,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(C),#SemanticCastToPbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToPbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToPbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(461) org.kframework.attributes.Location(Location(461,8,461,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(C),#SemanticCastToPbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToPbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToPbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(459) org.kframework.attributes.Location(Location(459,8,459,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(C),#SemanticCastToLbinds(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToLbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToLbinds(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(451) org.kframework.attributes.Location(Location(451,8,451,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(C),#SemanticCastToLbind(D)))=>`_+Int_`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToLbind(C)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToLbind(D))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(449) org.kframework.attributes.Location(Location(449,8,449,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToRbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)),#SemanticCastToRbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(444) org.kframework.attributes.Location(Location(444,8,444,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToPbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)),#SemanticCastToPbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(446) org.kframework.attributes.Location(Location(446,8,446,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToLbind(C))=>`#if_#then_#else_#fi_K-EQUAL`(`_#ine(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)),#SemanticCastToLbind(C)),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(442) org.kframework.attributes.Location(Location(442,8,442,94)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbinds(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToRbinds(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToRbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(436) org.kframework.attributes.Location(Location(436,8,436,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbind(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToRbind(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToRbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(435) org.kframework.attributes.Location(Location(435,8,435,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbinds(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToPbinds(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToPbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(439) org.kframework.attributes.Location(Location(439,8,439,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbind(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToPbind(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToPbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(438) org.kframework.attributes.Location(Location(438,8,438,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbinds(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToLbinds(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToLbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(433) org.kframework.attributes.Location(Location(433,8,433,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbind(C)))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B))),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToLbind(C))),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToLbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(432) org.kframework.attributes.Location(Location(432,8,432,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),#SemanticCastToBind(B))=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToInt(I)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B))),#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(431) org.kframework.attributes.Location(Location(431,8,431,148)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(M),#SemanticCastToInt(_),#SemanticCastToInt(I))),#SemanticCastToSet(S)))=>`#if_#then_#else_#fi_K-EQUAL`(`_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),#SemanticCastToName(M)),`_+Int_`(#SemanticCastToInt(I),`#chanmany(_:_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),#SemanticCastToSet(S))),`#chanmany(_:_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),#SemanticCastToSet(S))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(468) org.kframework.attributes.Location(Location(468,8,468,140)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),`SetItem`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(M),#SemanticCastToInt(_),#SemanticCastToInt(I))))=>`#if_#then_#else_#fi_K-EQUAL`(`_#in(_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),#SemanticCastToName(M)),#SemanticCastToInt(I),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(467) org.kframework.attributes.Location(Location(467,8,467,107)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanmany(_:_)_AUXFUN-SYNTAX`(#SemanticCastToName(N),`.Set`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(466) org.kframework.attributes.Location(Location(466,8,466,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToNames(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(416) org.kframework.attributes.Location(Location(416,8,416,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(415) org.kframework.attributes.Location(Location(415,8,415,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(411) org.kframework.attributes.Location(Location(411,8,411,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(410) org.kframework.attributes.Location(Location(410,8,410,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToNames(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(421) org.kframework.attributes.Location(Location(421,8,421,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)))=>`SetItem`(`(_;_)_GRHO-SYNTAX`(#SemanticCastToName(B),`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToName(A)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(420) org.kframework.attributes.Location(Location(420,8,420,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbinds(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(418) org.kframework.attributes.Location(Location(418,8,418,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbind(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(417) org.kframework.attributes.Location(Location(417,8,417,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(A),#SemanticCastToPbinds(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(423) org.kframework.attributes.Location(Location(423,8,423,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(A),#SemanticCastToPbind(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(422) org.kframework.attributes.Location(Location(422,8,422,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbinds(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(413) org.kframework.attributes.Location(Location(413,8,413,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chanlen(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbind(B)))=>`_Set_`(`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#chanlen(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(412) org.kframework.attributes.Location(Location(412,8,412,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(133) org.kframework.attributes.Location(Location(133,8,133,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(132) org.kframework.attributes.Location(Location(132,8,132,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToProc(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(131) org.kframework.attributes.Location(Location(131,8,131,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToProc(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(130) org.kframework.attributes.Location(Location(130,8,130,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,46)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)))=>`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToNames(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,323,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(319) org.kframework.attributes.Location(Location(319,8,319,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToNames(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbinds(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(335) org.kframework.attributes.Location(Location(335,8,335,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbind(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbinds(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbind(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(337) org.kframework.attributes.Location(Location(337,8,337,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbinds(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbind(C)))=>`_,__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(331) org.kframework.attributes.Location(Location(331,8,331,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_!(_)_GRHO-SYNTAX`(#SemanticCastToName(N),#SemanticCastToProcList(_)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(106) org.kframework.attributes.Location(Location(106,8,106,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`_!!(_)_GRHO-SYNTAX`(#SemanticCastToName(N),#SemanticCastToProcList(_)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(107) org.kframework.attributes.Location(Location(107,8,107,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`<=__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(321) org.kframework.attributes.Location(Location(321,8,321,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`<-__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,318,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#chan(_)_AUXFUN-SYNTAX`(`<!__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(128) org.kframework.attributes.Location(Location(128,8,128,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(127) org.kframework.attributes.Location(Location(127,8,127,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToProc(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(126) org.kframework.attributes.Location(Location(126,8,126,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToProc(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(125) org.kframework.attributes.Location(Location(125,8,125,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(383) org.kframework.attributes.Location(Location(383,8,383,46)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)))=>`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(372) org.kframework.attributes.Location(Location(372,8,372,44)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>#SemanticCastToNames(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(367) org.kframework.attributes.Location(Location(367,8,367,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToName(N),#SemanticCastToName(_)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(366) org.kframework.attributes.Location(Location(366,8,366,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>#SemanticCastToNames(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(364) org.kframework.attributes.Location(Location(364,8,364,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNameVar(N),#SemanticCastToName(_)))=>#SemanticCastToNameVar(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(363) org.kframework.attributes.Location(Location(363,8,363,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>#SemanticCastToNames(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(370) org.kframework.attributes.Location(Location(370,8,370,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToName(N),#SemanticCastToName(_)))=>#SemanticCastToName(N) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(369) org.kframework.attributes.Location(Location(369,8,369,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbinds(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(378) org.kframework.attributes.Location(Location(378,8,378,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(B),#SemanticCastToRbind(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(377) org.kframework.attributes.Location(Location(377,8,377,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbinds(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(381) org.kframework.attributes.Location(Location(381,8,381,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(B),#SemanticCastToPbind(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(380) org.kframework.attributes.Location(Location(380,8,380,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbinds(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(375) org.kframework.attributes.Location(Location(375,8,375,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(B),#SemanticCastToLbind(C)))=>`_,__GRHO-SYNTAX`(`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(374) org.kframework.attributes.Location(Location(374,8,374,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`<=__GRHO-SYNTAX`(#SemanticCastToName(N)))=>`EmptyMsg_GRHO-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(365) org.kframework.attributes.Location(Location(365,8,365,47)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`<-__GRHO-SYNTAX`(#SemanticCastToName(N)))=>`EmptyMsg_GRHO-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(362) org.kframework.attributes.Location(Location(362,8,362,47)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bvar(_)_AUXFUN-SYNTAX`(`<!__GRHO-SYNTAX`(#SemanticCastToName(N)))=>`EmptyMsg_GRHO-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(368) org.kframework.attributes.Location(Location(368,8,368,47)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(143) org.kframework.attributes.Location(Location(143,8,143,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(142) org.kframework.attributes.Location(Location(142,8,142,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToProc(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToBinds(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(141) org.kframework.attributes.Location(Location(141,8,141,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToProc(_)))=>`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(140) org.kframework.attributes.Location(Location(140,8,140,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)))=>`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(356) org.kframework.attributes.Location(Location(356,8,356,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(N)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(351) org.kframework.attributes.Location(Location(351,8,351,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<=__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(350) org.kframework.attributes.Location(Location(350,8,350,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(N)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(348) org.kframework.attributes.Location(Location(348,8,348,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<-__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(347) org.kframework.attributes.Location(Location(347,8,347,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToNames(N),#SemanticCastToName(_)))=>`#length(_)_AUXFUN-SYNTAX`(#SemanticCastToNames(N)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(354) org.kframework.attributes.Location(Location(354,8,354,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`_<!__GRHO-SYNTAX`(#SemanticCastToName(_),#SemanticCastToName(_)))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(353) org.kframework.attributes.Location(Location(353,8,353,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`<=__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(349) org.kframework.attributes.Location(Location(349,8,349,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`<-__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(346) org.kframework.attributes.Location(Location(346,8,346,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bnum(_)_AUXFUN-SYNTAX`(`<!__GRHO-SYNTAX`(#SemanticCastToName(N)))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(352) org.kframework.attributes.Location(Location(352,8,352,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbinds(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_=/=Int__INT-COMMON`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B)),#token("0","Int")),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B))))),`Set:difference`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(B)),`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B)))))),`_Set_`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,541,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),#token("2","Int"))),`Set:difference`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)))),`_Set_`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(532) org.kframework.attributes.Location(Location(532,8,536,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(A),#SemanticCastToPbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),#token("2","Int"))),`Set:difference`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)))),`_Set_`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(544) org.kframework.attributes.Location(Location(544,8,548,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbinds(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_=/=Int__INT-COMMON`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B)),#token("0","Int")),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B))))),`Set:difference`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(B)),`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B)))))),`_Set_`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(525) org.kframework.attributes.Location(Location(525,8,529,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),#token("2","Int"))),`Set:difference`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)))),`_Set_`(`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(520) org.kframework.attributes.Location(Location(520,8,524,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocce(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A))=>`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bvar(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),#token("1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(517) org.kframework.attributes.Location(Location(517,8,517,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbinds(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_=/=Int__INT-COMMON`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B)),#token("0","Int")),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B))))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(B)),`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A))),#SemanticCastToRbinds(B)))))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbinds(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(495) org.kframework.attributes.Location(Location(495,8,499,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToRbind(A),#SemanticCastToRbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),#token("2","Int"))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToRbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(490) org.kframework.attributes.Location(Location(490,8,494,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(A),#SemanticCastToPbinds(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_=/=Int__INT-COMMON`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A))),#SemanticCastToPbinds(B)),#token("0","Int")),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A))),#SemanticCastToPbinds(B))))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(B)),`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A))),#SemanticCastToPbinds(B)))))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbinds(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(507) org.kframework.attributes.Location(Location(507,8,511,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToPbind(A),#SemanticCastToPbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),#token("2","Int"))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToPbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(502) org.kframework.attributes.Location(Location(502,8,506,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbinds(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_=/=Int__INT-COMMON`(`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B)),#token("0","Int")),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`_+Int_`(#token("1","Int"),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B))))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(B)),`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#chanmany(_:_)_AUXFUN-SYNTAX`(`(_;_)_GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A))),#SemanticCastToLbinds(B)))))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbinds(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(483) org.kframework.attributes.Location(Location(483,8,487,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(`_;__GRHO-SYNTAX`(#SemanticCastToLbind(A),#SemanticCastToLbind(B)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Set__SET`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B))),`_Set_`(`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),#token("2","Int"))),`Set:difference`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)))),`_Set_`(`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(A)),`#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToLbind(B)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(478) org.kframework.attributes.Location(Location(478,8,482,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bindocc(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A))=>`SetItem`(`_;_;;__GRHO-SYNTAX`(`#chan(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),`#bnum(_)_AUXFUN-SYNTAX`(#SemanticCastToBind(A)),#token("1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(475) org.kframework.attributes.Location(Location(475,8,475,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#SemanticCastToBinds(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(123) org.kframework.attributes.Location(Location(123,8,123,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(`___GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToGuard(_)),#SemanticCastToProc(_)))=>#SemanticCastToBind(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(122) org.kframework.attributes.Location(Location(122,8,122,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBinds(B),#SemanticCastToProc(_)))=>#SemanticCastToBinds(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(121) org.kframework.attributes.Location(Location(121,8,121,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`for(_){_}_GRHO-SYNTAX`(#SemanticCastToBind(B),#SemanticCastToProc(_)))=>#SemanticCastToBind(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(120) org.kframework.attributes.Location(Location(120,8,120,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B),#token("2","Int")))=>`_<!__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(207) org.kframework.attributes.Location(Location(207,8,207,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B),#token("1","Int")))=>`_<=__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(205) org.kframework.attributes.Location(Location(205,8,205,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B),#token("0","Int")))=>`_<-__GRHO-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(203) org.kframework.attributes.Location(Location(203,8,203,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B),#token("2","Int")))=>`_<!__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(206) org.kframework.attributes.Location(Location(206,8,206,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B),#token("1","Int")))=>`_<=__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(204) org.kframework.attributes.Location(Location(204,8,204,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#bind(_)_AUXFUN-SYNTAX`(`_;_;;__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B),#token("0","Int")))=>`_<-__GRHO-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(A)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(202) org.kframework.attributes.Location(Location(202,8,202,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProcs(B)),#SemanticCastToProcs(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProcs(B),#SemanticCastToProcs(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(196) org.kframework.attributes.Location(Location(196,8,196,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProcs(B)),#SemanticCastToProc(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProcs(B),#SemanticCastToProc(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(193) org.kframework.attributes.Location(Location(193,8,193,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProc(B)),#SemanticCastToProcs(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProc(B),#SemanticCastToProcs(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(195) org.kframework.attributes.Location(Location(195,8,195,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProc(B)),#SemanticCastToProc(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProc(B),#SemanticCastToProc(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(192) org.kframework.attributes.Location(Location(192,8,192,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToNames(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToNames(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(189) org.kframework.attributes.Location(Location(189,8,189,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)),#SemanticCastToName(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToNames(B),#SemanticCastToName(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(186) org.kframework.attributes.Location(Location(186,8,186,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToNames(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToName(B),#SemanticCastToNames(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(188) org.kframework.attributes.Location(Location(188,8,188,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)),#SemanticCastToName(C))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),`#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToName(B),#SemanticCastToName(C))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(185) org.kframework.attributes.Location(Location(185,8,185,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProcs(B))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProcs(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(194) org.kframework.attributes.Location(Location(194,8,194,53)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProc(B))=>`_,__GRHO-SYNTAX`(#SemanticCastToProc(A),#SemanticCastToProc(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(191) org.kframework.attributes.Location(Location(191,8,191,53)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToNames(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(187) org.kframework.attributes.Location(Location(187,8,187,53)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#append(_;_)_AUXFUN-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B))=>`_,__GRHO-SYNTAX`(#SemanticCastToName(A),#SemanticCastToName(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(184) org.kframework.attributes.Location(Location(184,8,184,53)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(------------------,[org.kframework.attributes.Location(Location(393,1,393,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(------------------,[org.kframework.attributes.Location(Location(391,1,391,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(515,1,515,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(513,1,513,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(427,1,427,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(425,1,425,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(472,1,472,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(470,1,470,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(408,1,408,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(406,1,406,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(303,1,303,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(----------------,[org.kframework.attributes.Location(Location(301,1,301,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(387,1,387,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(385,1,385,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(272,1,272,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(270,1,270,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(183,1,183,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(---------------,[org.kframework.attributes.Location(Location(181,1,181,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--------------,[org.kframework.attributes.Location(Location(264,1,264,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--------------,[org.kframework.attributes.Location(Location(262,1,262,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(360,1,360,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(358,1,358,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(344,1,344,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(342,1,342,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(316,1,316,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(314,1,314,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(235,1,235,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(233,1,233,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(200,1,200,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(198,1,198,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------,[org.kframework.attributes.Location(Location(211,1,211,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(-----------,[org.kframework.attributes.Location(Location(209,1,209,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- Predicates ---,[org.kframework.attributes.Location(Location(392,1,392,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- Binds ---,[org.kframework.attributes.Location(Location(288,1,288,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #union ---,[org.kframework.attributes.Location(Location(263,1,263,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #size ---,[org.kframework.attributes.Location(Location(234,1,234,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #quotes ---  ,[org.kframework.attributes.Location(Location(386,1,386,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #lengths ---,[org.kframework.attributes.Location(Location(302,1,302,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #length ---,[org.kframework.attributes.Location(Location(271,1,271,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #in ---,[org.kframework.attributes.Location(Location(210,1,210,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #chanmany ---,[org.kframework.attributes.Location(Location(426,1,426,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #chanlen ---,[org.kframework.attributes.Location(Location(407,1,407,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #chan ---,[org.kframework.attributes.Location(Location(315,1,315,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #bvar ---,[org.kframework.attributes.Location(Location(359,1,359,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #bnum ---,[org.kframework.attributes.Location(Location(343,1,343,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #bindocce ---,[org.kframework.attributes.Location(Location(514,1,514,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #bindocc ---,[org.kframework.attributes.Location(Location(471,1,471,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #bind ---,[org.kframework.attributes.Location(Location(199,1,199,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(--- #append ---,[org.kframework.attributes.Location(Location(182,1,182,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( set of explicit binding occurrences and number of appearences i.e. (channel ; chanlength ;; how many occurrences of channel/chanlength pair),[org.kframework.attributes.Location(Location(516,1,516,144)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( set of binding occurrences and number of appearences i.e. (channel ; chanlength ;; how many occurrences of channel/chanlength pair),[org.kframework.attributes.Location(Location(474,1,474,135)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( receive types - receive,[org.kframework.attributes.Location(Location(145,1,145,27)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( number of binding variables in a listen,[org.kframework.attributes.Location(Location(345,1,345,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( how many variables are we listening for in each binding,[org.kframework.attributes.Location(Location(409,1,409,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( given a channel and set of binding occurrences, how many total occurrences involving that channel,[org.kframework.attributes.Location(Location(465,1,465,101)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( gievn a channel and chanlength, how many occurrences are in Bind(s) ,[org.kframework.attributes.Location(Location(430,1,430,72)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( comma-separated list of channels involved in bindings,[org.kframework.attributes.Location(Location(330,1,330,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( checks explicit binding occurence set inclusion,[org.kframework.attributes.Location(Location(228,1,228,51)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( checks binding occurence set inclusion,[org.kframework.attributes.Location(Location(223,1,223,42)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( binding variables,[org.kframework.attributes.Location(Location(361,1,361,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Variable Bindings,[org.kframework.attributes.Location(Location(178,1,178,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Sets,[org.kframework.attributes.Location(Location(400,1,400,8)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Sends,[org.kframework.attributes.Location(Location(105,1,105,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( RhoTuple/ProcList,[org.kframework.attributes.Location(Location(273,1,273,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( RhoList,[org.kframework.attributes.Location(Location(279,1,279,11)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Repeated join,[org.kframework.attributes.Location(Location(531,1,531,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Repeated join,[org.kframework.attributes.Location(Location(489,1,489,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Reconstruct listen from listen info,[org.kframework.attributes.Location(Location(201,1,201,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Receives,[org.kframework.attributes.Location(Location(119,1,119,12)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Peek join,[org.kframework.attributes.Location(Location(543,1,543,13)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Peek join,[org.kframework.attributes.Location(Location(501,1,501,13)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Name(s),[org.kframework.attributes.Location(Location(283,1,283,11)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Name #in NameTuple,[org.kframework.attributes.Location(Location(217,1,217,22)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Maps,[org.kframework.attributes.Location(Location(394,1,394,8)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Linear join,[org.kframework.attributes.Location(Location(519,1,519,15)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Linear join,[org.kframework.attributes.Location(Location(477,1,477,15)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Int #in RhoTuple,[org.kframework.attributes.Location(Location(212,1,212,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Guards,[org.kframework.attributes.Location(Location(172,1,172,10)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Binds,[org.kframework.attributes.Location(Location(304,1,304,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Binds - number of listens in a join,[org.kframework.attributes.Location(Location(289,1,289,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Bind,[org.kframework.attributes.Location(Location(317,1,317,8)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( Bind(s) #in BindTuple,[org.kframework.attributes.Location(Location(222,1,222,25)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany( Name : Set ),[org.kframework.attributes.Location(Location(464,1,464,27)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany( ChanList : Bind(s) ),[org.kframework.attributes.Location(Location(441,1,441,35)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany( ChanLen : Bind(s) ),[org.kframework.attributes.Location(Location(429,1,429,34)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  rule Set( A:Proc ) #union Set( B:Proc , C:Proc ) => #if A ==K B,[org.kframework.attributes.Location(Location(268,1,268,68)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  rule Set( A:Proc ) #union Set( B:Proc ) => #if A ==K B #then Set( A ) #else Set( A , B ) #fi,[org.kframework.attributes.Location(Location(267,1,267,97)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  rule Set( ) #union S:RhoSet => S,[org.kframework.attributes.Location(Location(265,1,265,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  rule S:RhoSet #union Set( ) => S,[org.kframework.attributes.Location(Location(266,1,266,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(
//--------------
//--- #slice ---
//--------------
  rule #truncate( R:RhoList , Fin:Int ) => R requires (Fin >=Int #length R)
  rule #truncate( [ A:Proc ] , Fin:Int ) => #if Fin <=Int 0 #then [ ] #else [A] #fi

  rule #slice( [ ] , _ , _ ) => [ ]
  rule #slice( [ A:Proc ] , St:Int , Fin:Int ) => #if ( St ==Int 0 andBool Fin ==Int 0 ) #then [A] #else [ ] #fi
  rule #slice( [ A:Proc ] , St:Int , Fin:Int ) => #if ( St ==Int 0 andBool Fin ==Int 0 ) #then [A] #else [ ] #fi
  
//-------------
//--- #keys ---
//-------------
  rule #keys { }:RhoMap => Set( )
  rule #keys { A:Proc : _:Proc } => Set( A )
  rule #keys { A:Proc : _:Proc , B:Proc : _:Proc } => Set( A , B )
  rule #keys { A:Proc : _:Proc , R:RhoKVPairs } => SetItem(A) #keys {R}
,[org.kframework.attributes.Location(Location(243,1,261,2)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
endmodule


module AUXFUN$SYNTAX [org.kframework.attributes.Location(Location(100,1,555,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))]
  imports AUXFUN-SYNTAX$SYNTAX
  syntax KResult ::= Name
  syntax KResult ::= Int
endmodule


module AUXFUN-SYNTAX [org.kframework.attributes.Location(Location(5,1,98,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))]
  imports GRHO-SYNTAX
  imports AUXFUN-SYNTAX$SYNTAX
  ModuleComment( _#ine_: Binds x Binds ----> Bool,[org.kframework.attributes.Location(Location(77,74,77,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#ine_: Bind x Binds -----> Bool,[org.kframework.attributes.Location(Location(76,74,76,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#ine_: Bind x Bind ------> Bool,[org.kframework.attributes.Location(Location(75,74,75,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Name x Names ------> Bool,[org.kframework.attributes.Location(Location(71,74,71,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Name x Name  ------> Bool,[org.kframework.attributes.Location(Location(70,74,70,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Int x RhoTuple ----> Bool,[org.kframework.attributes.Location(Location(69,74,69,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Binds x Binds -----> Bool,[org.kframework.attributes.Location(Location(74,74,74,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Bind  x Binds -----> Bool,[org.kframework.attributes.Location(Location(73,74,73,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( _#in_: Bind  x Bind ------> Bool,[org.kframework.attributes.Location(Location(72,74,72,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #size: RhoSet ----------------------> Int,[org.kframework.attributes.Location(Location(22,64,22,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #size: RhoMap ----------------------> Int,[org.kframework.attributes.Location(Location(21,64,21,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #msg(_): Send ------------> Procs,[org.kframework.attributes.Location(Location(33,67,33,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #msg(_): Send ------------> Proc,[org.kframework.attributes.Location(Location(30,64,30,99)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length: RhoList -------------------> Int,[org.kframework.attributes.Location(Location(23,64,23,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): ProcList ---------------> Int,[org.kframework.attributes.Location(Location(8,64,8,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): Names ------------------> Int,[org.kframework.attributes.Location(Location(11,64,11,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): Name -------------------> Int,[org.kframework.attributes.Location(Location(10,64,10,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): GuardedBinds -----------> Int,[org.kframework.attributes.Location(Location(13,64,13,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): Binds --------> Procs,[org.kframework.attributes.Location(Location(32,67,32,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length(_): Binds ------------------> Int,[org.kframework.attributes.Location(Location(12,64,12,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #length( ):  -----------------------> Int,[org.kframework.attributes.Location(Location(9,64,9,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #guard(_): Receive -------> BExp,[org.kframework.attributes.Location(Location(58,67,58,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #cont(_): Receive --------> Proc,[org.kframework.attributes.Location(Location(29,64,29,99)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany(_:_): Name x Set ---------> Int,[org.kframework.attributes.Location(Location(81,74,81,118)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany(_:_): ChanList x Binds ---> Int,[org.kframework.attributes.Location(Location(85,74,85,118)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany(_:_): ChanList x Bind ----> Int,[org.kframework.attributes.Location(Location(84,74,84,118)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany(_:_): ChanLen  x Binds ---> Int,[org.kframework.attributes.Location(Location(83,74,83,118)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanmany(_:_): ChanLen  x Bind ----> Int,[org.kframework.attributes.Location(Location(82,74,82,118)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanlist(_): Binds ------> Set,[org.kframework.attributes.Location(Location(90,74,90,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #chanlist(_): Bind -------> Set,[org.kframework.attributes.Location(Location(89,74,89,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #bindocce(_): Binds ------> Set,[org.kframework.attributes.Location(Location(94,74,94,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #bindocce(_): Bind -------> Set,[org.kframework.attributes.Location(Location(93,74,93,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #bind(_): Receive --------> Binds,[org.kframework.attributes.Location(Location(27,64,27,100)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #bind(_): Receive --------> Bind,[org.kframework.attributes.Location(Location(25,64,25,99)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #bind(_): BindOcc --------> Bind,[org.kframework.attributes.Location(Location(96,57,96,92)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #append(_;_): Procs x Procs --------> Procs,[org.kframework.attributes.Location(Location(37,67,37,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #append(_;_): Procs x Proc ---------> Procs,[org.kframework.attributes.Location(Location(35,67,35,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #append(_;_): Proc  x Procs --------> Procs,[org.kframework.attributes.Location(Location(36,67,36,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment( #append(_;_): Proc  x Proc ---------> Procs,[org.kframework.attributes.Location(Location(34,67,34,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #stype(_): Send -------------------> Int,[org.kframework.attributes.Location(Location(17,64,17,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #rtype(_): Receive ----------------> Int,[org.kframework.attributes.Location(Location(19,64,19,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #rtype(_): Bind -------------------> Int,[org.kframework.attributes.Location(Location(18,64,18,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #chanlen(_): Binds ------> Set,[org.kframework.attributes.Location(Location(88,74,88,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #chanlen(_): Bind -------> Set,[org.kframework.attributes.Location(Location(87,74,87,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #bindocc(_): Binds ------> Set,[org.kframework.attributes.Location(Location(92,74,92,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(  #bindocc(_): Bind -------> Set,[org.kframework.attributes.Location(Location(91,74,91,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(   #quotes(_): Procs ------> Names,[org.kframework.attributes.Location(Location(52,67,52,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(   #bnum(_): Receive ----------------> Int,[org.kframework.attributes.Location(Location(16,64,16,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(   #bnum(_): GuardedBind ------------> Int,[org.kframework.attributes.Location(Location(15,64,15,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(   #bnum(_): Bind -------------------> Int,[org.kframework.attributes.Location(Location(14,64,14,108)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Send -------> Name,[org.kframework.attributes.Location(Location(39,67,39,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Receive ----> Names,[org.kframework.attributes.Location(Location(49,67,49,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Receive ----> Name,[org.kframework.attributes.Location(Location(40,67,40,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Binds ------> Names,[org.kframework.attributes.Location(Location(48,67,48,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Binds ------> Names,[org.kframework.attributes.Location(Location(47,67,47,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Bind -------> Name,[org.kframework.attributes.Location(Location(42,67,42,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #chan(_): Bind -------> Name,[org.kframework.attributes.Location(Location(41,67,41,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Receive ----> Names,[org.kframework.attributes.Location(Location(51,67,51,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Receive ----> Name,[org.kframework.attributes.Location(Location(45,67,45,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Names x Names ------> Names,[org.kframework.attributes.Location(Location(56,67,56,111)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Names x Name -------> Names,[org.kframework.attributes.Location(Location(54,67,54,111)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Name  x Names ------> Names,[org.kframework.attributes.Location(Location(55,67,55,111)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Name  x Name -------> Names,[org.kframework.attributes.Location(Location(53,67,53,111)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Binds ------> Names,[org.kframework.attributes.Location(Location(50,67,50,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Bind -------> Name,[org.kframework.attributes.Location(Location(44,67,44,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
  ModuleComment(     #bvar(_): Bind -------> Name,[org.kframework.attributes.Location(Location(43,67,43,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))])
endmodule


module AUXFUN-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(5,1,98,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/AuxFun/auxfun.k))]
  imports GRHO-SYNTAX$SYNTAX
  syntax Set ::= "#chanlist" "(" Binds ")" [function()]
  syntax Set ::= "#chanlist" "(" Bind ")" [function()]
  syntax Set ::= "#chanlen" "(" Binds ")" [function()]
  syntax Set ::= "#chanlen" "(" Bind ")" [function()]
  syntax Set ::= "#bindocce" "(" Binds ")" [function()]
  syntax Set ::= "#bindocce" "(" Bind ")" [function()]
  syntax Set ::= "#bindocc" "(" Binds ")" [function()]
  syntax Set ::= "#bindocc" "(" Bind ")" [function()]
  syntax RhoSet ::= RhoSet "#union" RhoSet [function()]
  syntax RhoSet ::= "#keys" RhoMap [function()]
  syntax RhoList ::= "#truncate(" RhoList "," Int ")" [function()]
  syntax RhoList ::= "#slice(" RhoList "," Int "," Int ")" [function()]
  syntax Procs ::= "#msg" "(" Send ")" [function()]
  syntax Procs ::= "#lengths" "(" Binds ")" [function()]
  syntax Procs ::= "#append" "(" Procs ";" Procs ")" [function()]
  syntax Procs ::= "#append" "(" Procs ";" Proc ")" [function()]
  syntax Procs ::= "#append" "(" Proc ";" Procs ")" [function()]
  syntax Procs ::= "#append" "(" Proc ";" Proc ")" [function()]
  syntax Proc ::= "#msg" "(" Send ")" [function()]
  syntax Proc ::= "#cont" "(" Receive ")" [function()]
  syntax Names ::= "#quotes" "(" Procs ")" [function()]
  syntax Names ::= "#chan" "(" Receive ")" [function()]
  syntax Names ::= "#chan" "(" GuardedBinds ")" [function()]
  syntax Names ::= "#chan" "(" Binds ")" [function()]
  syntax Names ::= "#bvar" "(" Receive ")" [function()]
  syntax Names ::= "#bvar" "(" AnyBinds ")" [function()]
  syntax Names ::= "#append" "(" Names ";" Names ")" [function()]
  syntax Names ::= "#append" "(" Names ";" Name ")" [function()]
  syntax Names ::= "#append" "(" Name ";" Names ")" [function()]
  syntax Names ::= "#append" "(" Name ";" Name ")" [function()]
  syntax Name ::= "#chan" "(" Send ")" [function()]
  syntax Name ::= "#chan" "(" Receive ")" [function()]
  syntax Name ::= "#chan" "(" GuardedBind ")" [function()]
  syntax Name ::= "#chan" "(" Bind ")" [function()]
  syntax Name ::= "#bvar" "(" Receive ")" [function()]
  syntax Name ::= "#bvar" "(" GuardedBind ")" [function()]
  syntax Name ::= "#bvar" "(" Bind ")" [function()]
  syntax Map ::= "#rbind" "(" Receive ")" [function()]
  syntax Map ::= "#rbind" "(" AnyBinds ")" [function()]
  syntax Int ::= "#stype" "(" Send ")" [function()]
  syntax Int ::= "#size" RhoSet [function()]
  syntax Int ::= "#size" RhoMap [function()]
  syntax Int ::= "#rtype" "(" Receive ")" [function()]
  syntax Int ::= "#rtype" "(" AnyBinds ")" [function()]
  syntax Int ::= "#length" RhoList [function()]
  syntax Int ::= "#length" "(" ProcList ")" [function()]
  syntax Int ::= "#length" "(" Names ")" [function()]
  syntax Int ::= "#length" "(" Name ")" [function()]
  syntax Int ::= "#length" "(" GuardedBinds ")" [function()]
  syntax Int ::= "#length" "(" Binds ")" [function()]
  syntax Int ::= "#length" "(" ")" [function()]
  syntax Int ::= "#chanmany" "(" Name ":" Set ")" [function()]
  syntax Int ::= "#chanmany" "(" ChanList ":" Binds ")" [function()]
  syntax Int ::= "#chanmany" "(" ChanList ":" Bind ")" [function()]
  syntax Int ::= "#chanmany" "(" ChanLen ":" Binds ")" [function()]
  syntax Int ::= "#chanmany" "(" ChanLen ":" Bind ")" [function()]
  syntax Int ::= "#bnum" "(" Receive ")" [function()]
  syntax Int ::= "#bnum" "(" GuardedBind ")" [function()]
  syntax Int ::= "#bnum" "(" Bind ")" [function()]
  syntax Bool ::= Proc "#in_set" RhoSet [function()]
  syntax Bool ::= Proc "#in_keys" RhoMap [function()]
  syntax Bool ::= Name "#in" "(" Names ")" [function()]
  syntax Bool ::= Name "#in" "(" Name ")" [function()]
  syntax Bool ::= Int "#in" RhoTuple [function()]
  syntax Bool ::= Binds "#ine" "(" Binds ")" [function()]
  syntax Bool ::= Binds "#in" "(" Binds ")" [function()]
  syntax Bool ::= Bind "#ine" "(" Binds ")" [function()]
  syntax Bool ::= Bind "#ine" "(" Bind ")" [function()]
  syntax Bool ::= Bind "#in" "(" Binds ")" [function()]
  syntax Bool ::= Bind "#in" "(" Bind ")" [function()]
  syntax Binds ::= "#bind" "(" Receive ")" [function()]
  syntax Bind ::= "#bind" "(" Receive ")" [function()]
  syntax Bind ::= "#bind" "(" BindOcc ")" [function()]
  syntax BExp ::= "#guard" "(" Receive ")" [function()]
endmodule


module BASIC-K [org.kframework.attributes.Location(Location(8,1,13,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports ML-SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module BASIC-K$SYNTAX [org.kframework.attributes.Location(Location(8,1,13,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports ML-SYNTAX$SYNTAX
  syntax KItem [hook(K.KItem) org.kframework.attributes.Location(Location(10,3,10,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax KConfigVar [org.kframework.attributes.Location(Location(12,3,12,27)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k)) token()]
  syntax K ::= KItem
endmodule


module BOOL [org.kframework.attributes.Location(Location(311,1,360,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BOOL-SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K
  rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool__BOOL`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool__BOOL`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))=>`notBool_`(`_==Bool__BOOL`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(341) org.kframework.attributes.Location(Location(341,8,341,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool__BOOL`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(339) org.kframework.attributes.Location(Location(339,8,339,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool__BOOL`(#SemanticCastToBool(B),#SemanticCastToBool(B))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool__BOOL`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(348) org.kframework.attributes.Location(Location(348,8,348,33)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool__BOOL`(#token("false","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(350) org.kframework.attributes.Location(Location(350,8,350,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool__BOOL`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(349) org.kframework.attributes.Location(Location(349,8,349,33)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool__BOOL`(#SemanticCastToBool(K),#token("false","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(351) org.kframework.attributes.Location(Location(351,8,351,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool__BOOL`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(343) org.kframework.attributes.Location(Location(343,8,343,34)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool__BOOL`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(345) org.kframework.attributes.Location(Location(345,8,345,32)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool__BOOL`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,34)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool__BOOL`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(346) org.kframework.attributes.Location(Location(346,8,346,32)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool__BOOL`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(353) org.kframework.attributes.Location(Location(353,8,353,36)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool__BOOL`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(354) org.kframework.attributes.Location(Location(354,8,354,40)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool__BOOL`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(355) org.kframework.attributes.Location(Location(355,8,355,39)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool__BOOL`(#SemanticCastToBool(B),#token("false","Bool"))=>`notBool_`(#SemanticCastToBool(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(356) org.kframework.attributes.Location(Location(356,8,356,45)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool__BOOL`(#token("true","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(333) org.kframework.attributes.Location(Location(333,8,333,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool__BOOL`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(335) org.kframework.attributes.Location(Location(335,8,335,36)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool__BOOL`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(336) org.kframework.attributes.Location(Location(336,8,336,36)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool__BOOL`(#SemanticCastToBool(K),#token("true","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(331) org.kframework.attributes.Location(Location(331,8,331,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#SemanticCastToBool(B),#token("true","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=Bool__BOOL`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))=>`notBool_`(`_==Bool__BOOL`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(358) org.kframework.attributes.Location(Location(358,8,358,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module BOOL$SYNTAX [org.kframework.attributes.Location(Location(311,1,360,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BOOL-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax priority notBool_ > _andThenBool__BOOL _impliesBool__BOOL _andBool_ _orElseBool__BOOL _orBool__BOOL _xorBool__BOOL > _==Bool__BOOL _=/=Bool__BOOL
  syntax associativity left _xorBool__BOOL
  syntax associativity left _orElseBool__BOOL
  syntax associativity left _orBool__BOOL
  syntax associativity left _impliesBool__BOOL
  syntax associativity left _andThenBool__BOOL
  syntax associativity left _andBool_
  syntax associativity left _==Bool__BOOL _=/=Bool__BOOL
  syntax associativity left _==Bool__BOOL
  syntax associativity left _=/=Bool__BOOL
  syntax Bool ::= Bool "xorBool" Bool [boolOperation() function() functional() hook(BOOL.xor) left() smt-hook(xor)]
  syntax Bool ::= Bool "orElseBool" Bool [boolOperation() function() functional() hook(BOOL.orElse) left() smt-hook(or)]
  syntax Bool ::= Bool "orBool" Bool [boolOperation() function() functional() hook(BOOL.or) latex({#1}\vee_{\scriptstyle\it Bool}{#2}) left() smt-hook(or)]
  syntax Bool ::= Bool "impliesBool" Bool [boolOperation() function() functional() hook(BOOL.implies) left() smt-hook(=>)]
  syntax Bool ::= Bool "andThenBool" Bool [boolOperation() function() functional() hook(BOOL.andThen) left() smt-hook(and)]
  syntax Bool ::= Bool "andBool" Bool [boolOperation() function() functional() hook(BOOL.and) klabel(_andBool_) latex({#1}\wedge_{\scriptstyle\it Bool}{#2}) left() smt-hook(and) symbol()]
  syntax Bool ::= Bool "==Bool" Bool [function() functional() hook(BOOL.eq) left() smt-hook(=)]
  syntax Bool ::= Bool "=/=Bool" Bool [function() functional() hook(BOOL.ne) left() smt-hook(distinct)]
  syntax Bool ::= "notBool" Bool [boolOperation() function() functional() hook(BOOL.not) klabel(notBool_) latex(\neg_{\scriptstyle\it Bool}{#1}) smt-hook(not) symbol()]
endmodule


module BOOL-SYNTAX [org.kframework.attributes.Location(Location(305,1,309,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BOOL-SYNTAX$SYNTAX
endmodule


module BOOL-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(305,1,309,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Bool [hook(BOOL.Bool) org.kframework.attributes.Location(Location(306,3,306,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Bool ::= "true" [token()]
  syntax Bool ::= "false" [token()]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(20,1,23,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
endmodule


module BUILTIN-ID-TOKENS$SYNTAX [org.kframework.attributes.Location(Location(20,1,23,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2) token()]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2) token()]
endmodule


module BYTES$SYNTAX [org.kframework.attributes.Location(Location(753,1,766,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT$SYNTAX
  imports BYTES-IN-K$SYNTAX
endmodule


module BYTES-IN-K$SYNTAX [org.kframework.attributes.Location(Location(679,1,751,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports STRING-BUFFER$SYNTAX
  imports STRING$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  syntax associativity right _+Bytes__BYTES-IN-K
  syntax String ::= "Bytes2String" "(" Bytes "," StringBuffer ")" [function() klabel(Bytes2StringAux)]
  syntax String ::= "Bytes2String" "(" Bytes ")" [function() functional() klabel(Bytes2String)]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes) symbol()]
  syntax Signedness ::= "Signed" [klabel(signedBytes) symbol()]
  syntax Int ::= "lengthBytes" "(" Bytes "," Int ")" [function() klabel(lengthBytesAux) smtlib(lengthBytesAux)]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function() functional() klabel(lengthBytes) smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function() functional() klabel(Bytes2Int)]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes) symbol()]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes) symbol()]
  syntax Bytes ::= Int ":" Bytes
  syntax Bytes ::= Bytes "+Bytes" Bytes [function() functional() right()]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function() klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes "," Bytes ")" [function() klabel(reverseBytesAux)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function() functional() klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function() klabel(replaceAtBytes)]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function() klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function() klabel(padLeftBytes)]
  syntax Bytes ::= "nilBytes"
  syntax Bytes ::= "String2Bytes" "(" String ")" [function() functional() klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function() functional() klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function() functional() klabel(Int2BytesNoLen)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Bytes ")" [function() klabel(Int2BytesAux)]
  syntax Bytes ::= ".Bytes" [function() functional()]
endmodule


module COLLECTIONS [org.kframework.attributes.Location(Location(295,1,303,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports SET
  imports MAP
  imports LIST
  imports COLLECTIONS$SYNTAX
endmodule


module COLLECTIONS$SYNTAX [org.kframework.attributes.Location(Location(295,1,303,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  syntax Set ::= "List2Set" "(" List ")" [function() functional() hook(SET.list2set) klabel(List2Set)]
  syntax List ::= "Set2List" "(" Set ")" [function() hook(SET.set2list) klabel(Set2List)]
endmodule


module CONFIG-CELLS [org.kframework.attributes.Location(Location(124,1,138,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RULE-LISTS
  imports KCELLS
  imports CONFIG-CELLS$SYNTAX
endmodule


module CONFIG-CELLS$SYNTAX [org.kframework.attributes.Location(Location(124,1,138,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax Cell ::= "<" #CellName #CellProperties ">" K "</" #CellName ">" [klabel(#configCell) symbol()]
  syntax Cell ::= "<" #CellName "/>" [klabel(#externalCell) symbol()]
  syntax #CellProperty ::= #CellName "=" KString [klabel(#cellProperty) symbol()]
  syntax #CellProperties ::= #CellProperty #CellProperties [klabel(#cellPropertyList) symbol()]
  syntax #CellProperties ::= "" [klabel(#cellPropertyListTerminator) symbol()]
  syntax #CellName ::= r"[a-zA-Z][a-zA-Z0-9\\-]*" [prec(1) token()]
  syntax #CellName ::= #UpperId [token()]
  syntax #CellName ::= #LowerId [token()]
endmodule


module CONFIGURATION-PRIMITIVES [org.kframework.attributes.Location(Location(1367,1,1369,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports CONFIGURATION-PRIMITIVES$SYNTAX
endmodule


module CONFIGURATION-PRIMITIVES$SYNTAX [org.kframework.attributes.Location(Location(1367,1,1369,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax K ::= "#RESTORE_CONFIGURATION" "(" K ")" [klabel(#RESTORE_CONFIGURATION)]
endmodule


module DEFAULT-CONFIGURATION [org.kframework.attributes.Location(Location(219,1,223,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports MAP
  imports DEFAULT-CONFIGURATION$SYNTAX
  imports BASIC-K
  syntax Cell ::= KCell
  rule initKCell(Init)=>`<k>`(#noDots(.KList),#SemanticCastToK(`Map:lookup`(Init,#token("$PGM","KConfigVar"))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  Bubble(config,<k> $PGM:K </k>,[contentStartColumn(17) contentStartLine(222) org.kframework.attributes.Location(Location(222,3,222,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module DEFAULT-CONFIGURATION$SYNTAX [org.kframework.attributes.Location(Location(219,1,223,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports MAP$SYNTAX
  imports BASIC-K$SYNTAX
  syntax KCell ::= "initKCell" "(" Map ")" [function() initializer() noThread()]
  syntax KCell ::= "<k>" K "</k>" [cell() cellName(k) contentStartColumn(17) contentStartLine(222) format(%1%i%n%2%d%n%3) maincell() org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  Bubble(config,<k> $PGM:K </k>,[contentStartColumn(17) contentStartLine(222) org.kframework.attributes.Location(Location(222,3,222,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module DEFAULT-LAYOUT [org.kframework.attributes.Location(Location(213,1,217,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports DEFAULT-LAYOUT$SYNTAX
endmodule


module DEFAULT-LAYOUT$SYNTAX [org.kframework.attributes.Location(Location(213,1,217,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax #Layout ::= r"(\\/\\/[^\\n\\r]*)"
  syntax #Layout ::= r"(\\/\\*([^\\*]|(\\*+([^\\*\\/])))*\\*+\\/)"
  syntax #Layout ::= r"([\\ \\n\\r\\t])"
endmodule


module DOMAINS [org.kframework.attributes.Location(Location(11,1,22,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING
  imports SET
  imports MAP
  imports LIST
  imports K-REFLECTION
  imports K-IO
  imports INT
  imports DOMAINS-SYNTAX
  imports DOMAINS$SYNTAX
  imports BOOL
  imports BASIC-K
endmodule


module DOMAINS$SYNTAX [org.kframework.attributes.Location(Location(11,1,22,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  imports K-REFLECTION$SYNTAX
  imports K-IO$SYNTAX
  imports INT$SYNTAX
  imports DOMAINS-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module DOMAINS-SYNTAX [org.kframework.attributes.Location(Location(4,1,9,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX
  imports STRING-SYNTAX
  imports ID
  imports DOMAINS-SYNTAX$SYNTAX
  imports BOOL-SYNTAX
endmodule


module DOMAINS-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(4,1,9,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  imports STRING-SYNTAX$SYNTAX
  imports ID$SYNTAX
  imports BOOL-SYNTAX$SYNTAX
endmodule


module FLOAT$SYNTAX [org.kframework.attributes.Location(Location(468,1,532,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority --Float__FLOAT > _^Float__FLOAT > _*Float__FLOAT _/Float__FLOAT _%Float__FLOAT > _+Float__FLOAT _-Float__FLOAT
  syntax associativity left _^Float__FLOAT
  syntax associativity left _>Float__FLOAT
  syntax associativity left _>=Float__FLOAT
  syntax associativity left _==Float_
  syntax associativity left _=/=Float__FLOAT
  syntax associativity left _<Float__FLOAT
  syntax associativity left _<=Float__FLOAT
  syntax associativity left _/Float__FLOAT
  syntax associativity left _-Float__FLOAT
  syntax associativity left _+Float__FLOAT _-Float__FLOAT
  syntax associativity left _+Float__FLOAT
  syntax associativity left _*Float__FLOAT _/Float__FLOAT _%Float__FLOAT
  syntax associativity left _*Float__FLOAT
  syntax associativity left _%Float__FLOAT
  syntax MInt ::= "significandFloat" "(" Float ")" [function() hook(FLOAT.significand) klabel(significandFloat)]
  syntax Int ::= "precisionFloat" "(" Float ")" [function() functional() hook(FLOAT.precision) klabel(precisionFloat)]
  syntax Int ::= "exponentFloat" "(" Float ")" [function() functional() hook(FLOAT.exponent) klabel(exponentFloat)]
  syntax Int ::= "exponentBitsFloat" "(" Float ")" [function() functional() hook(FLOAT.exponentBits) klabel(exponentBitsFloat)]
  syntax Int ::= "Float2Int" "(" Float ")" [function() functional() hook(FLOAT.float2int) klabel(Float2Int) latex({\\it{}Float2Int})]
  syntax Float ::= Float "^Float" Float [function() hook(FLOAT.pow) latex({#1}^{#2}) left()]
  syntax Float ::= Float "/Float" Float [function() hook(FLOAT.div) latex({#1}\mathrel{\div_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.div roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "-Float" Float [function() hook(FLOAT.sub) latex({#1}\mathrel{-_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.sub roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "+Float" Float [function() hook(FLOAT.add) latex({#1}\mathrel{+_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.add roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "*Float" Float [function() hook(FLOAT.mul) latex({#1}\mathrel{\ast_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.mul roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "%Float" Float [function() hook(FLOAT.rem) latex({#1}\mathrel{\%_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.rem roundNearestTiesToEven #1 #2))]
  syntax Float ::= "tanFloat" "(" Float ")" [function() hook(FLOAT.tan) klabel(tanFloat)]
  syntax Float ::= "sqrtFloat" "(" Float ")" [function() klabel(sqrtFloat)]
  syntax Float ::= "sinFloat" "(" Float ")" [function() functional() hook(FLOAT.sin) klabel(sinFloat)]
  syntax Float ::= "roundFloat" "(" Float "," Int "," Int ")" [function() hook(FLOAT.round) klabel(roundFloat)]
  syntax Float ::= "rootFloat" "(" Float "," Int ")" [function() hook(FLOAT.root) klabel(rootFloat)]
  syntax Float ::= "minValueFloat" "(" Int "," Int ")" [function() hook(FLOAT.minValue) klabel(minValueFloat)]
  syntax Float ::= "minFloat" "(" Float "," Float ")" [function() hook(FLOAT.min) klabel(minFloat) smt-hook(fp.min)]
  syntax Float ::= "maxValueFloat" "(" Int "," Int ")" [function() hook(FLOAT.maxValue) klabel(maxValueFloat)]
  syntax Float ::= "maxFloat" "(" Float "," Float ")" [function() hook(FLOAT.max) klabel(maxFloat) smt-hook(fp.max)]
  syntax Float ::= "logFloat" "(" Float ")" [function() hook(FLOAT.log) klabel(logFloat)]
  syntax Float ::= "floorFloat" "(" Float ")" [function() functional() hook(FLOAT.floor) klabel(floorFloat)]
  syntax Float ::= "expFloat" "(" Float ")" [function() functional() hook(FLOAT.exp) klabel(expFloat)]
  syntax Float ::= "cosFloat" "(" Float ")" [function() functional() hook(FLOAT.cos) klabel(cosFloat)]
  syntax Float ::= "ceilFloat" "(" Float ")" [function() functional() hook(FLOAT.ceil) klabel(ceilFloat)]
  syntax Float ::= "atanFloat" "(" Float ")" [function() functional() hook(FLOAT.atan) klabel(atanFloat)]
  syntax Float ::= "atan2Float" "(" Float "," Float ")" [function() hook(FLOAT.atan2) klabel(atan2Float)]
  syntax Float ::= "asinFloat" "(" Float ")" [function() hook(FLOAT.asin) klabel(asinFloat)]
  syntax Float ::= "acosFloat" "(" Float ")" [function() hook(FLOAT.acos) klabel(acosFloat)]
  syntax Float ::= "absFloat" "(" Float ")" [function() functional() hook(FLOAT.abs) klabel(absFloat) smt-hook(fp.abs)]
  syntax Float ::= "Int2Float" "(" Int "," Int "," Int ")" [function() hook(FLOAT.int2float) klabel(Int2Float) latex({\\it{}Int2Float})]
  syntax Float ::= "--Float" Float [function() functional() hook(FLOAT.neg) smt-hook(fp.neg)]
  syntax Bool ::= Float ">Float" Float [function() hook(FLOAT.gt) latex({#1}\mathrel{>_{\scriptstyle\it Float}}{#2}) left() smt-hook(fg.gt)]
  syntax Bool ::= Float ">=Float" Float [function() hook(FLOAT.ge) latex({#1}\mathrel{\geq_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.geq)]
  syntax Bool ::= Float "==Float" Float [function() hook(FLOAT.eq) klabel(_==Float_) latex({#1}\mathrel{==_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.eq)]
  syntax Bool ::= Float "=/=Float" Float [function() latex({#1}\mathrel{\neq_{\scriptstyle\it Float}}{#2}) left() smt-hook((not (fp.eq #1 #2)))]
  syntax Bool ::= Float "<Float" Float [function() hook(FLOAT.lt) latex({#1}\mathrel{<_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.lt)]
  syntax Bool ::= Float "<=Float" Float [function() hook(FLOAT.le) latex({#1}\mathrel{\leq_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.leq)]
  syntax Bool ::= "signFloat" "(" Float ")" [function() functional() hook(FLOAT.sign) klabel(signFloat)]
  syntax Bool ::= "isNaN" "(" Float ")" [function() functional() hook(FLOAT.isNaN) klabel(isNaN) smt-hook(fp.isNaN)]
  syntax Bool ::= "isInfinite" "(" Float ")" [function() functional() klabel(isInfinite)]
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(461,1,466,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports FLOAT-SYNTAX$SYNTAX
endmodule


module FLOAT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(461,1,466,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Float [hook(FLOAT.Float) org.kframework.attributes.Location(Location(462,3,462,34)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3) token()]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3) token()]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?([0-9]+(\\.[0-9]*)?|\\.[0-9]d+))?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1) token()]
endmodule


module GRHO-SYNTAX [org.kframework.attributes.Location(Location(21,1,292,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))]
  imports SUBSTITUTION
  imports GRHO-SYNTAX$SYNTAX
  imports DOMAINS
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(55,1,55,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment(-----------------,[org.kframework.attributes.Location(Location(53,1,53,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(30,1,30,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment(-------------,[org.kframework.attributes.Location(Location(28,1,28,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment(--- PROCESSES ---,[org.kframework.attributes.Location(Location(54,1,54,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment(--- NAMES ---,[org.kframework.attributes.Location(Location(29,1,29,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( write-only,[org.kframework.attributes.Location(Location(240,56,240,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( transform to bytearray - Data.toByteArray( ),[org.kframework.attributes.Location(Location(254,46,254,93)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( sugar for persistent receive,[org.kframework.attributes.Location(Location(171,82,171,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( structural equivalence,[org.kframework.attributes.Location(Location(233,53,233,78)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( string concatenation, e.g. for( y <- x1 ; z <- x2 ){ *y ++ *z },[org.kframework.attributes.Location(Location(212,47,212,113)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( slice of list, string - List.slice(I1,I2) , String.slice(I1,I2),[org.kframework.attributes.Location(Location(269,46,269,112)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( set of keys of a map - map.keys( ),[org.kframework.attributes.Location(Location(265,46,265,83)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( set - Map.set( Key , Value ),[org.kframework.attributes.Location(Location(263,46,263,77)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( semantics?,[org.kframework.attributes.Location(Location(271,46,271,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( semantics? - list and tuple?,[org.kframework.attributes.Location(Location(270,46,270,77)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( read-only,[org.kframework.attributes.Location(Location(241,56,241,68)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( number of elements in unordered structures - Map.size(), Set.size(),[org.kframework.attributes.Location(Location(267,46,267,116)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( nth element - list, string(?), tuple - Proc.nth( Int ) ,[org.kframework.attributes.Location(Location(253,46,253,104)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( not ( Proc == Proc ),[org.kframework.attributes.Location(Location(234,53,234,76)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( not ( Name == Name ),[org.kframework.attributes.Location(Location(232,53,232,76)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( neither read/write,[org.kframework.attributes.Location(Location(242,56,242,77)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( name variable,[org.kframework.attributes.Location(Location(34,46,34,62)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( name equivalence,[org.kframework.attributes.Location(Location(231,53,231,72)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( mod reduction,[org.kframework.attributes.Location(Location(218,56,218,72)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( map, set union - Map.union( Map ) , Set.union( Set ),[org.kframework.attributes.Location(Location(256,46,256,101)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( listening for empty messages,[org.kframework.attributes.Location(Location(33,46,33,77)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( listening channel; variable(s) to bind; number of occurences,[org.kframework.attributes.Location(Location(284,62,284,125)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( listening channel; number of variables to bind; number of occurences,[org.kframework.attributes.Location(Location(283,62,283,133)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( list of values of a map - map.values( ),[org.kframework.attributes.Location(Location(266,46,266,88)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( length of list, tuple - List.length() , Tuple.length(),[org.kframework.attributes.Location(Location(268,46,268,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( hex string -> bytes,[org.kframework.attributes.Location(Location(255,46,255,68)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( getOrElse - get or side condition - Map.getOrElse( Key , SideCondition ),[org.kframework.attributes.Location(Location(262,46,262,121)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( get - get value corresponding to key - Map.get( Key ),[org.kframework.attributes.Location(Location(261,46,261,102)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( for uniform join id,[org.kframework.attributes.Location(Location(279,62,279,84)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( for map substitutions,[org.kframework.attributes.Location(Location(288,36,288,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( for interesting message passing, e.g. for( y <- x ){ *y + 5 },[org.kframework.attributes.Location(Location(210,47,210,111)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( difference - map, set?,[org.kframework.attributes.Location(Location(257,46,257,71)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( delete element? - list, map, set,[org.kframework.attributes.Location(Location(259,46,259,81)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( definitions,[org.kframework.attributes.Location(Location(285,62,285,76)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( contains predicate,[org.kframework.attributes.Location(Location(260,46,260,67)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( contains predicate - list, map, set?,[org.kframework.attributes.Location(Location(264,46,264,85)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( both read/write,[org.kframework.attributes.Location(Location(243,56,243,74)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( add - like single element concat? - list, map, set?,[org.kframework.attributes.Location(Location(258,46,258,100)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( _;_: Int x Int ------> IdNum < KItem,[org.kframework.attributes.Location(Location(282,62,282,101)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Variables,[org.kframework.attributes.Location(Location(25,1,25,13)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Variable references - Name/Process variable shadowing,[org.kframework.attributes.Location(Location(63,47,63,103)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Variable Reference - allows for shadowing,[org.kframework.attributes.Location(Location(160,1,160,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( TODO: Input guards - e.g. for( y <- x if *y > 0 ){ ... },[org.kframework.attributes.Location(Location(96,1,96,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( String interpolation: "${key}rest" %% { key:value , ... } => "value" ++ "rest",[org.kframework.attributes.Location(Location(219,28,219,109)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Stopped process,[org.kframework.attributes.Location(Location(58,47,58,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Single listen receives,[org.kframework.attributes.Location(Location(99,3,99,28)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Several Processes,[org.kframework.attributes.Location(Location(84,1,84,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Several Names,[org.kframework.attributes.Location(Location(39,1,39,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Sequential listen,[org.kframework.attributes.Location(Location(113,3,113,23)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Sends,[org.kframework.attributes.Location(Location(139,1,139,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Send messages,[org.kframework.attributes.Location(Location(72,47,72,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Repeated/Persistent listen,[org.kframework.attributes.Location(Location(110,3,110,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Receives - no mixed linear/peek/repeated/sequential,[org.kframework.attributes.Location(Location(95,1,95,55)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Receive messages,[org.kframework.attributes.Location(Location(69,47,69,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process variable,[org.kframework.attributes.Location(Location(62,47,62,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process variable,[org.kframework.attributes.Location(Location(61,47,61,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process tuples,[org.kframework.attributes.Location(Location(198,3,198,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process sets,[org.kframework.attributes.Location(Location(194,3,194,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process matching,[org.kframework.attributes.Location(Location(68,47,68,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process maps,[org.kframework.attributes.Location(Location(185,3,185,18)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process lists,[org.kframework.attributes.Location(Location(181,3,181,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process bundle,[org.kframework.attributes.Location(Location(73,47,73,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Process Variables,[org.kframework.attributes.Location(Location(77,1,77,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Peek listen,[org.kframework.attributes.Location(Location(107,3,107,17)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Pars should be like a multiset of processes...,[org.kframework.attributes.Location(Location(92,1,92,50)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Parallel composition,[org.kframework.attributes.Location(Location(91,1,91,24)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Parallel composition,[org.kframework.attributes.Location(Location(75,47,75,70)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( P matches Q is syntactic sugar for: match P { Q :=> true _ :=> false },[org.kframework.attributes.Location(Location(230,53,230,126)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( New name declaration(s),[org.kframework.attributes.Location(Location(57,47,57,73)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( New - creates unforgeable names,[org.kframework.attributes.Location(Location(150,1,150,35)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Multiple listen receives,[org.kframework.attributes.Location(Location(119,3,119,30)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Methods,[org.kframework.attributes.Location(Location(65,47,65,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Methods,[org.kframework.attributes.Location(Location(249,1,249,11)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Match,[org.kframework.attributes.Location(Location(153,1,153,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Linear listen,[org.kframework.attributes.Location(Location(104,3,104,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( If...then(...else),[org.kframework.attributes.Location(Location(74,47,74,68)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Ground terms,[org.kframework.attributes.Location(Location(202,1,202,16)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Ground terms - Bool, Int, String, Uri,[org.kframework.attributes.Location(Location(60,47,60,87)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( For handling joins in configuration,[org.kframework.attributes.Location(Location(278,1,278,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Evaluation,[org.kframework.attributes.Location(Location(64,47,64,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Eval,[org.kframework.attributes.Location(Location(146,1,146,8)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Data structures - List, Map, Set, Tuple,[org.kframework.attributes.Location(Location(59,47,59,89)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Contract,[org.kframework.attributes.Location(Location(70,47,70,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Contract,[org.kframework.attributes.Location(Location(170,1,170,12)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Contract invocation,[org.kframework.attributes.Location(Location(71,47,71,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Contract Invocation,[org.kframework.attributes.Location(Location(174,1,174,23)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Conditional,[org.kframework.attributes.Location(Location(164,1,164,15)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Collections - data structures,[org.kframework.attributes.Location(Location(178,1,178,33)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Bundles,[org.kframework.attributes.Location(Location(239,1,239,11)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Builtins are processes too,[org.kframework.attributes.Location(Location(273,1,273,30)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Boolean,[org.kframework.attributes.Location(Location(221,1,221,11)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Boolean expressions,[org.kframework.attributes.Location(Location(67,47,67,69)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Arithmetic,[org.kframework.attributes.Location(Location(207,1,207,14)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( Arithmetic expressions,[org.kframework.attributes.Location(Location(66,47,66,72)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( AExp & BExp resolve to ground terms,[org.kframework.attributes.Location(Location(206,1,206,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( (listening channel ; variable(s) to bind),[org.kframework.attributes.Location(Location(281,62,281,106)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( (listening channel ; number of variables to bind),[org.kframework.attributes.Location(Location(280,62,280,114)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
  ModuleComment( #isProc Predicate,[org.kframework.attributes.Location(Location(245,1,245,21)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))])
endmodule


module GRHO-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(21,1,292,9)) org.kframework.attributes.Source(Source(/home/isaac/Documents/KFramework/Git/Languages/GroundedRho/grho.k))]
  imports SUBSTITUTION$SYNTAX
  imports DOMAINS$SYNTAX
  syntax priority {_}_GRHO-SYNTAX > _<__GRHO-SYNTAX _==__GRHO-SYNTAX _!=__GRHO-SYNTAX _<=__GRHO-SYNTAX _>__GRHO-SYNTAX _matches__GRHO-SYNTAX _>=__GRHO-SYNTAX > not__GRHO-SYNTAX > _and__GRHO-SYNTAX > _or__GRHO-SYNTAX
  syntax priority {_}_GRHO-SYNTAX > _++__GRHO-SYNTAX > -__GRHO-SYNTAX > _*__GRHO-SYNTAX _/__GRHO-SYNTAX > _+__GRHO-SYNTAX _%__GRHO-SYNTAX _-__GRHO-SYNTAX
  syntax priority  >  > Nil_GRHO-SYNTAX >  >  >  >  >  >  >  >  > 
  syntax associativity left _|__GRHO-SYNTAX
  syntax VarRef ::= "=" ProcVar
  syntax VarRef ::= "=" "*" NameVar
  syntax Var ::= Id
  syntax Uri ::= "uri(" String ")"
  syntax UnconsumableSend ::= Name "!!" "(" ProcList ")"
  syntax UnconsumableSend ::= Name "!!" "(" ")"
  syntax SingleRec ::= GuardedSingleRec
  syntax SingleRec ::= "for" "(" Bind ")" "{" Proc "}"
  syntax Set ::= RhoSet
  syntax Send ::= UnconsumableSend
  syntax Send ::= ConsumableSend
  syntax Sbinds ::= Sbind ";" Sbinds
  syntax Sbinds ::= Sbind ";" Sbind
  syntax Sbind ::= NameList "<<" Name [strict(2)]
  syntax Sbind ::= "<<" Name [strict()]
  syntax RhoTuple ::= "(" ProcList ")" [klabel(tuple)]
  syntax RhoTuple ::= "(" ")" [klabel(tuple)]
  syntax RhoSet ::= "Set" "(" ProcList ")"
  syntax RhoSet ::= "Set" "(" ")"
  syntax RhoMap ::= "{" RhoKVPairList "}"
  syntax RhoMap ::= "{" "}"
  syntax RhoList ::= "[" ProcList "]"
  syntax RhoList ::= "[" "]"
  syntax RhoKVPairs ::= RhoKVPair "," RhoKVPairs
  syntax RhoKVPairs ::= RhoKVPair "," RhoKVPair
  syntax RhoKVPairList ::= RhoKVPairs
  syntax RhoKVPairList ::= RhoKVPair
  syntax RhoKVPair ::= Proc ":" Proc
  syntax Receive ::= SingleRec
  syntax Receive ::= MultiRec
  syntax Rbinds ::= Rbind ";" Rbinds
  syntax Rbinds ::= Rbind ";" Rbind
  syntax Rbind ::= NameList "<=" Name [strict(2)]
  syntax Rbind ::= "<=" Name [strict()]
  syntax QuoteVar ::= "@" ProcVar [klabel(qv)]
  syntax Quote ::= "@" Proc
  syntax Procs ::= ProcVars
  syntax Procs ::= Proc "," Procs [strict()]
  syntax Procs ::= Proc "," Proc [strict()]
  syntax ProcVars ::= ProcVar "," ProcVars [klabel(pv)]
  syntax ProcVars ::= ProcVar "," ProcVar [klabel(pv)]
  syntax ProcVarList ::= ProcVars
  syntax ProcVarList ::= ProcVar
  syntax ProcVar ::= Var
  syntax ProcList ::= Procs
  syntax ProcList ::= ProcVarList
  syntax ProcList ::= Proc
  syntax Proc ::= VarRef
  syntax Proc ::= Set
  syntax Proc ::= Send
  syntax Proc ::= Receive
  syntax Proc ::= ProcVar
  syntax Proc ::= Par
  syntax Proc ::= New
  syntax Proc ::= MethodProc
  syntax Proc ::= Match
  syntax Proc ::= Map
  syntax Proc ::= List
  syntax Proc ::= JoinList
  syntax Proc ::= Invocation
  syntax Proc ::= Ground
  syntax Proc ::= EvalVar
  syntax Proc ::= Eval
  syntax Proc ::= Contract
  syntax Proc ::= Conditional
  syntax Proc ::= Collection
  syntax Proc ::= ChanLen
  syntax Proc ::= Bundle
  syntax Proc ::= BindOcc
  syntax Proc ::= BExp
  syntax Proc ::= AExp
  syntax Proc ::= "{" Proc "}" [bracket()]
  syntax Proc ::= "Nil"
  syntax Pbinds ::= Pbind ";" Pbinds
  syntax Pbinds ::= Pbind ";" Pbind
  syntax Pbind ::= NameList "<!" Name [strict(2)]
  syntax Pbind ::= "<!" Name [strict()]
  syntax Par ::= Proc "|" Proc [left()]
  syntax NorQVars ::= NorQVar "," NorQVars [klabel(nqv)]
  syntax NorQVars ::= NorQVar "," NorQVar [klabel(nqv)]
  syntax NorQVarList ::= NorQVars
  syntax NorQVarList ::= NorQVar
  syntax NorQVar ::= QuoteVar
  syntax NorQVar ::= NameVar
  syntax New ::= "new" NameVarList "in" "{" Proc "}" [binder()]
  syntax Names ::= Name "," Names
  syntax Names ::= Name "," Name
  syntax NameVars ::= NameVar "," NameVars [klabel(nv)]
  syntax NameVars ::= NameVar "," NameVar [klabel(nv)]
  syntax NameVarList ::= NameVars
  syntax NameVarList ::= NameVar
  syntax NameVar ::= Var
  syntax NameList ::= NorQVarList
  syntax NameList ::= Names
  syntax NameList ::= NameVarList
  syntax NameList ::= Name
  syntax Name ::= Quote
  syntax Name ::= NorQVar
  syntax Name ::= "EmptyMsg"
  syntax MultiRec ::= GuardedMultiRec
  syntax MultiRec ::= "for" "(" Binds ")" "{" Proc "}"
  syntax MethodProc ::= Proc "." Method "(" ProcList ")" [strict(1)]
  syntax MethodProc ::= Proc "." Method "(" ")" [strict(1)]
  syntax Method ::= "values"
  syntax Method ::= "union"
  syntax Method ::= "toByteArray"
  syntax Method ::= "slice"
  syntax Method ::= "size"
  syntax Method ::= "set"
  syntax Method ::= "nth"
  syntax Method ::= "length"
  syntax Method ::= "keys"
  syntax Method ::= "iterate"
  syntax Method ::= "hexToBytes"
  syntax Method ::= "getOrElse"
  syntax Method ::= "get"
  syntax Method ::= "diff"
  syntax Method ::= "delete"
  syntax Method ::= "contains"
  syntax Method ::= "confine"
  syntax Method ::= "add"
  syntax MatchCases ::= MatchCase MatchCases
  syntax MatchCases ::= MatchCase MatchCase
  syntax MatchCaseList ::= MatchCases
  syntax MatchCaseList ::= MatchCase
  syntax MatchCase ::= Proc ":=>" Proc [strict(2)]
  syntax Match ::= "match" Proc "{" MatchCaseList "}"
  syntax Map ::= RhoMap
  syntax Lbinds ::= Lbind ";" Lbinds
  syntax Lbinds ::= Lbind ";" Lbind
  syntax Lbind ::= NameList "<-" Name [strict(2)]
  syntax Lbind ::= "<-" Name [strict()]
  syntax KVariable ::= ProcVar
  syntax KVariable ::= NameVar
  syntax KVariable ::= Int
  syntax KItem ::= Procs
  syntax KItem ::= Proc
  syntax KItem ::= Names
  syntax KItem ::= Name
  syntax KItem ::= IdNum
  syntax JoinList ::= "{[" Proc ";" Int "]}"
  syntax Invocation ::= Name "(" ProcList ")"
  syntax Invocation ::= Name "(" ")"
  syntax IfThen ::= "if" "(" BExp ")" "then" Proc [strict(1)]
  syntax IdNum ::= Int ";" Int
  syntax GuardedSingleRec ::= "for" "(" GuardedBind ")" "{" Proc "}"
  syntax GuardedMultiRec ::= "for" "(" GuardedBinds ")" "{" Proc "}"
  syntax GuardedBinds ::= Binds Guard
  syntax GuardedBind ::= Bind Guard
  syntax Guard ::= "if" BExp [strict()]
  syntax Ground ::= Uri
  syntax Ground ::= String
  syntax Ground ::= Int
  syntax Ground ::= Bool
  syntax EvalVar ::= "*" NameVar [klabel(ev)]
  syntax Eval ::= "*" Name [strict()]
  syntax Else ::= IfThen "else" Proc
  syntax Contract ::= "contract" Name "(" NameList ")" "=" "{" Proc "}"
  syntax Contract ::= "contract" Name "(" ")" "=" "{" Proc "}"
  syntax ConsumableSend ::= Name "!" "(" ProcList ")"
  syntax ConsumableSend ::= Name "!" "(" ")"
  syntax Conditional ::= IfThen
  syntax Conditional ::= Else
  syntax Collection ::= RhoTuple
  syntax Collection ::= RhoSet
  syntax Collection ::= RhoMap
  syntax Collection ::= RhoList
  syntax ChanList ::= "(" Name ";" NameList ")"
  syntax ChanLen ::= "(" Name ";" Int ")"
  syntax Bundle ::= "bundle0" "{" Proc "}"
  syntax Bundle ::= "bundle-" "{" Proc "}"
  syntax Bundle ::= "bundle+" "{" Proc "}"
  syntax Bundle ::= "bundle" "{" Proc "}"
  syntax Bool ::= "#isProc(" K ")"
  syntax Bool ::= "#isName(" K ")"
  syntax Binds ::= Sbinds
  syntax Binds ::= Rbinds
  syntax Binds ::= Pbinds
  syntax Binds ::= Lbinds
  syntax BindOcc ::= Name ";" NameList ";;" Int
  syntax BindOcc ::= Name ";" Int ";;" Int
  syntax BindList ::= Binds
  syntax BindList ::= Bind
  syntax Bind ::= Sbind
  syntax Bind ::= Rbind
  syntax Bind ::= Pbind
  syntax Bind ::= Lbind
  syntax BExp ::= String
  syntax BExp ::= Proc "matches" Proc
  syntax BExp ::= Proc "==" Proc
  syntax BExp ::= Proc "!=" Proc
  syntax BExp ::= Name "==" Name
  syntax BExp ::= Name "!=" Name
  syntax BExp ::= Eval
  syntax BExp ::= Bool
  syntax BExp ::= BExp "or" BExp [strict(1)]
  syntax BExp ::= BExp "and" BExp [strict(1)]
  syntax BExp ::= AExp ">=" AExp [seqstrict()]
  syntax BExp ::= AExp ">" AExp [seqstrict()]
  syntax BExp ::= AExp "<=" AExp [seqstrict()]
  syntax BExp ::= AExp "<" AExp [seqstrict()]
  syntax BExp ::= "{" BExp "}"
  syntax BExp ::= "not" BExp [strict()]
  syntax AnyBinds ::= GuardedBinds
  syntax AnyBinds ::= GuardedBind
  syntax AnyBinds ::= Binds
  syntax AnyBinds ::= Bind
  syntax AExp ::= String
  syntax AExp ::= Int
  syntax AExp ::= Eval
  syntax AExp ::= AExp "/" AExp [strict()]
  syntax AExp ::= AExp "-" AExp [strict()]
  syntax AExp ::= AExp "++" AExp
  syntax AExp ::= AExp "+" AExp [strict()]
  syntax AExp ::= AExp "*" AExp [strict()]
  syntax AExp ::= AExp "%" AExp [strict()]
  syntax AExp ::= "{" AExp "}"
  syntax AExp ::= "-" AExp [strict()]
endmodule


module ID [org.kframework.attributes.Location(Location(786,1,792,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING
  imports ID-SYNTAX
  imports ID-SYMBOLIC
  imports ID$SYNTAX
  rule freshId(#SemanticCastToInt(I))=>`String2Id`(`_+String__STRING`(#token("\"_\"","String"),`Int2String`(#SemanticCastToInt(I)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(791) org.kframework.attributes.Location(Location(791,8,791,62)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module ID$SYNTAX [org.kframework.attributes.Location(Location(786,1,792,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports ID-SYNTAX$SYNTAX
  imports ID-SYMBOLIC$SYNTAX
endmodule


module ID-PROGRAM-PARSING [org.kframework.attributes.Location(Location(768,1,773,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports ID-PROGRAM-PARSING$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module ID-PROGRAM-PARSING$SYNTAX [org.kframework.attributes.Location(Location(768,1,773,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [autoReject() notInRules() prec(1) token()]
  syntax Id ::= #UpperId [autoReject() notInRules() token()]
  syntax Id ::= #LowerId [autoReject() notInRules() token()]
endmodule


module ID-SYMBOLIC [kast() org.kframework.attributes.Location(Location(794,1,798,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports ID-SYNTAX
  imports ID-SYMBOLIC$SYNTAX
  rule `String2Id`(#SemanticCastToString(S))=>`project:Id`(`#parseToken(_,_)_ID-SYMBOLIC`(#token("\"Id\"","String"),#SemanticCastToString(S))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(797) org.kframework.attributes.Location(Location(797,8,797,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module ID-SYMBOLIC$SYNTAX [kast() org.kframework.attributes.Location(Location(794,1,798,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports ID-SYNTAX$SYNTAX
  syntax KItem ::= "#parseToken" "(" String "," String ")" [function() hook(STRING.parseToken)]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(775,1,784,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX
  imports INT-SYNTAX
  imports ID-SYNTAX$SYNTAX
endmodule


module ID-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(775,1,784,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  imports INT-SYNTAX$SYNTAX
  syntax String ::= "Id2String" "(" Id ")" [function() functional() hook(STRING.token2string) klabel(Id2String)]
  syntax Id [org.kframework.attributes.Location(Location(779,3,779,19)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) token()]
  syntax Id ::= "freshId" "(" Int ")" [freshGenerator() function() functional() klabel(freshId)]
  syntax Id ::= "String2Id" "(" String ")" [function() functional() hook(STRING.string2token) klabel(String2Id)]
endmodule


module INT [org.kframework.attributes.Location(Location(430,1,459,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports K-EQUAL
  imports INT-COMMON
  imports INT$SYNTAX
  rule signExtendBitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_-Int__INT-COMMON`(`_modInt__INT-COMMON`(`_+Int_`(bitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN)),`_<<Int__INT-COMMON`(#token("1","Int"),`_-Int__INT-COMMON`(#SemanticCastToInt(LEN),#token("1","Int")))),`_<<Int__INT-COMMON`(#token("1","Int"),#SemanticCastToInt(LEN))),`_<<Int__INT-COMMON`(#token("1","Int"),`_-Int__INT-COMMON`(#SemanticCastToInt(LEN),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(437) org.kframework.attributes.Location(Location(437,8,437,164)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule freshInt(#SemanticCastToInt(I))=>#SemanticCastToInt(I) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(455) org.kframework.attributes.Location(Location(455,8,455,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_modInt__INT-COMMON`(`_>>Int__INT-COMMON`(#SemanticCastToInt(I),#SemanticCastToInt(IDX)),`_<<Int__INT-COMMON`(#token("1","Int"),#SemanticCastToInt(LEN))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(435) org.kframework.attributes.Location(Location(435,8,435,85)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `minInt(_,_)_INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I2) requires `_>=Int__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(448) org.kframework.attributes.Location(Location(448,8,448,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `minInt(_,_)_INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I1) requires `_<=Int__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(447) org.kframework.attributes.Location(Location(447,8,447,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_modInt__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_%Int__INT-COMMON`(`_+Int_`(`_%Int__INT-COMMON`(#SemanticCastToInt(I1),absInt(#SemanticCastToInt(I2))),absInt(#SemanticCastToInt(I2))),absInt(#SemanticCastToInt(I2))) requires `_=/=Int__INT-COMMON`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [concrete() contentStartColumn(5) contentStartLine(442) org.kframework.attributes.Location(Location(442,5,445,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_dividesInt__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==Int_`(`_%Int__INT-COMMON`(#SemanticCastToInt(I2),#SemanticCastToInt(I1)),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(452) org.kframework.attributes.Location(Location(452,8,452,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_divInt__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_/Int__INT-COMMON`(`_-Int__INT-COMMON`(#SemanticCastToInt(I1),`_modInt__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))),#SemanticCastToInt(I2)) requires `_=/=Int__INT-COMMON`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(439) org.kframework.attributes.Location(Location(439,8,440,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==K_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(450) org.kframework.attributes.Location(Location(450,8,450,40)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=Int__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`notBool_`(`_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(451) org.kframework.attributes.Location(Location(451,8,451,53)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module INT$SYNTAX [org.kframework.attributes.Location(Location(430,1,459,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports K-EQUAL$SYNTAX
  imports INT-SYMBOLIC$SYNTAX
  imports INT-COMMON$SYNTAX
  syntax K ::= "srandInt" "(" Int ")" [function() hook(INT.srand) klabel(srandInt)]
  syntax Int ::= "randInt" "(" Int ")" [function() hook(INT.rand) klabel(randInt)]
  syntax Int ::= "freshInt" "(" Int ")" [freshGenerator() function() functional() klabel(freshInt)]
endmodule


module INT-COMMON [org.kframework.attributes.Location(Location(372,1,416,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT-SYNTAX
  imports INT-COMMON$SYNTAX
  imports BOOL
  ModuleComment( divInt and modInt implement e-division ,[org.kframework.attributes.Location(Location(385,16,385,59)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( FIXME: translate /Int and %Int into smtlib ,[org.kframework.attributes.Location(Location(381,16,381,63)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( /Int and %Int implement t-division ,[org.kframework.attributes.Location(Location(382,16,382,55)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module INT-COMMON$SYNTAX [org.kframework.attributes.Location(Location(372,1,416,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority ~Int__INT-COMMON > _^Int__INT-COMMON _^%Int___INT-COMMON > _%Int__INT-COMMON _*Int__INT-COMMON _modInt__INT-COMMON _/Int__INT-COMMON _divInt__INT-COMMON > _+Int_ _-Int__INT-COMMON > _<<Int__INT-COMMON _>>Int__INT-COMMON > _&Int__INT-COMMON > _xorInt__INT-COMMON > _|Int__INT-COMMON
  syntax associativity left _|Int__INT-COMMON
  syntax associativity left _xorInt__INT-COMMON
  syntax associativity left _modInt__INT-COMMON
  syntax associativity left _divInt__INT-COMMON
  syntax associativity left _^Int__INT-COMMON _^%Int___INT-COMMON
  syntax associativity left _^Int__INT-COMMON
  syntax associativity left _^%Int___INT-COMMON
  syntax associativity left _>Int__INT-COMMON
  syntax associativity left _>>Int__INT-COMMON
  syntax associativity left _>=Int__INT-COMMON
  syntax associativity left _==Int_
  syntax associativity left _=/=Int__INT-COMMON
  syntax associativity left _<Int__INT-COMMON
  syntax associativity left _<=Int__INT-COMMON
  syntax associativity left _<<Int__INT-COMMON _>>Int__INT-COMMON
  syntax associativity left _<<Int__INT-COMMON
  syntax associativity left _/Int__INT-COMMON
  syntax associativity left _-Int__INT-COMMON
  syntax associativity left _+Int_ _-Int__INT-COMMON
  syntax associativity left _+Int_
  syntax associativity left _*Int__INT-COMMON
  syntax associativity left _&Int__INT-COMMON
  syntax associativity left _%Int__INT-COMMON _*Int__INT-COMMON _modInt__INT-COMMON _/Int__INT-COMMON _divInt__INT-COMMON
  syntax associativity left _%Int__INT-COMMON
  syntax Int ::= Int "|Int" Int [function() functional() hook(INT.or) latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}) left()]
  syntax Int ::= Int "xorInt" Int [function() functional() hook(INT.xor) latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}) left()]
  syntax Int ::= Int "modInt" Int [function() hook(INT.emod) left() smt-hook(mod)]
  syntax Int ::= Int "divInt" Int [function() hook(INT.ediv) left() smt-hook(div)]
  syntax Int ::= Int "^Int" Int [function() hook(INT.pow) latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}) left() smt-hook(^)]
  syntax Int ::= Int "^%Int" Int Int [function() hook(INT.powmod) left() smt-hook((mod (^ #1 #2) #3))]
  syntax Int ::= Int ">>Int" Int [function() hook(INT.shr) latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}) left()]
  syntax Int ::= Int "<<Int" Int [function() hook(INT.shl) latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}) left()]
  syntax Int ::= Int "/Int" Int [function() hook(INT.tdiv) latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}) left() smt-hook(div)]
  syntax Int ::= Int "-Int" Int [function() functional() hook(INT.sub) latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}) left() smt-hook(-)]
  syntax Int ::= Int "+Int" Int [function() functional() hook(INT.add) klabel(_+Int_) latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}) left() smt-hook(+) symbol()]
  syntax Int ::= Int "*Int" Int [function() functional() hook(INT.mul) latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}) left() smt-hook(*)]
  syntax Int ::= Int "&Int" Int [function() functional() hook(INT.and) latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}) left()]
  syntax Int ::= Int "%Int" Int [function() hook(INT.tmod) latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}) left() smt-hook(mod)]
  syntax Int ::= "~Int" Int [function() functional() hook(INT.not) latex(\mathop{\sim_{\scriptstyle\it Int}}{#1})]
  syntax Int ::= "signExtendBitRangeInt" "(" Int "," Int "," Int ")" [function() hook(INT.signExtendBitRange) klabel(signExtendBitRangeInt)]
  syntax Int ::= "minInt" "(" Int "," Int ")" [function() functional() hook(INT.min) smtlib(int_min)]
  syntax Int ::= "maxInt" "(" Int "," Int ")" [function() functional() hook(INT.max) smtlib(int_max)]
  syntax Int ::= "log2Int" "(" Int ")" [function() hook(INT.log2) klabel(log2Int)]
  syntax Int ::= "bitRangeInt" "(" Int "," Int "," Int ")" [function() hook(INT.bitRange) klabel(bitRangeInt)]
  syntax Int ::= "absInt" "(" Int ")" [function() functional() hook(INT.abs) klabel(absInt) smtlib(int_abs)]
  syntax Bool ::= Int "dividesInt" Int [function()]
  syntax Bool ::= Int ">Int" Int [function() functional() hook(INT.gt) latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}) left() smt-hook(>)]
  syntax Bool ::= Int ">=Int" Int [function() functional() hook(INT.ge) latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}) left() smt-hook(>=)]
  syntax Bool ::= Int "==Int" Int [function() functional() hook(INT.eq) klabel(_==Int_) latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}) left() smt-hook(=)]
  syntax Bool ::= Int "=/=Int" Int [function() functional() hook(INT.ne) latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}) left() smt-hook(distinct)]
  syntax Bool ::= Int "<Int" Int [function() functional() hook(INT.lt) latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}) left() smt-hook(<)]
  syntax Bool ::= Int "<=Int" Int [function() functional() hook(INT.le) latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}) left() smt-hook(<=)]
endmodule


module INT-SYMBOLIC$SYNTAX [kore() org.kframework.attributes.Location(Location(418,1,428,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports ML-SYNTAX$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(367,1,370,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX
  imports INT-SYNTAX$SYNTAX
endmodule


module INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(367,1,370,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2) prefer() token()]
endmodule


module K [org.kframework.attributes.Location(Location(233,1,250,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports REQUIRES-ENSURES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports K-SORT-LATTICE
  imports K$SYNTAX
  imports AUTO-FOLLOW
  imports AUTO-CASTS
  ModuleComment( functions that preserve sorts and can therefore have inner rewrites,[org.kframework.attributes.Location(Location(246,3,246,73)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( functions that do not preserve sort and therefore cannot have inner rewrites,[org.kframework.attributes.Location(Location(248,3,248,82)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module K$SYNTAX [org.kframework.attributes.Location(Location(233,1,250,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports REQUIRES-ENSURES$SYNTAX
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
  syntax priority #KRewrite > #withConfig
  syntax associativity non-assoc #KRewrite
  syntax K ::= K "=>" K [klabel(#KRewrite) poly(0, 1, 2) symbol()]
  syntax K ::= K "#as" K [klabel(#KAs) poly(0, 1, 2) symbol()]
  syntax K ::= "#fun" "(" K "=>" K ")" "(" K ")" [klabel(#fun3) poly(0, 2; 1, 3) symbol()]
  syntax K ::= "#fun" "(" K ")" "(" K ")" [klabel(#fun2) poly(0, 1, 2) prefer() symbol()]
endmodule


module K-BOTTOM-SORT [org.kframework.attributes.Location(Location(159,1,162,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-BOTTOM-SORT$SYNTAX [org.kframework.attributes.Location(Location(159,1,162,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  syntax KItem ::= KBott [poly(0)]
endmodule


module K-EQUAL [org.kframework.attributes.Location(Location(800,1,831,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports K-EQUAL$SYNTAX
  imports BOOL
  imports BASIC-K
  rule `_==Bool__BOOL`(#SemanticCastToBool(K1),#SemanticCastToBool(K2))=>`_==K_`(#SemanticCastToBool(K1),#SemanticCastToBool(K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(824) org.kframework.attributes.Location(Location(824,8,824,43)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=K_`(#SemanticCastToK(K1),#SemanticCastToK(K2))=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(822) org.kframework.attributes.Location(Location(822,8,822,45)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#if_#then_#else_#fi_K-EQUAL`(#SemanticCastToBool(C),_,B2)=>B2 requires `notBool_`(#SemanticCastToBool(C)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(829) org.kframework.attributes.Location(Location(829,8,829,67)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `#if_#then_#else_#fi_K-EQUAL`(#SemanticCastToBool(C),B1,_)=>B1 requires #SemanticCastToBool(C) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(828) org.kframework.attributes.Location(Location(828,8,828,59)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment( Set membership over terms. In addition to equality over
      concrete patterns, K also supports computing equality
      between a concrete pattern and a symbolic pattern.
      This is compiled efficiently down to pattern matching,
      and can be used by putting a term with unbound variables
      in the left child of :=K or =/=K. Note that this does not
      bind variables used on the lhs however (although this may
      change in the future).,[org.kframework.attributes.Location(Location(808,3,815,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module K-EQUAL$SYNTAX [org.kframework.attributes.Location(Location(800,1,831,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
  syntax priority _:=K_ _=/=K_ _:/=K_ _==K_ > #And _andThenBool__BOOL #Implies #Floor _impliesBool__BOOL #Exists #Ceil _andBool_ _orElseBool__BOOL #Forall #Not #Or notBool_ _orBool__BOOL #Equals _xorBool__BOOL
  syntax associativity left _=/=K_ _==K_
  syntax associativity left _:=K_ _:/=K_
  syntax K ::= "#if" Bool "#then" K "#else" K "#fi" [function() functional() hook(KEQUAL.ite) poly(0, 2, 3) smt-hook(ite)]
  syntax Bool ::= K "==K" K [equalEqualK() function() functional() hook(KEQUAL.eq) klabel(_==K_) latex({#1}\mathrel{=_K}{#2}) smt-hook(=) symbol()]
  syntax Bool ::= K "=/=K" K [function() functional() hook(KEQUAL.ne) klabel(_=/=K_) latex({#1}\mathrel{\neq_K}{#2}) notEqualEqualK() smt-hook(distinct) symbol()]
  syntax Bool ::= K ":=K" K [equalEqualK() function() functional() klabel(_:=K_) symbol()]
  syntax Bool ::= K ":/=K" K [function() functional() klabel(_:/=K_) notEqualEqualK() symbol()]
endmodule


module K-IO [org.kframework.attributes.Location(Location(869,1,999,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING
  imports META
  imports LIST
  imports K-IO$SYNTAX
  rule `#stdout_K-IO`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(972) org.kframework.attributes.Location(Location(972,8,972,20)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stdin_K-IO`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(971) org.kframework.attributes.Location(Location(971,8,971,19)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stderr_K-IO`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(973) org.kframework.attributes.Location(Location(973,8,973,20)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#open(_)_K-IO`(#SemanticCastToString(S))=>`#open(_,_)_K-IO`(#SemanticCastToString(S),#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(965) org.kframework.attributes.Location(Location(965,8,965,48)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #projectString(#SemanticCastToString(S))=>#SemanticCastToString(S) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(996) org.kframework.attributes.Location(Location(996,8,996,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #projectInt(#SemanticCastToInt(I))=>#SemanticCastToInt(I) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(998) org.kframework.attributes.Location(Location(998,8,998,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( stdout ,[org.kframework.attributes.Location(Location(983,71,983,82)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( stderr ,[org.kframework.attributes.Location(Location(983,95,983,106)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( exit code ,[org.kframework.attributes.Location(Location(983,44,983,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( executes the given command line with `sh -c cmd:String` on unix or,[org.kframework.attributes.Location(Location(980,3,980,72)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( `cmd /c cmd:String` on windows and returns #systemResult,[org.kframework.attributes.Location(Location(981,3,981,62)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( System,[org.kframework.attributes.Location(Location(978,1,978,10)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Remove a file or empty directory from the disk. Returns .K on success or an IOError on failure.,[org.kframework.attributes.Location(Location(991,3,991,101)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( ------------------------------,[org.kframework.attributes.Location(Location(977,1,977,34)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( #tempFile(path: String, fd: Int),[org.kframework.attributes.Location(Location(989,21,989,56)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( #make safe temp ( prefix:String, suffix:String):IOFile - creates a temporary file in the default system location,[org.kframework.attributes.Location(Location(986,3,986,118)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module K-IO$SYNTAX [org.kframework.attributes.Location(Location(869,1,999,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports META$SYNTAX
  imports LIST$SYNTAX
  syntax String ::= "#projectString" "(" IOString ")" [function() klabel(#projectString)]
  syntax Stream ::= "#buffer" "(" K ")" [klabel(#buffer)]
  syntax KItem ::= "#systemResult" "(" Int "," String "," String ")"
  syntax KItem ::= "#system" "(" String ")" [function() hook(IO.system) impure() klabel(#system)]
  syntax KItem ::= "#stat" "(" String ")" [function() hook(IO.stat) impure()]
  syntax KItem ::= "#opendir" "(" String ")" [function() hook(IO.opendir) impure()]
  syntax KItem ::= "#lstat" "(" String ")" [function() hook(IO.lstat) impure()]
  syntax K ::= "#write" "(" Int "," String ")" [function() hook(IO.write) impure()]
  syntax K ::= "#unlock" "(" Int "," Int ")" [function() hook(IO.unlock) impure()]
  syntax K ::= "#seekEnd" "(" Int "," Int ")" [function() hook(IO.seekEnd) impure()]
  syntax K ::= "#seek" "(" Int "," Int ")" [function() hook(IO.seek) impure()]
  syntax K ::= "#remove" "(" String ")" [function() functional() hook(IO.remove) impure() klabel(#remove)]
  syntax K ::= "#putc" "(" Int "," Int ")" [function() hook(IO.putc) impure()]
  syntax K ::= "#logToFile" "(" String "," String ")" [function() functional() hook(IO.log) impure() klabel(#logToFile) returnsUnit()]
  syntax K ::= "#lock" "(" Int "," Int ")" [function() hook(IO.lock) impure()]
  syntax K ::= "#close" "(" Int ")" [function() hook(IO.close) impure()]
  syntax Int ::= "#stdout" [function() functional()]
  syntax Int ::= "#stdin" [function() functional()]
  syntax Int ::= "#stderr" [function() functional()]
  syntax Int ::= "#projectInt" "(" IOInt ")" [function() klabel(#projectInt)]
  syntax IOString ::= String
  syntax IOString ::= IOError
  syntax IOString ::= "#read" "(" Int "," Int ")" [function() hook(IO.read) impure()]
  syntax IOInt ::= Int
  syntax IOInt ::= IOError
  syntax IOInt ::= "#tell" "(" Int ")" [function() hook(IO.tell) impure()]
  syntax IOInt ::= "#open" "(" String "," String ")" [function() hook(IO.open) impure()]
  syntax IOInt ::= "#open" "(" String ")" [function()]
  syntax IOInt ::= "#getc" "(" Int ")" [function() hook(IO.getc) impure()]
  syntax IOFile ::= IOError
  syntax IOFile ::= "#tempFile" "(" String "," Int ")"
  syntax IOFile ::= "#mkstemp" "(" String "," String ")" [function() hook(IO.mkstemp) impure() klabel(#mkstemp)]
  syntax IOError ::= "#unknownIOError" "(" Int ")" [klabel(#unknownIOError) symbol()]
  syntax IOError ::= "#noparse" [klabel(#noparse) symbol()]
  syntax IOError ::= "#EXDEV" [klabel(#EXDEV) symbol()]
  syntax IOError ::= "#EWOULDBLOCK" [klabel(#EWOULDBLOCK) symbol()]
  syntax IOError ::= "#ETOOMANYREFS" [klabel(#ETOOMANYREFS) symbol()]
  syntax IOError ::= "#ETIMEDOUT" [klabel(#ETIMEDOUT) symbol()]
  syntax IOError ::= "#ESRCH" [klabel(#ESRCH) symbol()]
  syntax IOError ::= "#ESPIPE" [klabel(#ESPIPE) symbol()]
  syntax IOError ::= "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT) symbol()]
  syntax IOError ::= "#ESHUTDOWN" [klabel(#ESHUTDOWN) symbol()]
  syntax IOError ::= "#EROFS" [klabel(#EROFS) symbol()]
  syntax IOError ::= "#ERANGE" [klabel(#ERANGE) symbol()]
  syntax IOError ::= "#EPROTOTYPE" [klabel(#EPROTOTYPE) symbol()]
  syntax IOError ::= "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT) symbol()]
  syntax IOError ::= "#EPIPE" [klabel(#EPIPE) symbol()]
  syntax IOError ::= "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT) symbol()]
  syntax IOError ::= "#EPERM" [klabel(#EPERM) symbol()]
  syntax IOError ::= "#EOVERFLOW" [klabel(#EOVERFLOW) symbol()]
  syntax IOError ::= "#EOPNOTSUPP" [klabel(#EOPNOTSUPP) symbol()]
  syntax IOError ::= "#EOF" [klabel(#EOF) symbol()]
  syntax IOError ::= "#ENXIO" [klabel(#ENXIO) symbol()]
  syntax IOError ::= "#ENOTTY" [klabel(#ENOTTY) symbol()]
  syntax IOError ::= "#ENOTSOCK" [klabel(#ENOTSOCK) symbol()]
  syntax IOError ::= "#ENOTEMPTY" [klabel(#ENOTEMPTY) symbol()]
  syntax IOError ::= "#ENOTDIR" [klabel(#ENOTDIR) symbol()]
  syntax IOError ::= "#ENOTCONN" [klabel(#ENOTCONN) symbol()]
  syntax IOError ::= "#ENOSYS" [klabel(#ENOSYS) symbol()]
  syntax IOError ::= "#ENOSPC" [klabel(#ENOSPC) symbol()]
  syntax IOError ::= "#ENOPROTOOPT" [klabel(#ENOPROTOOPT) symbol()]
  syntax IOError ::= "#ENOMEM" [klabel(#ENOMEM) symbol()]
  syntax IOError ::= "#ENOLCK" [klabel(#ENOLCK) symbol()]
  syntax IOError ::= "#ENOEXEC" [klabel(#ENOEXEC) symbol()]
  syntax IOError ::= "#ENOENT" [klabel(#ENOENT) symbol()]
  syntax IOError ::= "#ENODEV" [klabel(#ENODEV) symbol()]
  syntax IOError ::= "#ENOBUFS" [klabel(#ENOBUFS) symbol()]
  syntax IOError ::= "#ENFILE" [klabel(#ENFILE) symbol()]
  syntax IOError ::= "#ENETUNREACH" [klabel(#ENETUNREACH) symbol()]
  syntax IOError ::= "#ENETRESET" [klabel(#ENETRESET) symbol()]
  syntax IOError ::= "#ENETDOWN" [klabel(#ENETDOWN) symbol()]
  syntax IOError ::= "#ENAMETOOLONG" [klabel(#ENAMETOOLONG) symbol()]
  syntax IOError ::= "#EMSGSIZE" [klabel(#EMSGSIZE) symbol()]
  syntax IOError ::= "#EMLINK" [klabel(#EMLINK) symbol()]
  syntax IOError ::= "#EMFILE" [klabel(#EMFILE) symbol()]
  syntax IOError ::= "#ELOOP" [klabel(#ELOOP) symbol()]
  syntax IOError ::= "#EISDIR" [klabel(#EISDIR) symbol()]
  syntax IOError ::= "#EISCONN" [klabel(#EISCONN) symbol()]
  syntax IOError ::= "#EIO" [klabel(#EIO) symbol()]
  syntax IOError ::= "#EINVAL" [klabel(#EINVAL) symbol()]
  syntax IOError ::= "#EINTR" [klabel(#EINTR) symbol()]
  syntax IOError ::= "#EINPROGRESS" [klabel(#EINPROGRESS) symbol()]
  syntax IOError ::= "#EHOSTUNREACH" [klabel(#EHOSTUNREACH) symbol()]
  syntax IOError ::= "#EHOSTDOWN" [klabel(#EHOSTDOWN) symbol()]
  syntax IOError ::= "#EFBIG" [klabel(#EFBIG) symbol()]
  syntax IOError ::= "#EFAULT" [klabel(#EFAULT) symbol()]
  syntax IOError ::= "#EEXIST" [klabel(#EEXIST) symbol()]
  syntax IOError ::= "#EDOM" [klabel(#EDOM) symbol()]
  syntax IOError ::= "#EDESTADDRREQ" [klabel(#EDESTADDRREQ) symbol()]
  syntax IOError ::= "#EDEADLK" [klabel(#EDEADLK) symbol()]
  syntax IOError ::= "#ECONNRESET" [klabel(#ECONNRESET) symbol()]
  syntax IOError ::= "#ECONNREFUSED" [klabel(#ECONNREFUSED) symbol()]
  syntax IOError ::= "#ECONNABORTED" [klabel(#ECONNABORTED) symbol()]
  syntax IOError ::= "#ECHILD" [klabel(#ECHILD) symbol()]
  syntax IOError ::= "#EBUSY" [klabel(#EBUSY) symbol()]
  syntax IOError ::= "#EBADF" [klabel(#EBADF) symbol()]
  syntax IOError ::= "#EALREADY" [klabel(#EALREADY) symbol()]
  syntax IOError ::= "#EAGAIN" [klabel(#EAGAIN) symbol()]
  syntax IOError ::= "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT) symbol()]
  syntax IOError ::= "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL) symbol()]
  syntax IOError ::= "#EADDRINUSE" [klabel(#EADDRINUSE) symbol()]
  syntax IOError ::= "#EACCES" [klabel(#EACCES) symbol()]
  syntax IOError ::= "#E2BIG" [klabel(#E2BIG) symbol()]
endmodule


module K-REFLECTION [org.kframework.attributes.Location(Location(833,1,849,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING
  imports K-REFLECTION-SYMBOLIC
  imports K-REFLECTION$SYNTAX
  imports BASIC-K
  ModuleComment( undefined,[org.kframework.attributes.Location(Location(846,3,846,15)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( meaningful only for the purposes of compilation to a binary, otherwise,[org.kframework.attributes.Location(Location(845,3,845,76)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module K-REFLECTION$SYNTAX [org.kframework.attributes.Location(Location(833,1,849,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports K-REFLECTION-SYMBOLIC$SYNTAX
  imports BASIC-K$SYNTAX
  syntax String ::= "#sort" "(" K ")" [function() hook(KREFLECTION.sort) klabel(#sort)]
  syntax String ::= "#getenv" "(" String ")" [function() hook(KREFLECTION.getenv) impure() klabel(#getenv)]
  syntax List ::= "#argv" "(" ")" [function() hook(KREFLECTION.argv) klabel(#argv)]
  syntax KItem ::= "getKLabel" "(" K ")" [function() hook(KREFLECTION.getKLabel) klabel(getKLabel)]
  syntax KItem ::= "#fresh" "(" String ")" [function() hook(KREFLECTION.fresh) impure() klabel(#fresh)]
  syntax K ::= "#configuration" [function() hook(KREFLECTION.configuration) impure()]
endmodule


module K-REFLECTION-SYMBOLIC [org.kframework.attributes.Location(Location(851,1,861,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports STRING
  imports K-REFLECTION-SYMBOLIC$SYNTAX
  imports BASIC-K
  ModuleComment( return true if no variable nor unresolved function appears in any subterm,[org.kframework.attributes.Location(Location(858,3,858,79)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( return empty string if the term has no klabel,[org.kframework.attributes.Location(Location(855,3,855,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module K-REFLECTION-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(851,1,861,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax String ::= "#getKLabelString" "(" K ")" [function() hook(KREFLECTION.getKLabelString) klabel(#getKLabelString)]
  syntax Bool ::= "#isVariable" "(" K ")" [function() hook(KREFLECTION.isVariable) klabel(#isVariable)]
  syntax Bool ::= "#isConcrete" "(" K ")" [function() hook(KREFLECTION.isConcrete) klabel(#isConcrete)]
endmodule


module K-SORT-LATTICE [org.kframework.attributes.Location(Location(164,1,167,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports K-TOP-SORT
  imports K-SORT-LATTICE$SYNTAX
  imports K-BOTTOM-SORT
endmodule


module K-SORT-LATTICE$SYNTAX [org.kframework.attributes.Location(Location(164,1,167,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports K-TOP-SORT$SYNTAX
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-TERM [org.kframework.attributes.Location(Location(253,1,259,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports K-TERM$SYNTAX
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K-TERM$SYNTAX [org.kframework.attributes.Location(Location(253,1,259,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
endmodule


module K-TOP-SORT [org.kframework.attributes.Location(Location(154,1,157,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports K-TOP-SORT$SYNTAX
endmodule


module K-TOP-SORT$SYNTAX [org.kframework.attributes.Location(Location(154,1,157,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  syntax KItem ::= KBott [poly(1)]
endmodule


module KAST [org.kframework.attributes.Location(Location(30,1,50,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports KSTRING
  imports KAST$SYNTAX
  imports BUILTIN-ID-TOKENS
  imports BASIC-K
  ModuleComment( something that doesn't collide with meta-variables,[org.kframework.attributes.Location(Location(44,24,44,77)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module KAST$SYNTAX [org.kframework.attributes.Location(Location(30,1,50,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  imports KSTRING$SYNTAX
  imports BUILTIN-ID-TOKENS$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left #KList
  syntax KList ::= KList "," KList [assoc() klabel(#KList) left() prefer() symbol() unit(#EmptyKList)]
  syntax KList ::= K
  syntax KList ::= ".KList" [klabel(#EmptyKList) symbol()]
  syntax KList ::= ".::KList" [klabel(#EmptyKList) symbol()]
  syntax KLabel ::= r"`(\\\\`|\\\\\\\\|[^`\\\\\\n\\r])+`" [token()]
  syntax KLabel ::= r"(?<![a-zA-Z0-9])[#a-z][a-zA-Z0-9]*" [autoReject() prec(1) token()]
  syntax KLabel ::= #LowerId [autoReject() token()]
  syntax KItem ::= KBott
  syntax KBott ::= KLabel "(" KList ")" [klabel(#KApply) symbol()]
  syntax KBott ::= "#token" "(" KString "," KString ")" [klabel(#KToken) symbol()]
  syntax KBott ::= "#klabel" "(" KLabel ")" [klabel(#WrappedKLabel) symbol()]
endmodule


module KCELLS [org.kframework.attributes.Location(Location(97,1,110,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports KCELLS$SYNTAX
  imports KAST
endmodule


module KCELLS$SYNTAX [org.kframework.attributes.Location(Location(97,1,110,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports KAST$SYNTAX
  syntax associativity non-assoc #withConfig
  syntax associativity left #cells
  syntax K ::= Bag
  syntax Cell [org.kframework.attributes.Location(Location(100,3,100,13)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax Bag ::= KBott
  syntax Bag ::= Cell
  syntax Bag ::= Bag Bag [assoc() klabel(#cells) left() symbol() unit(#cells)]
  syntax Bag ::= ".Bag" [klabel(#cells) symbol()]
  syntax Bag ::= ".::Bag" [klabel(#cells) symbol()]
  syntax Bag ::= "(" Bag ")" [bracket()]
  syntax #RuleBody ::= "[" "[" K "]" "]" Bag [avoid() klabel(#withConfig) symbol()]
endmodule


module KSEQ [org.kframework.attributes.Location(Location(54,1,63,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports KSEQ$SYNTAX
  imports KAST
  imports K-TOP-SORT
endmodule


module KSEQ$SYNTAX [org.kframework.attributes.Location(Location(54,1,63,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports KAST$SYNTAX
  imports K-TOP-SORT$SYNTAX
  syntax associativity left #KSequence
  syntax K ::= K "~>" K [assoc() klabel(#KSequence) left() symbol() unit(#EmptyK)]
  syntax K ::= ".K" [klabel(#EmptyK) symbol() unparseAvoid()]
  syntax K ::= ".::K" [klabel(#EmptyK) symbol() unparseAvoid()]
  syntax K ::= "." [klabel(#EmptyK) symbol()]
  syntax K ::= "(" K ")" [bracket() poly(0, 1)]
endmodule


module KSEQ-SYMBOLIC [org.kframework.attributes.Location(Location(85,1,95,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports ML-SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports KSEQ
endmodule


module KSEQ-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(85,1,95,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports ML-SYNTAX$SYNTAX
  imports KSEQ$SYNTAX
  syntax KLabel ::= #KVariable
  syntax KConfigVar ::= r"(?<![A-Za-z0-9_\\$!\\?])(\\$)([A-Z][A-Za-z0-9'_]*)" [autoReject() token()]
  syntax KBott ::= KConfigVar
  syntax KBott ::= #KVariable
  syntax #KVariable ::= r"(?<![A-Za-z0-9_\\$!\\?])(\\!|\\?)?([A-Z][A-Za-z0-9'_]*|_)" [autoReject() prec(1) token()]
  syntax #KVariable ::= #UpperId [autoReject() token()]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(15,1,18,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports KSTRING$SYNTAX
  ModuleComment( optionally qualified strings, like in Scala "abc", i"abc", r"a*bc", etc.,[org.kframework.attributes.Location(Location(17,3,17,78)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module KSTRING$SYNTAX [org.kframework.attributes.Location(Location(15,1,18,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token()]
endmodule


module KVAR [org.kframework.attributes.Location(Location(16,1,19,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports KVAR-SYNTAX
  imports KVAR-SYMBOLIC
  imports KVAR$SYNTAX
endmodule


module KVAR$SYNTAX [org.kframework.attributes.Location(Location(16,1,19,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports KVAR-SYNTAX$SYNTAX
  imports KVAR-SYMBOLIC$SYNTAX
endmodule


module KVAR-PROGRAM-PARSING [org.kframework.attributes.Location(Location(3,1,10,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports KVAR-PROGRAM-PARSING$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module KVAR-PROGRAM-PARSING$SYNTAX [org.kframework.attributes.Location(Location(3,1,10,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax KVar ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [autoReject() notInRules() prec(1) token()]
  syntax KVar ::= #UpperId [autoReject() notInRules() token()]
  syntax KVar ::= #LowerId [autoReject() notInRules() token()]
endmodule


module KVAR-SYMBOLIC [kast() org.kframework.attributes.Location(Location(21,1,30,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k)) symbolic()]
  imports STRING
  imports KVAR-SYNTAX
  imports KVAR-SYMBOLIC$SYNTAX
  rule freshKVar(#SemanticCastToInt(I))=>`String2KVar`(`_+String__STRING`(#token("\"_\"","String"),`Int2String`(#SemanticCastToInt(I)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) org.kframework.attributes.Location(Location(29,8,29,66)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `String2KVar`(#SemanticCastToString(S))=>`project:KVar`(#parseKVar(#token("\"KVar\"","String"),#SemanticCastToString(S))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(28) org.kframework.attributes.Location(Location(28,8,28,63)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module KVAR-SYMBOLIC$SYNTAX [kast() org.kframework.attributes.Location(Location(21,1,30,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k)) symbolic()]
  imports STRING$SYNTAX
  imports KVAR-SYNTAX$SYNTAX
  syntax KVar ::= "freshKVar" "(" Int ")" [freshGenerator() function() functional() klabel(freshKVar)]
  syntax KVar ::= "String2KVar" "(" String ")" [function() functional() hook(STRING.string2var) klabel(String2KVar)]
  syntax KItem ::= "#parseToken" "(" String "," String ")" [function() hook(STRING.parseToken) klabel(#parseKVar)]
endmodule


module KVAR-SYNTAX [org.kframework.attributes.Location(Location(12,1,14,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports KVAR-SYNTAX$SYNTAX
endmodule


module KVAR-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(12,1,14,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  syntax KVar [hook(KVAR.KVar) org.kframework.attributes.Location(Location(13,3,13,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k)) token()]
endmodule


module LIST [org.kframework.attributes.Location(Location(228,1,293,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
  ModuleComment(| ".",[org.kframework.attributes.Location(Location(268,17,268,24)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(TODO(AndreiS): move the paragraph below,[org.kframework.attributes.Location(Location(244,3,244,44)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( \section{User-Defined Lists} It is very common in \K to define a shorthand
   for lists of user-defined sorts. \K 's builtin way of doing this is to use
   List\{KItem,"Separator"\}, where "Separator" is any valid character or
   sequence of characters used to separate distinct elements.
   For example, after defining \\
   syntax KItem ::= Elt\\
   a user could then define
   syntax Elts ::= List\{Elt,","\} \\
   which would be a comma-separated list whose elements are all of sort Elt. A
   user could just as well define \\
   syntax Elts ::= List\{Elt,"and"\} \\
   which would be a list containing elements of sort Elt that are separated with
   the word "and". If only one argument is given, the separator is asumed to be
   commas. So, \\
   syntax Elts = List\{Elt\} \\
   would define a comma-separated list containing elements of sort Elt.
  ,[org.kframework.attributes.Location(Location(245,3,261,4)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( \section{Description} \K lists are ordered collections that may contain
   duplicate elements. These behave more like lists in functional programming
   languages than arrays in imperative programming languages; there's no
   numerical indexing, but instead specific elements are refered to using the
   Mylist,Mylist construct in combination with the MyListItem construct. It's
   worth noting that \K lists aren't exactly like lists in functional languages;
   they're associative, which means that it's easy to access elements at both
   ends of the lists and concatenate them. For example, L:Mylist,E accesses
   element E at the end of a list. ,[org.kframework.attributes.Location(Location(234,3,242,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Remove elements from the beginning and the end of the List. ,[org.kframework.attributes.Location(Location(285,3,285,68)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the list length ,[org.kframework.attributes.Location(Location(291,3,291,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get an element form the List by index. Positive indices mean from the
   beginning (0 is the first element), and negative indices mean from the end
   (-1 is the last element). ,[org.kframework.attributes.Location(Location(272,3,274,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct an empty List: ,[org.kframework.attributes.Location(Location(266,3,266,33)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a singleton List (a list with only  one element) ,[org.kframework.attributes.Location(Location(269,3,269,67)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a new List as the concatenation of two Lists. This is similar to
   the append "@" operation in many functional programming languages. ,[org.kframework.attributes.Location(Location(263,3,264,72)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Check element membership in the given list ,[org.kframework.attributes.Location(Location(288,3,288,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module LIST$SYNTAX [org.kframework.attributes.Location(Location(228,1,293,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _List_
  syntax List [hook(LIST.List) org.kframework.attributes.Location(Location(232,3,232,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax List ::= List List [assoc() element(ListItem) format(%1%n%2) function() functional() hook(LIST.concat) klabel(_List_) left() smtlib(smt_seq_concat) symbol() unit(.List)]
  syntax List ::= List "[" Int "<-" KItem "]" [function() hook(LIST.update) klabel(List:set)]
  syntax List ::= "updateList" "(" List "," Int "," List ")" [function() hook(LIST.updateAll) klabel(updateList)]
  syntax List ::= "range" "(" List "," Int "," Int ")" [function() hook(LIST.range) klabel(List:range) symbol()]
  syntax List ::= "makeList" "(" Int "," KItem ")" [function() hook(LIST.make) klabel(makeList)]
  syntax List ::= "fillList" "(" List "," Int "," Int "," KItem ")" [function() hook(LIST.fill) klabel(fillList)]
  syntax List ::= "ListItem" "(" KItem ")" [function() functional() hook(LIST.element) klabel(ListItem) smtlib(smt_seq_elem) symbol()]
  syntax List ::= ".List" [function() functional() hook(LIST.unit) klabel(.List) latex(\dotCt{List}) smtlib(smt_seq_nil) symbol()]
  syntax KItem ::= List "[" Int "]" [function() hook(LIST.get) klabel(List:get) symbol()]
  syntax Int ::= "size" "(" List ")" [function() functional() hook(LIST.size) klabel(sizeList) smtlib(smt_seq_len)]
  syntax Bool ::= KItem "in" List [function() functional() hook(LIST.in) klabel(_inList_)]
endmodule


module MAP [org.kframework.attributes.Location(Location(92,1,156,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports SET
  imports MAP$SYNTAX
  imports LIST
  ModuleComment(| "."                            [function, hook(MAP.unit)],[org.kframework.attributes.Location(Location(108,16,108,77)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(\section{Description} The Map represents a generalized associative array.
   Each key can be paired with an arbitrary value, and can be used to reference
   its associated value. Multiple bindings for the same key are not allowed. ,[org.kframework.attributes.Location(Location(98,3,100,79)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( breaks klabel uniqueness,[org.kframework.attributes.Location(Location(107,16,107,43)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Update the first map by adding all key/value pairs in the second map. If a
   key in the first map exists also in the second map, its associated value will
   be overwritten by the value from the second map. ,[org.kframework.attributes.Location(Location(131,3,133,54)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Update the Map by removing all key/value pairs with the key in the Set. ,[org.kframework.attributes.Location(Location(136,3,136,80)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Update a Map in form of  of keys and values: ,[org.kframework.attributes.Location(Location(121,3,121,53)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Retrieve the value associated with the given key ,[org.kframework.attributes.Location(Location(116,3,116,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Remove key/value pair associated with the key from map? ,[org.kframework.attributes.Location(Location(124,3,124,64)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the difference of two maps interpreted as sets of entries
   ($M_1 \setminus M2$) ,[org.kframework.attributes.Location(Location(127,3,128,26)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the Map size (number of key/value pairs) ,[org.kframework.attributes.Location(Location(148,3,148,53)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get an arbitrarily chosen key of the Map  ,[org.kframework.attributes.Location(Location(154,3,154,50)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get a Set consisting of all keys in the Map:,[org.kframework.attributes.Location(Location(139,3,139,52)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get a List consisting of all values in the Map: ,[org.kframework.attributes.Location(Location(145,3,145,56)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a singleton Map (a Map with only one key/value pair). The key
   is on the left and the value is on the right ,[org.kframework.attributes.Location(Location(109,3,110,50)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a new Map consisting of key/value pairs of two Maps (the keys of
   the two Maps are assumed disjoint) ,[org.kframework.attributes.Location(Location(102,3,103,40)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Check map inclusion ,[org.kframework.attributes.Location(Location(151,3,151,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(  Construct an empty Map ,[org.kframework.attributes.Location(Location(105,3,105,32)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module MAP$SYNTAX [org.kframework.attributes.Location(Location(92,1,156,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports LIST$SYNTAX
  syntax priority _|->_ > .Map _Map_
  syntax associativity non-assoc _|->_
  syntax associativity left _Map_
  syntax Set ::= "keys" "(" Map ")" [function() functional() hook(MAP.keys) klabel(keys)]
  syntax Map [hook(MAP.Map) org.kframework.attributes.Location(Location(96,3,96,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Map ::= Map Map [assoc() comm() element(_|->_) format(%1%n%2) function() hook(MAP.concat) index(0) klabel(_Map_) left() symbol() unit(.Map)]
  syntax Map ::= Map "[" KItem "<-" KItem "]" [function() functional() hook(MAP.update) prefer()]
  syntax Map ::= Map "[" KItem "<-" "undef" "]" [function() functional() hook(MAP.remove) klabel(_[_<-undef]) symbol()]
  syntax Map ::= Map "-Map" Map [function() functional() hook(MAP.difference) latex({#1}-_{\it Map}{#2})]
  syntax Map ::= KItem "|->" KItem [function() functional() hook(MAP.element) klabel(_|->_) latex({#1}\mapsto{#2}) symbol()]
  syntax Map ::= "updateMap" "(" Map "," Map ")" [function() functional() hook(MAP.updateAll) klabel(updateMap)]
  syntax Map ::= "removeAll" "(" Map "," Set ")" [function() functional() hook(MAP.removeAll) klabel(removeAll)]
  syntax Map ::= ".Map" [function() functional() hook(MAP.unit) klabel(.Map) latex(\dotCt{Map}) symbol()]
  syntax List ::= "values" "(" Map ")" [function() hook(MAP.values) klabel(values)]
  syntax List ::= "keys_list" "(" Map ")" [function() hook(MAP.keys_list)]
  syntax KItem ::= Map "[" KItem "]" [function() hook(MAP.lookup) klabel(Map:lookup) symbol()]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem [function() functional() hook(MAP.lookupOrDefault) klabel(Map:lookupOrDefault)]
  syntax KItem ::= "choice" "(" Map ")" [function() hook(MAP.choice) klabel(Map:choice)]
  syntax Int ::= "size" "(" Map ")" [function() functional() hook(MAP.size) klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map [function() functional() hook(MAP.inclusion)]
  syntax Bool ::= KItem "in_keys" "(" Map ")" [function() functional() hook(MAP.in_keys)]
endmodule


module MAP-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(158,1,182,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports MAP$SYNTAX
  imports K-EQUAL$SYNTAX
endmodule


module META [org.kframework.attributes.Location(Location(863,1,867,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX
  imports META$SYNTAX
  ModuleComment( Takes as input a string and returns a K term,[org.kframework.attributes.Location(Location(865,3,865,50)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module META$SYNTAX [org.kframework.attributes.Location(Location(863,1,867,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  syntax KItem ::= "#parseKAST" "(" String ")" [function() hook(META.parseKAST) klabel(#parseKAST) poly(0)]
endmodule


module MINT$SYNTAX [org.kframework.attributes.Location(Location(1173,1,1365,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  syntax MInt [hook(MINT.MInt) org.kframework.attributes.Location(Location(1178,3,1178,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax MInt ::= "xorMInt" "(" MInt "," MInt ")" [function() hook(MINT.xor) klabel(xorMInt) smt-hook(bvxor)]
  syntax MInt ::= "uremMInt" "(" MInt "," MInt ")" [function() hook(MINT.urem) klabel(uremMInt) smt-hook(bvurem)]
  syntax MInt ::= "udivMInt" "(" MInt "," MInt ")" [function() hook(MINT.udiv) klabel(udivMInt) smt-hook(bvudiv)]
  syntax MInt ::= "subMInt" "(" MInt "," MInt ")" [function() hook(MINT.sub) klabel(subMInt) smt-hook(bvsub)]
  syntax MInt ::= "shlMInt" "(" MInt "," Int ")" [function() hook(MINT.shl) klabel(shlMInt) smt-hook(bvshl)]
  syntax MInt ::= "sMinMInt" "(" MInt "," MInt ")" [function() klabel(sMinMInt) smt-hook((ite (bvslt #1 #2) #1 #2))]
  syntax MInt ::= "sMaxMInt" "(" MInt "," MInt ")" [function() klabel(sMaxMInt) smt-hook((ite (bvslt #1 #2) #2 #1))]
  syntax MInt ::= "orMInt" "(" MInt "," MInt ")" [function() hook(MINT.or) klabel(orMInt) smt-hook(bvor)]
  syntax MInt ::= "negMInt" "(" MInt ")" [function() functional() klabel(negMInt)]
  syntax MInt ::= "mulMInt" "(" MInt "," MInt ")" [function() hook(MINT.mul) klabel(mulMInt) smt-hook(bvmul)]
  syntax MInt ::= "miMInt" "(" List ")" [function() klabel(miMInt)]
  syntax MInt ::= "mi" "(" Int "," Int ")" [function() hook(MINT.constructor) klabel(mi)]
  syntax MInt ::= "mIntOfDigits" "(" List ")" [function() hook(MINT.fromDigits) klabel(mIntOfDigits)]
  syntax MInt ::= "lshrMInt" "(" MInt "," Int ")" [function() hook(MINT.lshr) klabel(lshrMInt) smt-hook(bvlshr)]
  syntax MInt ::= "extractMInt" "(" MInt "," Int "," Int ")" [function() hook(MINT.extract) klabel(extractMInt) smt-hook(extract)]
  syntax MInt ::= "concatenateMInt" "(" MInt "," MInt ")" [function() hook(MINT.concatenate) klabel(concatenateMInt) smtlib((concat #2 #1))]
  syntax MInt ::= "ashrMInt" "(" MInt "," Int ")" [function() hook(MINT.ashr) klabel(ashrMInt)]
  syntax MInt ::= "andMInt" "(" MInt "," MInt ")" [function() hook(MINT.and) klabel(andMInt) smt-hook(bvand)]
  syntax MInt ::= "addMInt" "(" MInt "," MInt ")" [function() hook(MINT.add) klabel(addMInt) smt-hook(bvadd)]
  syntax List ::= "usubMInt" "(" MInt "," MInt ")" [function() hook(MINT.usub) klabel(usubMInt)]
  syntax List ::= "umulMInt" "(" MInt "," MInt ")" [function() hook(MINT.umul) klabel(umulMInt)]
  syntax List ::= "uaddMInt" "(" MInt "," MInt ")" [function() hook(MINT.uadd) klabel(uaddMInt)]
  syntax List ::= "ssubMInt" "(" MInt "," MInt ")" [function() hook(MINT.ssub) klabel(ssubMInt)]
  syntax List ::= "sremMInt" "(" MInt "," MInt ")" [function() hook(MINT.srem) klabel(sremMInt)]
  syntax List ::= "smulMInt" "(" MInt "," MInt ")" [function() hook(MINT.smul) klabel(smulMInt)]
  syntax List ::= "sdivMInt" "(" MInt "," MInt ")" [function() hook(MINT.sdiv) klabel(sdivMInt)]
  syntax List ::= "saddMInt" "(" MInt "," MInt ")" [function() hook(MINT.sadd) klabel(saddMInt)]
  syntax List ::= "digitsOfMInt" "(" MInt "," Int "," Int ")" [function() hook(MINT.toDigits) klabel(digitsOfMInt)]
  syntax Int ::= "uvalueMInt" "(" MInt ")" [function() functional() hook(MINT.uvalue) klabel(uvalueMInt) smt-hook(bv2int)]
  syntax Int ::= "uminMInt" "(" Int ")" [function() klabel(uminMInt)]
  syntax Int ::= "umaxMInt" "(" Int ")" [function() klabel(umaxMInt)]
  syntax Int ::= "svalueMInt" "(" MInt ")" [function() functional() hook(MINT.svalue) klabel(svalueMInt)]
  syntax Int ::= "sminMInt" "(" Int ")" [function() klabel(sminMInt)]
  syntax Int ::= "smaxMInt" "(" Int ")" [function() klabel(smaxMInt)]
  syntax Int ::= "bitwidthMInt" "(" MInt ")" [function() functional() hook(MINT.bitwidth) klabel(bitwidthMInt)]
  syntax Bool ::= "zeroMInt" "(" MInt ")" [function() functional() hook(MINT.zero) klabel(zeroMInt)]
  syntax Bool ::= "uoverflowMInt" "(" Int "," Int ")" [function() klabel(uoverflowMInt)]
  syntax Bool ::= "ultMInt" "(" MInt "," MInt ")" [function() hook(MINT.ult) klabel(ultMInt) smt-hook(bvult)]
  syntax Bool ::= "uleMInt" "(" MInt "," MInt ")" [function() hook(MINT.ule) klabel(uleMInt) smt-hook(bvule)]
  syntax Bool ::= "ugtMInt" "(" MInt "," MInt ")" [function() hook(MINT.ugt) klabel(ugtMInt) smt-hook(bvugt)]
  syntax Bool ::= "ugeMInt" "(" MInt "," MInt ")" [function() hook(MINT.uge) klabel(ugeMInt) smt-hook(bvuge)]
  syntax Bool ::= "soverflowMInt" "(" Int "," Int ")" [function() klabel(soverflowMInt)]
  syntax Bool ::= "sltMInt" "(" MInt "," MInt ")" [function() hook(MINT.slt) klabel(sltMInt) smt-hook(bvslt)]
  syntax Bool ::= "sleMInt" "(" MInt "," MInt ")" [function() hook(MINT.sle) klabel(sleMInt) smt-hook(bvsle)]
  syntax Bool ::= "sgtMInt" "(" MInt "," MInt ")" [function() hook(MINT.sgt) klabel(sgtMInt) smt-hook(bvsgt)]
  syntax Bool ::= "sgeMInt" "(" MInt "," MInt ")" [function() hook(MINT.sge) klabel(sgeMInt) smt-hook(bvsge)]
  syntax Bool ::= "overflowMInt" "(" List ")" [function() klabel(overflowMInt)]
  syntax Bool ::= "neMInt" "(" MInt "," MInt ")" [function() hook(MINT.ne) klabel(neMInt) smt-hook(distinct)]
  syntax Bool ::= "eqMInt" "(" MInt "," MInt ")" [function() hook(MINT.eq) klabel(eqMInt) smt-hook(=)]
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(66,1,82,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K
  imports ML-SYNTAX$SYNTAX
endmodule


module ML-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(66,1,82,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
  syntax priority #True #Floor #Ceil #Not #False > #Equals > #And > #Or > #Implies > #Exists #Forall
  syntax associativity left #Or
  syntax associativity left #And
  syntax K ::= K "#Or" K [assoc() comm() format(%i%1%d%n%2%n%i%3%d) klabel(#Or) left() mlOp() poly(0, 1, 2) symbol() unit(#False)]
  syntax K ::= K "#Implies" K [format(%i%1%d%n%2%n%i%3%d) klabel(#Implies) mlOp() poly(0, 1, 2) symbol()]
  syntax K ::= K "#And" K [assoc() comm() format(%i%1%d%n%2%n%i%3%d) klabel(#And) left() mlOp() poly(0, 1, 2) symbol() unit(#True)]
  syntax K ::= "{" K "#Equals" K "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5) klabel(#Equals) mlOp() poly(1, 2; 0) symbol()]
  syntax K ::= "#True" [klabel(#True) poly(0) symbol()]
  syntax K ::= "#Not" "(" K ")" [klabel(#Not) mlOp() poly(0, 1) symbol()]
  syntax K ::= "#Forall" #KVariable "." K [klabel(#Forall) mlOp() poly(0, 2) symbol()]
  syntax K ::= "#Floor" "(" K ")" [klabel(#Floor) mlOp() poly(1; 0) symbol()]
  syntax K ::= "#False" [klabel(#False) poly(0) symbol()]
  syntax K ::= "#Exists" #KVariable "." K [klabel(#Exists) mlOp() poly(0, 2) symbol()]
  syntax K ::= "#Ceil" "(" K ")" [klabel(#Ceil) mlOp() poly(1; 0) symbol()]
  syntax #KVariable [org.kframework.attributes.Location(Location(69,3,69,19)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module PROGRAM-LISTS [org.kframework.attributes.Location(Location(192,1,204,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K
  imports PROGRAM-LISTS$SYNTAX
  ModuleComment( replaces the default productions for lists:,[org.kframework.attributes.Location(Location(195,3,195,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( into a series of productions more suitable for programs:,[org.kframework.attributes.Location(Location(198,3,198,62)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(194,3,194,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Ne#Es ::= E "," Ne#Es     [klabel('_,_)],[org.kframework.attributes.Location(Location(200,3,200,46)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Es#Terminator ::= ""      [klabel('.Es)],[org.kframework.attributes.Location(Location(199,3,199,46)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Es ::= Ne#Es,[org.kframework.attributes.Location(Location(202,3,202,18)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Es ::= E "," Es [userList("*"), klabel('_,_)],[org.kframework.attributes.Location(Location(196,3,196,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment(      | Es#Terminator      // if the list is *,[org.kframework.attributes.Location(Location(203,3,203,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment(      | ".Es"    [userList("*"), klabel('.Es)],[org.kframework.attributes.Location(Location(197,3,197,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment(         | E Es#Terminator [klabel('_,_)],[org.kframework.attributes.Location(Location(201,3,201,46)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module PROGRAM-LISTS$SYNTAX [org.kframework.attributes.Location(Location(192,1,204,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
endmodule


module RECORD-PRODUCTIONS [org.kframework.attributes.Location(Location(225,1,230,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS$SYNTAX
  ModuleComment( will be able to be parsed with don't-care variables according,[org.kframework.attributes.Location(Location(228,3,228,67)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( to their nonterminal's names,[org.kframework.attributes.Location(Location(229,3,229,34)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( syntax Sort ::= name(Args),[org.kframework.attributes.Location(Location(227,3,227,32)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( if this module is imported, prefix productions of the form,[org.kframework.attributes.Location(Location(226,3,226,64)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module RECORD-PRODUCTIONS$SYNTAX [org.kframework.attributes.Location(Location(225,1,230,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module REQUIRES-ENSURES [org.kframework.attributes.Location(Location(141,1,152,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports REQUIRES-ENSURES$SYNTAX
  imports BASIC-K
endmodule


module REQUIRES-ENSURES$SYNTAX [org.kframework.attributes.Location(Location(141,1,152,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports BASIC-K$SYNTAX
  syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]
  syntax #RuleContent ::= #RuleBody "when" K [klabel(#ruleRequires) symbol()]
  syntax #RuleContent ::= #RuleBody "when" K "ensures" K [klabel(#ruleRequiresEnsures) symbol()]
  syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]
  syntax #RuleContent ::= #RuleBody "requires" K "ensures" K [klabel(#ruleRequiresEnsures) symbol()]
  syntax #RuleContent ::= #RuleBody "ensures" K [klabel(#ruleEnsures) symbol()]
  syntax #RuleBody ::= K
endmodule


module RULE-CELLS [org.kframework.attributes.Location(Location(112,1,122,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RULE-LISTS
  imports RULE-CELLS$SYNTAX
  imports KCELLS
  ModuleComment(syntax Cell ::= "<top>" #OptionalDots K #OptionalDots "</top>" [klabel(<top>)],[org.kframework.attributes.Location(Location(118,3,118,83)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(115,3,115,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( generates, for all productions that have the attribute 'cell' or 'maincell',,[org.kframework.attributes.Location(Location(116,3,116,82)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( a production like below:,[org.kframework.attributes.Location(Location(117,3,117,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module RULE-CELLS$SYNTAX [org.kframework.attributes.Location(Location(112,1,122,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax #OptionalDots ::= "..." [klabel(#dots) symbol()]
  syntax #OptionalDots ::= "" [klabel(#noDots) symbol()]
endmodule


module RULE-LISTS [org.kframework.attributes.Location(Location(206,1,211,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(207,3,207,58)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( adds the subsort production to the parsing module only:,[org.kframework.attributes.Location(Location(208,3,208,61)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
  ModuleComment( Es ::= E        [userList("*")],[org.kframework.attributes.Location(Location(209,3,209,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))])
endmodule


module RULE-LISTS$SYNTAX [org.kframework.attributes.Location(Location(206,1,211,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module RULE-TAG-SYNTAX [org.kframework.attributes.Location(Location(1381,1,1386,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports RULE-TAG-SYNTAX$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module RULE-TAG-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1381,1,1386,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax #RuleTag ::= #UpperId [token()]
  syntax #RuleTag ::= #LowerId [token()]
endmodule


module SET [org.kframework.attributes.Location(Location(184,1,226,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
  ModuleComment(| ".",[org.kframework.attributes.Location(Location(197,16,197,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(rule S:Set -Set .Set => S,[org.kframework.attributes.Location(Location(225,3,225,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(rule S1:Set -Set (SetItem(K:K) S2:Set) => S1 -Set S2,[org.kframework.attributes.Location(Location(223,3,223,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(requires notBool(K in S1),[org.kframework.attributes.Location(Location(224,3,224,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( set difference axioms ,[org.kframework.attributes.Location(Location(221,3,221,29)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( \section{Description} The Set represents a mathematical set (a collection
   of unique items). ,[org.kframework.attributes.Location(Location(190,3,191,23)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( TODO(AndreiS): remove this if not used,[org.kframework.attributes.Location(Location(222,3,222,44)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the intersection of two sets ($A \cap B$) ,[org.kframework.attributes.Location(Location(203,3,203,54)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the difference of two sets ($A \setminus B$),[org.kframework.attributes.Location(Location(206,3,206,56)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get the cardinality of a set ($|A|$) ,[org.kframework.attributes.Location(Location(215,3,215,45)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Get an arbitrarily chosen element of the Set ,[org.kframework.attributes.Location(Location(218,3,218,53)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct an empty Set ,[org.kframework.attributes.Location(Location(195,3,195,31)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a singleton Set (a Set with only one element $\{ a \}$). To add
   an element $a$ to a set $A$, construct the union of the singleton set
   $\{ a \}$ and $A$ ($\{ a \} \cup A$). ,[org.kframework.attributes.Location(Location(198,3,200,43)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Construct a new Set as the union of two different sets ($A \cup B$) ,[org.kframework.attributes.Location(Location(193,3,193,76)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Check set inclusion ($A \subseteq B$) ,[org.kframework.attributes.Location(Location(212,3,212,46)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Check element membership in a set ($a \in A$) ,[org.kframework.attributes.Location(Location(209,3,209,54)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module SET$SYNTAX [org.kframework.attributes.Location(Location(184,1,226,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _Set_
  syntax Set [hook(SET.Set) org.kframework.attributes.Location(Location(188,3,188,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Set ::= Set Set [assoc() comm() element(SetItem) format(%1%n%2) function() functional() hook(SET.concat) idem() klabel(_Set_) left() symbol() unit(.Set)]
  syntax Set ::= Set "-Set" Set [function() functional() hook(SET.difference) klabel(Set:difference) latex({#1}-_{\it Set}{#2}) symbol()]
  syntax Set ::= "intersectSet" "(" Set "," Set ")" [function() functional() hook(SET.intersection) klabel(intersectSet)]
  syntax Set ::= "SetItem" "(" KItem ")" [function() functional() hook(SET.element) klabel(SetItem) symbol()]
  syntax Set ::= ".Set" [function() functional() hook(SET.unit) klabel(.Set) latex(\dotCt{Set}) symbol()]
  syntax KItem ::= "choice" "(" Set ")" [function() hook(SET.choice) klabel(Set:choice)]
  syntax Int ::= "size" "(" Set ")" [function() functional() hook(SET.size) klabel(size)]
  syntax Bool ::= Set "<=Set" Set [function() functional() hook(SET.inclusion)]
  syntax Bool ::= KItem "in" Set [function() functional() hook(SET.in) klabel(Set:in) symbol()]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(4,1,6,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
endmodule


module SORT-K$SYNTAX [org.kframework.attributes.Location(Location(4,1,6,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  syntax K [hook(K.K) org.kframework.attributes.Location(Location(5,3,5,22)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(25,1,28,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  imports SORT-K
endmodule


module SORT-KBOTT$SYNTAX [org.kframework.attributes.Location(Location(25,1,28,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
  syntax KBott [org.kframework.attributes.Location(Location(27,3,27,14)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/kast.k))]
endmodule


module STDIN-STREAM [org.kframework.attributes.Location(Location(1007,1,1101,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STDIN-STREAM$SYNTAX
  imports META
  imports MAP
  imports K-IO
  syntax Cell ::= StdinCell
  rule initStdinCell(Init)=>`<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#buffer(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$STDIN","KConfigVar")))))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(#istream(`#stdin_K-IO`(.KList)))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(_),#SemanticCastToString(Delimiters))),`ListItem`(#buffer(#SemanticCastToString(S)=>`_+String__STRING`(#SemanticCastToString(S),chrChar(#projectInt(`#getc(_)_K-IO`(#SemanticCastToInt(N)))))))),`ListItem`(#token("\"on\"","String"))),`ListItem`(#istream(#SemanticCastToInt(N)))),#noDots(.KList)) requires `_==Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1018) label(STDIN-STREAM.stdinGetc) org.kframework.attributes.Location(Location(1018,8,1024,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#token("\"String\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(#SemanticCastToString(S)),`ListItem`(#buffer(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=Int__INT-COMMON`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1029) label(STDIN-STREAM.stdinParseString) org.kframework.attributes.Location(Location(1029,8,1034,50)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#token("\"Int\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(`String2Int`(substrString(#SemanticCastToString(S),#token("0","Int"),findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),`_+Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_=/=Int__INT-COMMON`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_>Int__INT-COMMON`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1039) label(STDIN-STREAM.stdinParseInt) org.kframework.attributes.Location(Location(1039,8,1046,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters)))=>`ListItem`(#parseKAST(substrString(#SemanticCastToString(S),#token("0","Int"),findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),`_+Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int__INT-COMMON`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_==String__STRING`(#SemanticCastToString(Sort),#token("\"K\"","String"))),`_>Int__INT-COMMON`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1050) label(STDIN-STREAM.stdinParseArbitrarySort) org.kframework.attributes.Location(Location(1050,8,1058,38)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),#token("1","Int"),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int__INT-COMMON`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_=/=String__STRING`(#SemanticCastToString(Sort),#token("\"String\"","String"))),`_<=Int__INT-COMMON`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1062) label(STDIN-STREAM.stdinTrim) org.kframework.attributes.Location(Location(1062,8,1069,39)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`.List`(.KList)=>`ListItem`(#parseInput(#SemanticCastToString(?Sort),#SemanticCastToString(?Delimiters))),`ListItem`(#buffer(#SemanticCastToString(_)))),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1087) label(STDIN-STREAM.stdinUnblock) org.kframework.attributes.Location(Location(1087,8,1091,16)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) unblock()]
  ModuleComment(,[org.kframework.attributes.Location(Location(1083,3,1083,5)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( when we reach whitespace, if it parses create a ListItem,[org.kframework.attributes.Location(Location(1027,3,1027,62)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( when necessary according to user-defined rules, since otherwise it will,[org.kframework.attributes.Location(Location(1073,3,1073,77)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( way will get stuck in concrete execution mode with real IO enabled (i.e.,,[org.kframework.attributes.Location(Location(1079,3,1079,79)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( under `--io on` option), while they will still work in symbolic execution,[org.kframework.attributes.Location(Location(1080,3,1080,79)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( read one character at a time until we read whitespace,[org.kframework.attributes.Location(Location(1016,3,1016,59)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( off`, `--search`, or `--debug` options).,[org.kframework.attributes.Location(Location(1082,3,1082,46)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( mode or concrete execution mode with real IO disabled (i.e., under `--io,[org.kframework.attributes.Location(Location(1081,3,1081,78)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( lead to a diverging (i.e., non-terminating) transition system definition.,[org.kframework.attributes.Location(Location(1074,3,1074,79)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( input stream cell, e.g.,,[org.kframework.attributes.Location(Location(1076,3,1076,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( have a way to specify such patterns.,[org.kframework.attributes.Location(Location(1085,3,1085,42)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( a hack: handle the case when we read integers without the help of the IO server,[org.kframework.attributes.Location(Location(1037,3,1037,85)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1069,40,1069,50)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1058,39,1058,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1046,39,1046,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1034,51,1034,61)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1024,50,1024,60)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( TODO: More patterns need to be supported as well. In that case, we need to,[org.kframework.attributes.Location(Location(1084,3,1084,80)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Non-supported rules that refer to the input stream cell in a sophisticated,[org.kframework.attributes.Location(Location(1078,3,1078,80)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( NOTE: This unblocking rule will be instantiated and inserted carefully,[org.kframework.attributes.Location(Location(1072,3,1072,76)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Currently, it supports only a simple pattern matching on the top of the,[org.kframework.attributes.Location(Location(1075,3,1075,77)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(   rule <k> read() => V ... </k> <in> ListItem(V:Int) => .List ...  </in>,[org.kframework.attributes.Location(Location(1077,3,1077,78)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(_))
       (ListItem(#noIO) ListItem(#istream(_:Int)) => .List) [stdin]
  ,[org.kframework.attributes.Location(Location(1094,3,1099,4)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module STDIN-STREAM$SYNTAX [org.kframework.attributes.Location(Location(1007,1,1101,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports META$SYNTAX
  imports MAP$SYNTAX
  imports K-IO$SYNTAX
  syntax Stream ::= "#parseInput" "(" String "," String ")" [klabel(#parseInput)]
  syntax Stream ::= "#istream" "(" Int ")" [klabel(#istream)]
  syntax StdinCell ::= "initStdinCell" "(" Map ")" [function() initializer() noThread()]
  syntax StdinCell ::= "<stdin>" List "</stdin>" [cell() cellName(stdin) contentStartColumn(17) contentStartLine(1014) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  Bubble(config,<stdin> ListItem(#buffer($STDIN:String)) ListItem($IO:String) ListItem(#istream(#stdin)) </stdin>,[contentStartColumn(17) contentStartLine(1014) org.kframework.attributes.Location(Location(1014,3,1014,113)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module STDOUT-STREAM [org.kframework.attributes.Location(Location(1103,1,1171,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STDOUT-STREAM$SYNTAX
  imports MAP
  imports K-IO
  syntax Cell ::= StdoutCell
  rule initStdoutCell(Init)=>`<stdout>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#ostream(`#stdout_K-IO`(.KList))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(#buffer(#token("\"\"","String")))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),`Int2String`(#SemanticCastToInt(I)))))),`ListItem`(#SemanticCastToInt(I))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1122) label(STDOUT-STREAM.stdoutBufferInt) org.kframework.attributes.Location(Location(1122,8,1128,17)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),`Float2String`(#SemanticCastToFloat(F)))))),`ListItem`(#SemanticCastToFloat(F))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1112) label(STDOUT-STREAM.stdoutBufferFloat) org.kframework.attributes.Location(Location(1112,8,1118,17)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),#SemanticCastToString(S))))),`ListItem`(#SemanticCastToString(S))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1132) label(STDOUT-STREAM.stdoutBufferString) org.kframework.attributes.Location(Location(1132,8,1138,17)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(N)=>`project:Int`(`#write(_,_)_K-IO`(#SemanticCastToInt(N),#SemanticCastToString(S))~>#SemanticCastToInt(N)))),`ListItem`(#token("\"on\"","String"))),`ListItem`(#buffer(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=String__STRING`(#SemanticCastToString(S),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1144) label(STDOUT-STREAM.stdoutWrite) org.kframework.attributes.Location(Location(1144,8,1150,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  ModuleComment(configuration <stderr> ListItem(#ostream(#stderr)) ListItem($IO:String) ListItem(#buffer("")) </stderr>,[org.kframework.attributes.Location(Location(1109,1,1109,106)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1150,29,1150,48)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1139,8,1139,27)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1129,8,1129,27)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1119,8,1119,27)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Send first char from the buffer to the server,[org.kframework.attributes.Location(Location(1142,3,1142,51)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(Buffer:String => Buffer +String Float2String(F)))
       (ListItem(F:Float) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String Int2String(I)))
       (ListItem(I:Int) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String S))
       (ListItem(S:String) => .List)
       _:List [stdout, stderr]

  rule (ListItem(#ostream(_:Int)) ListItem(#noIO) => .List)
       ListItem(#buffer(_))
       _:List [stdout, stderr]
  ,[org.kframework.attributes.Location(Location(1153,3,1169,4)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module STDOUT-STREAM$SYNTAX [org.kframework.attributes.Location(Location(1103,1,1171,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports MAP$SYNTAX
  imports K-IO$SYNTAX
  syntax Stream ::= "#ostream" "(" Int ")" [klabel(#ostream)]
  syntax StdoutCell ::= "initStdoutCell" "(" Map ")" [function() initializer() noThread()]
  syntax StdoutCell ::= "<stdout>" List "</stdout>" [cell() cellName(stdout) contentStartColumn(17) contentStartLine(1108) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  Bubble(config,<stdout> ListItem(#ostream(#stdout)) ListItem($IO:String) ListItem(#buffer("")) </stdout>,[contentStartColumn(17) contentStartLine(1108) org.kframework.attributes.Location(Location(1108,3,1108,105)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module STRING [org.kframework.attributes.Location(Location(547,1,623,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX
  imports STRING$SYNTAX
  imports K-EQUAL
  imports INT
  imports FLOAT-SYNTAX
  rule rfindChar(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(602) org.kframework.attributes.Location(Location(602,8,602,33)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule rfindChar(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`maxInt(_,_)_INT-COMMON`(rfindString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),rfindChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I))) requires `_=/=String__STRING`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(601) org.kframework.attributes.Location(Location(601,8,601,182)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule findChar(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(600) org.kframework.attributes.Location(Location(600,8,600,32)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule findChar(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),#token("-1","Int")),findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I)),`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I)),#token("-1","Int")),findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),`minInt(_,_)_INT-COMMON`(findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I))))) requires `_=/=String__STRING`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(599) org.kframework.attributes.Location(Location(599,8,599,431)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceFirst(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(_))=>#SemanticCastToString(Source) requires `_<Int__INT-COMMON`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(612) org.kframework.attributes.Location(Location(612,8,613,57)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceFirst(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`_+String__STRING`(`_+String__STRING`(substrString(#SemanticCastToString(Source),#token("0","Int"),findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),lengthString(#SemanticCastToString(ToReplace))),lengthString(#SemanticCastToString(Source)))) requires `_>=Int__INT-COMMON`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(609) org.kframework.attributes.Location(Location(609,8,611,66)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceAll(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(621) org.kframework.attributes.Location(Location(621,8,621,154)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(_),#SemanticCastToString(_),#token("0","Int"))=>#SemanticCastToString(Source) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(620) org.kframework.attributes.Location(Location(620,8,620,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),#SemanticCastToInt(Count))=>`_+String__STRING`(`_+String__STRING`(substrString(#SemanticCastToString(Source),#token("0","Int"),findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),`replace(_,_,_,_)_STRING`(substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),lengthString(#SemanticCastToString(ToReplace))),lengthString(#SemanticCastToString(Source))),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`_-Int__INT-COMMON`(#SemanticCastToInt(Count),#token("1","Int")))) requires `_>Int__INT-COMMON`(#SemanticCastToInt(Count),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(616) org.kframework.attributes.Location(Location(616,8,619,30)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING`(substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),lengthString(#SemanticCastToString(ToCount))),lengthString(#SemanticCastToString(Source))),#SemanticCastToString(ToCount))) requires `_>=Int__INT-COMMON`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(606) org.kframework.attributes.Location(Location(606,8,607,60)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>#token("0","Int") requires `_<Int__INT-COMMON`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(604) org.kframework.attributes.Location(Location(604,8,605,59)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_>String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_<String__STRING`(#SemanticCastToString(S2),#SemanticCastToString(S1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(596) org.kframework.attributes.Location(Location(596,8,596,52)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_>=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(597) org.kframework.attributes.Location(Location(597,8,597,63)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_==String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_==K_`(#SemanticCastToString(S1),#SemanticCastToString(S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(583) org.kframework.attributes.Location(Location(583,8,583,49)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_==String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(582) org.kframework.attributes.Location(Location(582,8,582,65)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_<=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING`(#SemanticCastToString(S2),#SemanticCastToString(S1))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(595) org.kframework.attributes.Location(Location(595,8,595,63)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module STRING$SYNTAX [org.kframework.attributes.Location(Location(547,1,623,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  syntax associativity left _==String__STRING
  syntax associativity left _=/=String__STRING
  syntax associativity left _+String__STRING
  syntax String ::= String "+String" String [function() functional() hook(STRING.concat) latex({#1}+_{\scriptstyle\it String}{#2}) left()]
  syntax String ::= "substrString" "(" String "," Int "," Int ")" [function() functional() hook(STRING.substr) klabel(substrString)]
  syntax String ::= "replaceFirst" "(" String "," String "," String ")" [function() functional() hook(STRING.replaceFirst)]
  syntax String ::= "replaceAll" "(" String "," String "," String ")" [function() functional() hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" String "," String "," String "," Int ")" [function() hook(STRING.replace)]
  syntax String ::= "newUUID" [function() hook(STRING.uuid) impure()]
  syntax String ::= "directionalityChar" "(" String ")" [function() hook(STRING.directionality) klabel(directionalityChar)]
  syntax String ::= "chrChar" "(" Int ")" [function() hook(STRING.chr) klabel(chrChar)]
  syntax String ::= "categoryChar" "(" String ")" [function() hook(STRING.category) klabel(categoryChar)]
  syntax String ::= "Int2String" "(" Int ")" [function() functional() hook(STRING.int2string) klabel(Int2String)]
  syntax String ::= "Float2String" "(" Float "," String ")" [function() hook(STRING.floatFormat) klabel(FloatFormat)]
  syntax String ::= "Float2String" "(" Float ")" [function() functional() hook(STRING.float2string) klabel(Float2String)]
  syntax String ::= "Base2String" "(" Int "," Int ")" [function() hook(STRING.base2string) klabel(Base2String)]
  syntax Int ::= "rfindString" "(" String "," String "," Int ")" [function() hook(STRING.rfind) klabel(rfindString)]
  syntax Int ::= "rfindChar" "(" String "," String "," Int ")" [function() hook(STRING.rfindChar) klabel(rfindChar)]
  syntax Int ::= "ordChar" "(" String ")" [function() hook(STRING.ord) klabel(ordChar)]
  syntax Int ::= "lengthString" "(" String ")" [function() functional() hook(STRING.length) klabel(lengthString)]
  syntax Int ::= "findString" "(" String "," String "," Int ")" [function() hook(STRING.find) klabel(findString)]
  syntax Int ::= "findChar" "(" String "," String "," Int ")" [function() hook(STRING.findChar) klabel(findChar)]
  syntax Int ::= "countAllOccurrences" "(" String "," String ")" [function() functional() hook(STRING.countAllOccurrences)]
  syntax Int ::= "String2Int" "(" String ")" [function() hook(STRING.string2int) klabel(String2Int)]
  syntax Int ::= "String2Base" "(" String "," Int ")" [function() hook(STRING.string2base) klabel(String2Base)]
  syntax Float ::= "String2Float" "(" String ")" [function() hook(STRING.string2float) klabel(String2Float)]
  syntax Bool ::= String ">String" String [function() functional() hook(STRING.gt)]
  syntax Bool ::= String ">=String" String [function() functional() hook(STRING.ge)]
  syntax Bool ::= String "==String" String [function() functional() hook(STRING.eq) left()]
  syntax Bool ::= String "=/=String" String [function() functional() hook(STRING.ne) left()]
  syntax Bool ::= String "<String" String [function() functional() hook(STRING.lt)]
  syntax Bool ::= String "<=String" String [function() functional() hook(STRING.le)]
endmodule


module STRING-BUFFER$SYNTAX [org.kframework.attributes.Location(Location(649,1,652,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-BUFFER-IN-K$SYNTAX
endmodule


module STRING-BUFFER-IN-K$SYNTAX [org.kframework.attributes.Location(Location(625,1,637,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k)) symbolic()]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _+String__STRING-BUFFER-IN-K
  syntax StringBuffer ::= StringBuffer "+String" String [avoid() function() functional() left()]
  syntax StringBuffer ::= String
  syntax StringBuffer ::= ".StringBuffer" [function() functional()]
  syntax String ::= "StringBuffer2String" "(" StringBuffer ")" [function() functional() klabel(StringBuffer2String)]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(534,1,545,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  ModuleComment( StringChar ::= ~[\"\n\r\\] // anything except for Newline, DoubleQuote and Backslash,[org.kframework.attributes.Location(Location(537,3,537,90)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( DoubleQuote StringChar* DoubleQuote,[org.kframework.attributes.Location(Location(536,3,536,41)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment( Double Quoted Strings are of the form:,[org.kframework.attributes.Location(Location(535,3,535,44)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(              | [\\][x] 2*Hex // "\xFF"       Backslash 'x' followed by two   hexadecimal characters,[org.kframework.attributes.Location(Location(539,3,539,105)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(              | [\\][u] 4*Hex // "\uFFFF"     Backslash 'u' followed by four  hexadecimal characters,[org.kframework.attributes.Location(Location(540,3,540,105)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(              | [\\][nrtf\"\\] // Backslash followed by either 'nrtf', DoubleQuote or Backslash,[org.kframework.attributes.Location(Location(538,3,538,100)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(              | [\\][U] 8*Hex // "\UFFffFFff" Backslash 'U' followed by eight hexadecimal characters,[org.kframework.attributes.Location(Location(541,3,541,105)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
  ModuleComment(                              // the code must not be in the range [0xdfff, 0xd800] or exceed 0x10ffff,[org.kframework.attributes.Location(Location(542,3,542,107)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))])
endmodule


module STRING-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(534,1,545,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax String [hook(STRING.String) org.kframework.attributes.Location(Location(543,3,543,37)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token()]
endmodule


module SUBSTITUTION [org.kframework.attributes.Location(Location(32,1,38,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports SUBSTITUTION$SYNTAX
  imports MAP
  imports KVAR
endmodule


module SUBSTITUTION$SYNTAX [org.kframework.attributes.Location(Location(32,1,38,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/substitution.k))]
  imports MAP$SYNTAX
  imports KVAR$SYNTAX
  syntax K ::= K "[" Map "]" [function() hook(SUBSTITUTION.substMany) impure() poly(0, 1)]
  syntax K ::= K "[" KItem "/" KItem "]" [function() hook(SUBSTITUTION.substOne) impure() poly(0, 1)]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(362,1,365,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
endmodule


module UNSIGNED-INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(362,1,365,9)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Int [hook(INT.Int) org.kframework.attributes.Location(Location(363,3,363,28)) org.kframework.attributes.Source(Source(/usr/lib/kframework/include/builtin/domains.k))]
  syntax Int ::= r"[0-9]+" [prec(2) prefer() token()]
endmodule