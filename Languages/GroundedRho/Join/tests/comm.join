// Join - only listening for 1- and 2-tuples

  x!(1,1,1) | x!(2,2,2) | y!("a") | y!("b") | z!(true) | z!(false) | for( a1,b1,e1 <- x ; c1 <- y ; d1 <- z ){ ( *a1 , *b1 , *c1 , *d1 , *e1 ) } | for( a2,b2,e2 <= x ; c2 <= y ; d2 <= z ){ [*a2 , *b2 , *c2 , *d2 , *e2 ] }
  
/*
  Output:
$ kompile join.k --backend java --transition "matched"
$ krun tests/comm.join --search-final

  Result ==K <T>
    <threads>
      <thread>
        <k>
          ( 1 , 1 , "b" , false , 1 )
        </k>
      </thread> <thread>
        <k>
          [ 2 , 2 , "a" , true , 2 ]
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        .SendCellBag
      </sends>
      <receives>
        <rec>
          <id>
            1
          </id>
          <length>
            3
          </length>
          <cont>
            [ * a2 , * b2 , * c2 , * d2 , * e2 ]
          </cont>
          <state>
            ""
          </state>
          <match>
            0
          </match>
          <type>
            1
          </type>
          <nomo>
            .Set
          </nomo>
          <listens>
            <listen>
              <chan>
                x
              </chan>
              <vars>
                a2 , b2 , e2
              </vars>
              <num>
                3
              </num>
              <lid>
                3
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                y
              </chan>
              <vars>
                c2
              </vars>
              <num>
                1
              </num>
              <lid>
                4
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                z
              </chan>
              <vars>
                d2
              </vars>
              <num>
                1
              </num>
              <lid>
                5
              </lid>
              <msid>
                ""
              </msid>
            </listen>
          </listens>
        </rec>
      </receives>
    </tuplespace>
    <reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <rid>
        .
      </rid>
      <rnum>
        .
      </rnum>
      <react>
        .
      </react>
      <reat>
        .
      </reat>
    </reaction>
  </T>
#Or
  Result ==K <T>
    <threads>
      <thread>
        <k>
          ( 2 , 2 , "a" , true , 2 )
        </k>
      </thread> <thread>
        <k>
          [ 1 , 1 , "b" , false , 1 ]
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        .SendCellBag
      </sends>
      <receives>
        <rec>
          <id>
            1
          </id>
          <length>
            3
          </length>
          <cont>
            [ * a2 , * b2 , * c2 , * d2 , * e2 ]
          </cont>
          <state>
            ""
          </state>
          <match>
            0
          </match>
          <type>
            1
          </type>
          <nomo>
            SetItem ( 12 )
            SetItem ( 14 )
            SetItem ( 19 )
          </nomo>
          <listens>
            <listen>
              <chan>
                x
              </chan>
              <vars>
                a2 , b2 , e2
              </vars>
              <num>
                3
              </num>
              <lid>
                3
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                y
              </chan>
              <vars>
                c2
              </vars>
              <num>
                1
              </num>
              <lid>
                4
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                z
              </chan>
              <vars>
                d2
              </vars>
              <num>
                1
              </num>
              <lid>
                5
              </lid>
              <msid>
                ""
              </msid>
            </listen>
          </listens>
        </rec>
      </receives>
    </tuplespace>
    <reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <rid>
        .
      </rid>
      <rnum>
        .
      </rnum>
      <react>
        .
      </react>
      <reat>
        .
      </reat>
    </reaction>
  </T>
#Or
  Result ==K <T>
    <threads>
      <thread>
        <k>
          [ 1 , 1 , "b" , false , 1 ]
        </k>
      </thread> <thread>
        <k>
          [ 2 , 2 , "a" , true , 2 ]
        </k>
      </thread>
    </threads>
    <tuplespace>
      <sends>
        .SendCellBag
      </sends>
      <receives>
        <rec>
          <id>
            1
          </id>
          <length>
            3
          </length>
          <cont>
            [ * a2 , * b2 , * c2 , * d2 , * e2 ]
          </cont>
          <state>
            ""
          </state>
          <match>
            0
          </match>
          <type>
            1
          </type>
          <nomo>
            .Set
          </nomo>
          <listens>
            <listen>
              <chan>
                x
              </chan>
              <vars>
                a2 , b2 , e2
              </vars>
              <num>
                3
              </num>
              <lid>
                3
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                y
              </chan>
              <vars>
                c2
              </vars>
              <num>
                1
              </num>
              <lid>
                4
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                z
              </chan>
              <vars>
                d2
              </vars>
              <num>
                1
              </num>
              <lid>
                5
              </lid>
              <msid>
                ""
              </msid>
            </listen>
          </listens>
        </rec> <rec>
          <id>
            6
          </id>
          <length>
            3
          </length>
          <cont>
            ( * a1 , * b1 , * c1 , * d1 , * e1 )
          </cont>
          <state>
            ""
          </state>
          <match>
            0
          </match>
          <type>
            0
          </type>
          <nomo>
            SetItem ( 11 )
            SetItem ( 12 )
            SetItem ( 13 )
            SetItem ( 14 )
            SetItem ( 15 )
            SetItem ( 19 )
          </nomo>
          <listens>
            <listen>
              <chan>
                x
              </chan>
              <vars>
                a1 , b1 , e1
              </vars>
              <num>
                3
              </num>
              <lid>
                7
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                y
              </chan>
              <vars>
                c1
              </vars>
              <num>
                1
              </num>
              <lid>
                9
              </lid>
              <msid>
                ""
              </msid>
            </listen> <listen>
              <chan>
                z
              </chan>
              <vars>
                d1
              </vars>
              <num>
                1
              </num>
              <lid>
                10
              </lid>
              <msid>
                ""
              </msid>
            </listen>
          </listens>
        </rec>
      </receives>
    </tuplespace>
    <reaction>
      <who>
        .
      </who>
      <what>
        .
      </what>
      <where>
        .
      </where>
      <rid>
        .
      </rid>
      <rnum>
        .
      </rnum>
      <react>
        .
      </react>
      <reat>
        .
      </reat>
    </reaction>
  </T>
*/