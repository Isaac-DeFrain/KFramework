[topCellInitializer{}(LblinitGeneratedTopCell{}())]

module BASIC-K
  sort SortK{} []
  sort SortKItem{} []
endmodule []

module KSEQ
  import BASIC-K []

  symbol kseq{}(SortKItem{}, SortK{}) : SortK{} []
  symbol append{}(SortK{}, SortK{}) : SortK{} [function{}()]
  symbol dotk{}() : SortK{} []

  axiom{R}
    \equals{SortK{},R}(
      append{}(dotk{}(),K2:SortK{}),
      K2:SortK{})
  []

  axiom{R}
    \equals{SortK{},R}(
      append{}(kseq{}(K1:SortKItem{},K2:SortK{}),K3:SortK{}),
      kseq{}(K1:SortKItem{},append{}(K2:SortK{},K3:SortK{})))
  []

endmodule []

module INJ
  symbol inj{From,To}(From) : To [sortInjection{}()]
 
  axiom{S1,S2,S3,R} 
    \equals{S3,R}(
      inj{S2,S3}(inj{S1,S2}(T:S1)),
      inj{S1,S3}(T:S1))
  []

endmodule []

module K
  import KSEQ []
  import INJ []
endmodule []

module RHO

// imports
  import K []

// sorts
  sort SortRecCellFragment{} []
  hooked-sort SortSendCellBag{} [hook{}("BAG.Bag")]
  hooked-sort SortList{} [hook{}("LIST.List"), unit{}(Lbl'Stop'List{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(206,3,206,31)"), concat{}(Lbl'Unds'List'Unds'{}()), element{}(LblListItem{}())]
  sort SortTuplespaceCellFragment{} []
  sort SortSchanCellOpt{} []
  sort SortSchanCell{} []
  sort SortRecsCellOpt{} []
  sort SortSendsCell{} []
  sort SortTCellOpt{} []
  sort SortTCellFragment{} []
  sort SortKVariable{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,3,7,18)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/substitution.k)")]
  sort SortThreadCellFragment{} []
  sort SortRchanCellOpt{} []
  hooked-sort SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(497,3,497,37)"), hook{}("STRING.String")]
  sort SortKConfigVar{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/kast.k)"), token{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,3,12,27)")]
  sort SortTCell{} []
  sort SortTuplespaceCell{} []
  sort SortSendCellFragment{} []
  sort SortProc{} []
  sort SortGeneratedCounterCellOpt{} []
  sort SortMsgCell{} []
  sort SortGeneratedCounterCell{} []
  sort SortId{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(733,3,733,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), token{}()]
  sort SortStream{} []
  sort SortCell{} []
  hooked-sort SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(280,3,280,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), hook{}("BOOL.Bool")]
  sort SortKCell{} []
  sort SortSendsCellOpt{} []
  sort SortContCellOpt{} []
  sort SortThreadCell{} []
  hooked-sort SortThreadCellBag{} [hook{}("BAG.Bag")]
  sort SortBindCell{} []
  hooked-sort SortMap{} [hook{}("MAP.Map"), unit{}(Lbl'Stop'Map{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(96,3,96,28)"), concat{}(Lbl'Unds'Map'Unds'{}()), element{}(Lbl'UndsPipe'-'-GT-Unds'{}())]
  sort SortName{} []
  sort SortKCellOpt{} []
  sort SortRecsCell{} []
  hooked-sort SortRecCellBag{} [hook{}("BAG.Bag")]
  sort SortRecCell{} []
  hooked-sort SortInt{} [hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(337,3,337,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)")]
  sort SortBindCellOpt{} []
  hooked-sort SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(419,3,419,34)"), hook{}("FLOAT.Float"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)")]
  sort SortRchanCell{} []
  sort SortMsgCellOpt{} []
  sort SortActivityCellOpt{} []
  sort SortGeneratedTopCell{} []
  sort SortContCell{} []
  sort SortTuplespaceCellOpt{} []
  sort SortActivityCell{} []
  hooked-sort SortSet{} [hook{}("SET.Set"), unit{}(Lbl'Stop'Set{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(162,3,162,28)"), concat{}(Lbl'Unds'Set'Unds'{}()), element{}(LblSetItem{}())]
  sort SortRecsCellFragment{} []
  sort SortSendCell{} []
  sort SortSendsCellFragment{} []
  sort SortGeneratedTopCellFragment{} []
  sort SortIOError{} []
  sort SortActivityCellFragment{} []

// symbols
  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortIOError{} [productionID{}("26970580"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(808,44,808,63)"), klabel{}("#unknownIOError"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Stop'Set{}() : SortSet{} [function{}(), hook{}("SET.unit"), productionID{}("504582810"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(170,18,170,122)"), klabel{}(".Set"), functional{}(), latex{}("\\dotCt{Set}")]
  symbol Lbl'-LT-'sends'-GT-'-fragment{}(SortSendCellBag{}) : SortSendsCellFragment{} [cellFragment{}("SendsCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.bitRange"), productionID{}("1991278377"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(381,18,381,108)"), klabel{}("bitRangeInt")]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortString{} [function{}(), hook{}("KREFLECTION.sort"), productionID{}("394785440"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(780,21,780,63)"), klabel{}("#sort")]
  hooked-symbol LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(SortString{}) : SortId{} [function{}(), hook{}("STRING.string2token"), productionID{}("993370665"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(736,17,736,84)"), klabel{}("String2Id"), functional{}()]
  symbol Lbl'Hash'EBADF'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("605420629"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(812,22,812,29)"), functional{}(), constructor{}()]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [function{}(), hook{}("MAP.keys_list"), productionID{}("1107985860"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(141,19,141,79)")]
  symbol Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1595938139"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(843,22,843,30)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1044705957"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(876,22,876,33)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.ge"), smtlib{}(">="), productionID{}("400103862"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(401,19,401,149)"), functional{}(), latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.eq"), productionID{}("1680503330"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(509,19,509,88)"), functional{}()]
  hooked-symbol Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.xor"), productionID{}("1309335839"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(373,18,373,146)"), functional{}(), latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("542980314"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(827,22,827,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Hash'parse'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortKItem{} [function{}(), hook{}("IO.parse"), impure{}(), productionID{}("970419381"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(896,20,896,80)"), klabel{}("#parse")]
  symbol Lbl'-LT-'sends'-GT-'{}(SortSendCellBag{}) : SortSendsCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("sends"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("teal"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1330400026"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(862,22,862,35)"), functional{}(), constructor{}()]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), productionID{}("573200870"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(405,19,405,52)")]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortInt{} [function{}(), hook{}("MAP.size"), productionID{}("478489615"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(149,18,149,103)"), klabel{}("sizeMap"), functional{}()]
  symbol LblnoContCell{}() : SortContCellOpt{} [cellOptAbsent{}("ContCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.ne"), smtlib{}("distinct"), productionID{}("2103569237"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(404,19,404,160)"), functional{}(), latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'EOF'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("884603232"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(808,22,808,27)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("596706728"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(845,22,845,29)"), functional{}(), constructor{}()]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [function{}(), hook{}("STRING.countAllOccurrences"), productionID{}("613784740"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(533,18,533,132)"), functional{}()]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [function{}(), hook{}("STRING.chr"), productionID{}("566113173"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(512,21,512,69)"), klabel{}("chrChar")]
  symbol Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1067599825"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(860,22,860,37)"), functional{}(), constructor{}()]
  symbol LblisRchanCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("RchanCell"), originalPrd{}()]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortFloat{} [function{}(), hook{}("STRING.string2float"), productionID{}("324169305"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(523,21,523,93)"), klabel{}("String2Float")]
  symbol Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(SortName{}, SortProc{}) : SortProc{} [productionID{}("1126185196"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,19,19,65)"), klabel{}("Send"), functional{}(), constructor{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortKItem{} [function{}(), hook{}("MAP.choice"), productionID{}("1570358965"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(155,20,155,100)"), klabel{}("Map:choice")]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("INT.rand"), productionID{}("1277933280"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(414,18,414,56)"), klabel{}("randInt")]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'LIST'UndsUnds'List'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.update"), productionID{}("1975873209"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(251,19,251,93)"), klabel{}("List:set")]
  symbol LblisBindCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("BindCellOpt"), originalPrd{}()]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [function{}(), hook{}("STRING.replaceFirst"), productionID{}("1930240356"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(532,21,532,124)"), functional{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.le"), smtlib{}("<="), productionID{}("929697158"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(399,19,399,149)"), functional{}(), latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}")]
  symbol LblisActivityCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("ActivityCellFragment"), originalPrd{}()]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [function{}(), hook{}("KEQUAL.eq"), smtlib{}("="), productionID{}("1042306518"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(759,21,759,156)"), equalEqualK{}(), klabel{}("_==K_"), functional{}(), latex{}("{#1}\\mathrel{=_K}{#2}")]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("INT.log2"), productionID{}("164332069"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(379,18,379,74)"), klabel{}("log2Int")]
  symbol Lbl'Hash'EACCES'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("817299424"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(810,22,810,30)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("932257672"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(853,22,853,35)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'UndsUnds'KItem'Unds'List{}(SortKItem{}, SortList{}) : SortBool{} [function{}(), hook{}("LIST.in"), productionID{}("1578587450"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(263,19,263,101)"), klabel{}("_inList_"), functional{}()]
  symbol Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2031951755"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(811,22,811,30)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'thread'-GT-'{}(SortKCell{}) : SortThreadCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), multiplicity{}("*"), cellName{}("thread"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol LblisTCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellOpt"), originalPrd{}()]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.lt"), productionID{}("1552341957"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(539,19,539,82)"), functional{}()]
  symbol Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("749927456"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(861,22,861,32)"), functional{}(), constructor{}()]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [function{}(), hook{}("STRING.ord"), productionID{}("1330247343"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(513,18,513,69)"), klabel{}("ordChar")]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCellOpt"), originalPrd{}()]
  hooked-symbol LblupdateList'LParUndsCommUndsCommUndsRParUnds'LIST'UndsUnds'List'Unds'Int'Unds'List{}(SortList{}, SortInt{}, SortList{}) : SortList{} [function{}(), hook{}("LIST.updateAll"), productionID{}("768192757"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(255,19,255,78)"), klabel{}("updateList")]
  symbol Lbl'-LT-'recs'-GT-'-fragment{}(SortRecCellBag{}) : SortRecsCellFragment{} [cellFragment{}("RecsCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1336001042"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(867,22,867,31)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1789452565"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(840,22,840,29)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1594873248"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(864,22,864,36)"), functional{}(), constructor{}()]
  symbol LblnoRchanCell{}() : SortRchanCellOpt{} [cellOptAbsent{}("RchanCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1923999715"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(844,22,844,29)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Hash'isVariable'LParUndsRParUnds'K-REFLECTION-SYMBOLIC'UndsUnds'K{}(SortK{}) : SortBool{} [function{}(), hook{}("KREFLECTION.isVariable"), productionID{}("457247584"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(801,19,801,73)"), klabel{}("#isVariable")]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'{}() : SortK{} [function{}(), hook{}("KREFLECTION.configuration"), impure{}(), productionID{}("1926673338"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(779,16,779,83)")]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'{}() : SortList{} [function{}(), hook{}("KREFLECTION.argv"), productionID{}("2030411960"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(788,19,788,60)"), klabel{}("#argv")]
  symbol Lbl'-LT-'msg'-GT-'{}(SortK{}) : SortMsgCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("msg"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsPlus'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.add"), smtlib{}("+"), productionID{}("375466577"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,18,365,176)"), klabel{}("_+Int_"), functional{}(), latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}")]
  symbol LblnoMsgCell{}() : SortMsgCellOpt{} [cellOptAbsent{}("MsgCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2133344792"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(856,22,856,34)"), functional{}(), constructor{}()]
  symbol LblisBool{}(SortK{}) : SortBool{} [function{}(), predicate{}("Bool"), originalPrd{}()]
  symbol LblinitActivityCell{}(SortMap{}) : SortActivityCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lblproject'Coln'Proc{}(SortK{}) : SortProc{} [function{}(), projection{}(), originalPrd{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [function{}(), hook{}("IO.seek"), impure{}(), productionID{}("2050462663"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(885,16,885,76)")]
  symbol LblinitSendsCell{}() : SortSendsCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.and"), productionID{}("405896924"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(371,18,371,142)"), functional{}(), latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("412925308"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(833,22,833,30)"), functional{}(), constructor{}()]
  symbol LblisSchanCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("SchanCell"), originalPrd{}()]
  hooked-symbol LblThreadCellBagItem{}(SortThreadCell{}) : SortThreadCellBag{} [hook{}("BAG.element"), function{}(), originalPrd{}()]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [function{}(), hook{}("STRING.concat"), productionID{}("823914581"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(507,21,507,139)"), functional{}(), latex{}("{#1}+_{\\scriptstyle\\it String}{#2}")]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortKItem{}, SortKItem{}) : SortMap{} [function{}(), hook{}("MAP.element"), productionID{}("299413131"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(111,18,111,144)"), klabel{}("_|->_"), functional{}(), latex{}("{#1}\\mapsto{#2}")]
  hooked-symbol LblfillList'LParUndsCommUndsCommUndsCommUndsRParUnds'LIST'UndsUnds'List'Unds'Int'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.fill"), productionID{}("1697752980"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(257,19,257,77)"), klabel{}("fillList")]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [function{}(), hook{}("IO.seekEnd"), impure{}(), productionID{}("1119072377"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(886,16,886,82)")]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.le"), productionID{}("1176164144"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(540,19,540,82)"), functional{}()]
  symbol LblisTCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCell"), originalPrd{}()]
  symbol Lbl'-LT-'rec'-GT-'-fragment{}(SortRchanCellOpt{}, SortBindCellOpt{}, SortContCellOpt{}) : SortRecCellFragment{} [cellFragment{}("RecCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'-fragment{}(SortTCellOpt{}, SortGeneratedCounterCellOpt{}) : SortGeneratedTopCellFragment{} [cellFragment{}("GeneratedTopCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'KItem'Unds'KItem{}(SortMap{}, SortKItem{}, SortKItem{}) : SortMap{} [function{}(), hook{}("MAP.update"), productionID{}("728943498"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(122,18,122,104)"), functional{}(), prefer{}()]
  symbol LblnoSchanCell{}() : SortSchanCellOpt{} [cellOptAbsent{}("SchanCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'RecCellBag'Unds'{}(SortRecCellBag{}, SortRecCellBag{}) : SortRecCellBag{} [function{}(), hook{}("BAG.concat"), wrapElement{}("<rec>"), comm{}(), originalPrd{}(), unit{}(".RecCellBag"), bag{}(), assoc{}(), element{}("RecCellBagItem"), cellCollection{}(), avoid{}()]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'{}() : SortInt{} [function{}(), productionID{}("1384210339"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(905,19,905,50)"), functional{}()]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [function{}(), hook{}("IO.write"), impure{}(), productionID{}("1305935114"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(888,16,888,81)")]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortK{} [function{}(), hook{}("INT.srand"), productionID{}("1046665075"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(415,16,415,56)"), klabel{}("srandInt")]
  symbol Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("38544126"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(815,22,815,31)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("892335322"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(872,22,872,36)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.or"), smtlib{}("or"), productionID{}("1267149311"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(292,19,292,156)"), boolOperation{}(), functional{}(), latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}")]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [function{}(), hook{}("MAP.values"), productionID{}("1652764753"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(146,19,146,76)"), klabel{}("values")]
  symbol Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2073640037"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(852,22,852,34)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1319483139"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(858,22,858,36)"), functional{}(), constructor{}()]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortKItem{} [function{}(), hook{}("KREFLECTION.getKLabel"), productionID{}("372469954"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(782,20,782,72)"), klabel{}("getKLabel")]
  symbol LblisThreadCellBag{}(SortK{}) : SortBool{} [function{}(), predicate{}("ThreadCellBag"), originalPrd{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortKItem{}) : SortMap{} [function{}(), hook{}("MAP.remove"), productionID{}("2139788441"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(125,18,125,121)"), klabel{}("_[_<-undef]"), functional{}()]
  symbol LblinitBindCell{}() : SortBindCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.andThen"), smtlib{}("and"), productionID{}("2107577743"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,19,290,118)"), boolOperation{}(), functional{}()]
  symbol LblinitContCell{}() : SortContCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol LblSetItem{}(SortKItem{}) : SortSet{} [function{}(), hook{}("SET.element"), productionID{}("516537656"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(175,18,175,112)"), klabel{}("SetItem"), functional{}()]
  hooked-symbol LblmakeList'LParUndsCommUndsRParUnds'LIST'UndsUnds'Int'Unds'KItem{}(SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.make"), productionID{}("79438382"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(253,19,253,66)"), klabel{}("makeList")]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortString{} [function{}(), hook{}("KREFLECTION.getenv"), impure{}(), productionID{}("1371495133"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(784,21,784,80)"), klabel{}("#getenv")]
  hooked-symbol Lbl'Hash'getKLabelString'LParUndsRParUnds'K-REFLECTION-SYMBOLIC'UndsUnds'K{}(SortK{}) : SortString{} [function{}(), hook{}("KREFLECTION.getKLabelString"), productionID{}("1371376476"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(797,21,797,85)"), klabel{}("#getKLabelString")]
  symbol LblnoTuplespaceCell{}() : SortTuplespaceCellOpt{} [cellOptAbsent{}("TuplespaceCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("570794077"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(838,22,838,29)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [function{}(), hook{}("MAP.concat"), comm{}(), productionID{}("551016187"), format{}("%1%n%2"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,18,104,172)"), unit{}(".Map"), klabel{}("_Map_"), assoc{}(), element{}("_|->_"), index{}("0")]
  symbol LblisActivityCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("ActivityCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1070501849"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(846,22,846,35)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [function{}(), hook{}("LIST.concat"), smtlib{}("smt_seq_concat"), productionID{}("429353573"), format{}("%1%n%2"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(239,19,239,192)"), unit{}(".List"), klabel{}("_List_"), functional{}(), assoc{}(), element{}("ListItem")]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [function{}(), hook{}("STRING.int2string"), productionID{}("391135083"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(525,21,525,103)"), klabel{}("Int2String"), functional{}()]
  symbol Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1270836494"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(809,22,809,29)"), functional{}(), constructor{}()]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [function{}(), hook{}("STRING.findChar"), productionID{}("1148255190"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(518,18,518,89)"), klabel{}("findChar")]
  symbol Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1916700921"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(863,22,863,33)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EPERM'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1928301845"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(839,22,839,29)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'activity'-GT-'{}(SortThreadCellBag{}) : SortActivityCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("activity"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("red"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.ediv"), smtlib{}("div"), productionID{}("36657658"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(362,18,362,93)")]
  symbol Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2079565272"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(834,22,834,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUndsUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.powmod"), smtlib{}("(mod (^ #1 #2) #3)"), productionID{}("177140066"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(354,18,354,110)")]
  hooked-symbol Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.eq"), smtlib{}("="), productionID{}("873634936"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(403,19,403,167)"), klabel{}("_==Int_"), functional{}(), latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'-LT-'tuplespace'-GT-'-fragment{}(SortSendsCellOpt{}, SortRecsCellOpt{}) : SortTuplespaceCellFragment{} [cellFragment{}("TuplespaceCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.tmod"), smtlib{}("mod"), productionID{}("2144838275"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(360,18,360,144)"), latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [function{}(), hook{}("STRING.base2string"), productionID{}("1003292107"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(526,21,526,92)"), klabel{}("Base2String")]
  symbol Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2106900153"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(848,22,848,32)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("841262455"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(873,22,873,33)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1443055846"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(849,22,849,32)"), functional{}(), constructor{}()]
  symbol LblisGeneratedCounterCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedCounterCellOpt"), originalPrd{}()]
  hooked-symbol LblListItem{}(SortKItem{}) : SortList{} [function{}(), hook{}("LIST.element"), smtlib{}("smt_seq_elem"), productionID{}("1261198850"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(244,19,244,136)"), klabel{}("ListItem"), functional{}()]
  symbol Lbl'-LT-'tuplespace'-GT-'{}(SortSendsCell{}, SortRecsCell{}) : SortTuplespaceCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%n%3%d%n%4"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("tuplespace"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("blue"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'KItem'Unds'Map{}(SortKItem{}, SortMap{}) : SortBool{} [function{}(), hook{}("MAP.in_keys"), productionID{}("473524237"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(143,19,143,93)"), functional{}()]
  symbol LblnoTCell{}() : SortTCellOpt{} [cellOptAbsent{}("TCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol LblinitSendCell{}() : SortSendCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [function{}(), hook{}("STRING.replaceAll"), productionID{}("914374969"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(530,21,530,122)"), functional{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.ne"), productionID{}("271095942"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(535,19,535,94)"), functional{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortInt{} [function{}(), hook{}("SET.size"), productionID{}("153646652"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(190,18,190,80)"), klabel{}("size"), functional{}()]
  symbol LblnoActivityCell{}() : SortActivityCellOpt{} [cellOptAbsent{}("ActivityCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol LblisContCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("ContCell"), originalPrd{}()]
  symbol LblisRecCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecCellFragment"), originalPrd{}()]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [function{}(), hook{}("IO.system"), impure{}(), productionID{}("1275143523"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(917,20,917,73)"), klabel{}("#system")]
  symbol LblisMsgCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("MsgCell"), originalPrd{}()]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("INT.abs"), smtlib{}("int_abs"), productionID{}("1095352419"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(378,18,378,102)"), klabel{}("absInt"), functional{}()]
  symbol LblisRchanCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("RchanCellOpt"), originalPrd{}()]
  symbol Lbl'-LT-'activity'-GT-'-fragment{}(SortThreadCellBag{}) : SortActivityCellFragment{} [cellFragment{}("ActivityCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EDOM'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("154173878"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(816,22,816,28)"), functional{}(), constructor{}()]
  symbol LblisSendCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendCell"), originalPrd{}()]
  symbol Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1230955136"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(866,22,866,31)"), functional{}(), constructor{}()]
  symbol LblinitRchanCell{}() : SortRchanCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol LblisK{}(SortK{}) : SortBool{} [function{}(), predicate{}("K"), originalPrd{}()]
  symbol LblinitRecCell{}() : SortRecCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("IO.tell"), impure{}(), productionID{}("1601687801"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(880,18,880,70)")]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [function{}(), hook{}("STRING.category"), productionID{}("1885922916"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(544,21,544,80)"), klabel{}("categoryChar")]
  symbol Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1318227903"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(871,22,871,33)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Stop'List{}() : SortList{} [function{}(), hook{}("LIST.unit"), smtlib{}("smt_seq_nil"), productionID{}("169833205"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(241,19,241,146)"), klabel{}(".List"), functional{}(), latex{}("\\dotCt{List}")]
  symbol LblisTuplespaceCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TuplespaceCell"), originalPrd{}()]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [function{}(), hook{}("STRING.replace"), productionID{}("549293029"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(531,21,531,107)")]
  hooked-symbol Lbl'Stop'RecCellBag{}() : SortRecCellBag{} [hook{}("BAG.unit"), function{}(), originalPrd{}()]
  symbol Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("258112787"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(870,22,870,36)"), functional{}(), constructor{}()]
  symbol LblisMap{}(SortK{}) : SortBool{} [function{}(), predicate{}("Map"), originalPrd{}()]
  symbol Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("502838712"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(850,22,850,36)"), functional{}(), constructor{}()]
  symbol LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), productionID{}("1819940427"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), freshGenerator{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(411,18,411,72)"), klabel{}("freshInt"), functional{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'{}(SortTCell{}, SortGeneratedCounterCell{}) : SortGeneratedTopCell{} [topcell{}(), format{}("%1%i%n%2%n%3%d%n%4"), originalPrd{}(), cellName{}("generatedTop"), cell{}(), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1153302647"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(837,22,837,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Hash'opendir'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [function{}(), hook{}("IO.opendir"), impure{}(), productionID{}("1486726131"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(894,20,894,81)")]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellFragment"), originalPrd{}()]
  symbol LblinitMsgCell{}() : SortMsgCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1692885405"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(865,22,865,34)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("INT.not"), productionID{}("1753714541"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(351,18,351,133)"), functional{}(), latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}")]
  symbol LblisRecsCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecsCellOpt"), originalPrd{}()]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(SortBool{}, SortS0, SortS0) : SortS0 [function{}(), hook{}("KEQUAL.ite"), smtlib{}("ite"), productionID{}("672746064"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(767,16,767,122)"), poly{}("0, 2, 3"), functional{}()]
  symbol Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("648936749"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(824,22,824,30)"), functional{}(), constructor{}()]
  symbol LblisThreadCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("ThreadCellFragment"), originalPrd{}()]
  symbol LblisName{}(SortK{}) : SortBool{} [function{}(), predicate{}("Name"), originalPrd{}()]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.gt"), productionID{}("1323434987"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(541,19,541,82)"), functional{}()]
  symbol Lbl'Hash'EIO'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("736920911"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(822,22,822,27)"), functional{}(), constructor{}()]
  hooked-symbol LblnewUUID'Unds'STRING'Unds'{}() : SortString{} [function{}(), hook{}("STRING.uuid"), impure{}(), productionID{}("1048098469"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(547,21,547,67)")]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [function{}(), hook{}("STRING.rfind"), productionID{}("1150058854"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(517,18,517,86)"), klabel{}("rfindString")]
  symbol LblisGeneratedCounterCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedCounterCell"), originalPrd{}()]
  symbol LblisProc{}(SortK{}) : SortBool{} [function{}(), predicate{}("Proc"), originalPrd{}()]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(SortFloat{}) : SortString{} [function{}(), hook{}("STRING.float2string"), productionID{}("1889057031"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(521,21,521,105)"), klabel{}("Float2String"), functional{}()]
  symbol LblisId{}(SortK{}) : SortBool{} [function{}(), predicate{}("Id"), originalPrd{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [function{}(), hook{}("STRING.string2int"), productionID{}("573958827"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(524,21,524,91)"), klabel{}("String2Int")]
  symbol LblisKVariable{}(SortK{}) : SortBool{} [function{}(), predicate{}("KVariable"), originalPrd{}()]
  symbol Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1865516976"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,22,830,31)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.shl"), productionID{}("127791068"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(369,18,369,131)"), latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.ne"), smtlib{}("distinct"), productionID{}("1242027525"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(297,19,297,103)"), functional{}()]
  hooked-symbol Lbl'UndsLSqBUndsRSqBUnds'SUBSTITUTION'UndsUnds'K'Unds'Map{SortS0}(SortS0, SortMap{}) : SortS0 [function{}(), hook{}("SUBSTITUTION.substMany"), impure{}(), productionID{}("878668275"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/substitution.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(10,16,10,94)"), poly{}("0, 1")]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.signExtendBitRange"), productionID{}("951031848"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(382,18,382,118)"), klabel{}("signExtendBitRangeInt")]
  symbol LblisSchanCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("SchanCellOpt"), originalPrd{}()]
  symbol Lbl'-LT-'schan'-GT-'{}(SortK{}) : SortSchanCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("schan"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol LblisTuplespaceCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("TuplespaceCellOpt"), originalPrd{}()]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1081769770"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(857,22,857,36)"), functional{}(), constructor{}()]
  symbol LblisSet{}(SortK{}) : SortBool{} [function{}(), predicate{}("Set"), originalPrd{}()]
  symbol Lbl'-LT-'recs'-GT-'{}(SortRecCellBag{}) : SortRecsCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("recs"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("green"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol LblisTuplespaceCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("TuplespaceCellFragment"), originalPrd{}()]
  symbol Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("823575379"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(869,22,869,33)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'thread'-GT-'-fragment{}(SortKCellOpt{}) : SortThreadCellFragment{} [cellFragment{}("ThreadCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [function{}(), hook{}("IO.read"), impure{}(), productionID{}("144040807"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(882,21,882,84)")]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [function{}(), hook{}("STRING.length"), productionID{}("2100440237"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(511,18,511,84)"), klabel{}("lengthString"), functional{}()]
  symbol LblinitRecsCell{}() : SortRecsCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol LblisString{}(SortK{}) : SortBool{} [function{}(), predicate{}("String"), originalPrd{}()]
  hooked-symbol Lbl'UndsLSqBUndsSlshUndsRSqBUnds'SUBSTITUTION'UndsUnds'K'Unds'K'Unds'K{SortS0}(SortS0, SortK{}, SortK{}) : SortS0 [function{}(), hook{}("SUBSTITUTION.substOne"), impure{}(), productionID{}("1165791284"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/substitution.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,16,9,93)"), poly{}("0, 1")]
  hooked-symbol LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(SortId{}) : SortString{} [function{}(), hook{}("STRING.token2string"), productionID{}("1880078449"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(735,21,735,89)"), klabel{}("Id2String"), functional{}()]
  hooked-symbol Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.xor"), smtlib{}("xor"), productionID{}("1173346575"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(291,19,291,114)"), boolOperation{}(), functional{}()]
  symbol Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("381708767"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(821,22,821,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'SendCellBag'Unds'{}(SortSendCellBag{}, SortSendCellBag{}) : SortSendCellBag{} [function{}(), hook{}("BAG.concat"), wrapElement{}("<send>"), comm{}(), originalPrd{}(), unit{}(".SendCellBag"), bag{}(), assoc{}(), element{}("SendCellBagItem"), cellCollection{}(), avoid{}()]
  hooked-symbol Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.emod"), smtlib{}("mod"), productionID{}("2029680286"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(363,18,363,93)")]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [function{}(), hook{}("MAP.difference"), productionID{}("1564698139"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(129,18,129,120)"), functional{}(), latex{}("{#1}-_{\\it Map}{#2}")]
  symbol LblisBindCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("BindCell"), originalPrd{}()]
  symbol LblisInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Int"), originalPrd{}()]
  symbol LblinitGeneratedTopCell{}(SortMap{}) : SortGeneratedTopCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'-LT-'send'-GT-'-fragment{}(SortSchanCellOpt{}, SortMsgCellOpt{}) : SortSendCellFragment{} [cellFragment{}("SendCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [function{}(), hook{}("STRING.substr"), productionID{}("2017797638"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(515,21,515,99)"), klabel{}("substrString"), functional{}()]
  symbol LblisStream{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stream"), originalPrd{}()]
  symbol Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("859236022"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(825,22,825,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.or"), productionID{}("596470015"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(375,18,375,140)"), functional{}(), latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'{}() : SortInt{} [function{}(), productionID{}("1345401730"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(906,19,906,50)"), functional{}()]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [function{}(), hook{}("MAP.updateAll"), productionID{}("304715920"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(134,18,134,91)"), klabel{}("updateMap"), functional{}()]
  symbol LblisCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("Cell"), originalPrd{}()]
  hooked-symbol Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.orElse"), smtlib{}("or"), productionID{}("102174918"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(293,19,293,116)"), boolOperation{}(), functional{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortKItem{} [function{}(), hook{}("SET.choice"), productionID{}("237344028"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(193,20,193,94)"), klabel{}("Set:choice")]
  symbol LblisGeneratedTopCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedTopCell"), originalPrd{}()]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [function{}(), hook{}("IO.getc"), impure{}(), productionID{}("1178587240"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(881,18,881,82)")]
  symbol Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("837659261"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(823,22,823,30)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [productionID{}("346359559"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(918,20,918,110)"), functional{}(), constructor{}()]
  symbol LblinitGeneratedCounterCell{}() : SortGeneratedCounterCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("412111214"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(819,22,819,29)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1856158867"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(868,22,868,32)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'generatedCounter'-GT-'{}(SortInt{}) : SortGeneratedCounterCell{} [format{}("%1%i%n%2%d%n%3"), originalPrd{}(), cellName{}("generatedCounter"), cell{}(), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1766911337"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(828,22,828,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Stop'ThreadCellBag{}() : SortThreadCellBag{} [hook{}("BAG.unit"), function{}(), originalPrd{}()]
  hooked-symbol Lbl'Hash'lstat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [function{}(), hook{}("IO.lstat"), impure{}(), productionID{}("483797427"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(893,20,893,77)")]
  symbol LblisRecCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecCell"), originalPrd{}()]
  symbol LblisRecsCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecsCell"), originalPrd{}()]
  symbol Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("215082566"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(817,22,817,30)"), functional{}(), constructor{}()]
  symbol LblisContCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("ContCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(SortK{}) : SortStream{} [productionID{}("481511146"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(912,21,912,30)"), klabel{}("#buffer"), functional{}(), constructor{}()]
  symbol LblnoSendsCell{}() : SortSendsCellOpt{} [cellOptAbsent{}("SendsCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1955021259"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(875,22,875,29)"), functional{}(), constructor{}()]
  symbol LblnoBindCell{}() : SortBindCellOpt{} [cellOptAbsent{}("BindCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'ThreadCellBag'Unds'{}(SortThreadCellBag{}, SortThreadCellBag{}) : SortThreadCellBag{} [function{}(), hook{}("BAG.concat"), wrapElement{}("<thread>"), comm{}(), originalPrd{}(), unit{}(".ThreadCellBag"), bag{}(), assoc{}(), element{}("ThreadCellBagItem"), cellCollection{}(), avoid{}()]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.not"), smtlib{}("not"), productionID{}("718571091"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(288,19,288,174)"), klabel{}("notBool_"), boolOperation{}(), functional{}(), latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}")]
  hooked-symbol Lbl'Hash'isConcrete'LParUndsRParUnds'K-REFLECTION-SYMBOLIC'UndsUnds'K{}(SortK{}) : SortBool{} [function{}(), hook{}("KREFLECTION.isConcrete"), productionID{}("2068897588"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(800,19,800,73)"), klabel{}("#isConcrete")]
  symbol LblnoGeneratedCounterCell{}() : SortGeneratedCounterCellOpt{} [cellOptAbsent{}("GeneratedCounterCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortSet{} [function{}(), hook{}("MAP.keys"), productionID{}("79644918"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(140,18,140,86)"), klabel{}("keys"), functional{}()]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [function{}(), hook{}("LIST.range"), productionID{}("996125997"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(260,19,260,98)"), klabel{}("List:range")]
  hooked-symbol LblSendCellBagItem{}(SortSendCell{}) : SortSendCellBag{} [hook{}("BAG.element"), function{}(), originalPrd{}()]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [function{}(), hook{}("IO.unlock"), impure{}(), productionID{}("1414967210"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(890,16,890,80)")]
  symbol LblisActivityCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("ActivityCell"), originalPrd{}()]
  symbol Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("968113504"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(836,22,836,33)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortActivityCellOpt{}, SortTuplespaceCellOpt{}) : SortTCellFragment{} [cellFragment{}("TCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'-LT-'rec'-GT-'{}(SortRchanCell{}, SortBindCell{}, SortContCell{}) : SortRecCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%n%3%n%4%d%n%5"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), multiplicity{}("*"), cellName{}("rec"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("yellow"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.implies"), smtlib{}("=>"), productionID{}("52514534"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(294,19,294,117)"), boolOperation{}(), functional{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [function{}(), hook{}("MAP.inclusion"), productionID{}("171421438"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(152,19,152,91)"), functional{}()]
  symbol LblisSendsCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendsCellFragment"), originalPrd{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [function{}(), hook{}("STRING.ge"), productionID{}("442125849"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(542,19,542,82)"), functional{}()]
  symbol Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("775081157"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(874,22,874,36)"), functional{}(), constructor{}()]
  symbol Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(SortProc{}) : SortName{} [productionID{}("512456259"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,19,12,66)"), klabel{}("Quote"), functional{}(), constructor{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(SortList{}) : SortInt{} [function{}(), hook{}("LIST.size"), smtlib{}("smt_seq_len"), productionID{}("1052317717"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(266,18,266,121)"), klabel{}("sizeList"), functional{}()]
  hooked-symbol Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.shr"), productionID{}("746074699"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(368,18,368,131)"), latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'-LT-'T'-GT-'{}(SortActivityCell{}, SortTuplespaceCell{}) : SortTCell{} [topcell{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%n%3%d%n%4"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("T"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol Lbl'Hash'noparse'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1124162665"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(808,31,808,40)"), functional{}(), constructor{}()]
  symbol LblNil'Unds'RHO-SYNTAX'Unds'{}() : SortProc{} [productionID{}("1911155630"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,19,16,65)"), klabel{}("Stop"), functional{}(), constructor{}()]
  symbol LblisList{}(SortK{}) : SortBool{} [function{}(), predicate{}("List"), originalPrd{}()]
  symbol LblnoRecsCell{}() : SortRecsCellOpt{} [cellOptAbsent{}("RecsCell"), originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EINTR'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("362827515"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(820,22,820,29)"), functional{}(), constructor{}()]
  symbol LblisSendsCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendsCellOpt"), originalPrd{}()]
  hooked-symbol Lbl'Stop'SendCellBag{}() : SortSendCellBag{} [hook{}("BAG.unit"), function{}(), originalPrd{}()]
  hooked-symbol Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.mul"), smtlib{}("*"), productionID{}("787122337"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(356,18,356,155)"), functional{}(), latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("589311950"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(851,22,851,32)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1842853283"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(829,22,829,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.gt"), smtlib{}(">"), productionID{}("1408482749"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(402,19,402,145)"), functional{}(), latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [function{}(), hook{}("STRING.directionality"), productionID{}("1624972302"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(545,21,545,86)"), klabel{}("directionalityChar")]
  symbol Lbl'-LT-'cont'-GT-'{}(SortK{}) : SortContCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("cont"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.tdiv"), smtlib{}("div"), productionID{}("2059572982"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(359,18,359,146)"), latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [function{}(), hook{}("IO.lock"), impure{}(), productionID{}("196732636"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(889,16,889,76)")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [function{}(), hook{}("KEQUAL.ne"), smtlib{}("distinct"), productionID{}("1342346098"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,19,760,168)"), klabel{}("_=/=K_"), functional{}(), latex{}("{#1}\\mathrel{\\neq_K}{#2}"), notEqualEqualK{}()]
  hooked-symbol LblRecCellBagItem{}(SortRecCell{}) : SortRecCellBag{} [hook{}("BAG.element"), function{}(), originalPrd{}()]
  symbol LblisMsgCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("MsgCellOpt"), originalPrd{}()]
  hooked-symbol Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortK{} [function{}(), hook{}("IO.log"), impure{}(), productionID{}("1297189682"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(920,16,920,99)"), klabel{}("#logToFile"), functional{}(), returnsUnit{}()]
  symbol LblinitSchanCell{}() : SortSchanCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [function{}(), hook{}("STRING.rfindChar"), productionID{}("366252104"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(519,18,519,90)"), klabel{}("rfindChar")]
  hooked-symbol Lbl'Stop'Map{}() : SortMap{} [function{}(), hook{}("MAP.unit"), productionID{}("1324843695"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(106,18,106,128)"), klabel{}(".Map"), functional{}(), latex{}("\\dotCt{Map}")]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.min"), smtlib{}("int_min"), productionID{}("1267105885"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(376,18,376,102)"), functional{}()]
  symbol LblisThreadCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("ThreadCell"), originalPrd{}()]
  symbol Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("644082020"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(831,22,831,30)"), functional{}(), constructor{}()]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), hook{}("SET.intersection"), productionID{}("1160649162"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(178,18,178,88)"), klabel{}("intersectSet"), functional{}()]
  symbol Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2074658615"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(818,22,818,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), hook{}("INT.lt"), smtlib{}("<"), productionID{}("1650813924"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(400,19,400,145)"), functional{}(), latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortKItem{} [function{}(), hook{}("LIST.get"), productionID{}("1470358122"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(249,20,249,98)"), klabel{}("List:get")]
  symbol LblisKItem{}(SortK{}) : SortBool{} [function{}(), predicate{}("KItem"), originalPrd{}()]
  symbol Lbl'-LT-'rchan'-GT-'{}(SortK{}) : SortRchanCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("rchan"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), hook{}("SET.difference"), productionID{}("1796047085"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(181,18,181,146)"), klabel{}("Set:difference"), functional{}(), latex{}("{#1}-_{\\it Set}{#2}")]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [function{}(), hook{}("STRING.find"), productionID{}("343812839"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(516,18,516,85)"), klabel{}("findString")]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortInt{} [function{}(), productionID{}("693958407"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(878,18,878,50)")]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [function{}(), hook{}("SET.inclusion"), productionID{}("1023268896"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(187,19,187,85)"), functional{}()]
  symbol Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1579280783"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(841,22,841,30)"), functional{}(), constructor{}()]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [function{}(), hook{}("MAP.removeAll"), productionID{}("800735172"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(137,18,137,91)"), klabel{}("removeAll"), functional{}()]
  hooked-symbol Lbl'Hash'parseInModule'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortKItem{} [function{}(), hook{}("IO.parseInModule"), impure{}(), productionID{}("1241569743"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(897,20,900,76)"), klabel{}("#parseInModule")]
  symbol Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("351417028"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(813,22,813,29)"), functional{}(), constructor{}()]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [function{}(), predicate{}("KConfigVar"), originalPrd{}()]
  symbol LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortId{} [function{}(), productionID{}("159475521"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), freshGenerator{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(737,17,737,70)"), klabel{}("freshId"), functional{}()]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'{}() : SortInt{} [function{}(), productionID{}("1731656333"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(904,18,904,50)"), functional{}()]
  symbol LblisGeneratedTopCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedTopCellFragment"), originalPrd{}()]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortK{} [function{}(), hook{}("IO.close"), impure{}(), productionID{}("455501890"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(884,16,884,70)")]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.eq"), smtlib{}("="), productionID{}("943573036"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(296,19,296,96)"), functional{}()]
  symbol LblisSendsCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendsCell"), originalPrd{}()]
  symbol Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1620823990"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(847,22,847,35)"), functional{}(), constructor{}()]
  symbol LblinitThreadCell{}(SortMap{}) : SortThreadCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol LblisSendCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendCellFragment"), originalPrd{}()]
  symbol Lbl'-LT-'send'-GT-'{}(SortSchanCell{}, SortMsgCell{}) : SortSendCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%n%3%d%n%4"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), multiplicity{}("*"), cellName{}("send"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), color{}("cyan"), contentStartLine{}("38"), functional{}(), constructor{}()]
  symbol LblnoKCell{}() : SortKCellOpt{} [cellOptAbsent{}("KCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.sub"), smtlib{}("-"), productionID{}("1423983012"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(366,18,366,152)"), functional{}(), latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}")]
  symbol Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1219916644"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(832,22,832,30)"), functional{}(), constructor{}()]
  symbol LblisKCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCell"), originalPrd{}()]
  symbol LblinitTuplespaceCell{}() : SortTuplespaceCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1122130699"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(835,22,835,31)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("2084559714"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(826,22,826,36)"), functional{}(), constructor{}()]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.max"), smtlib{}("int_max"), productionID{}("1481818223"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(377,18,377,102)"), functional{}()]
  symbol LblisSendCellBag{}(SortK{}) : SortBool{} [function{}(), predicate{}("SendCellBag"), originalPrd{}()]
  symbol Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("44559647"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(859,22,859,34)"), functional{}(), constructor{}()]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), maincell{}(), cellName{}("k"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [function{}(), hook{}("IO.putc"), impure{}(), productionID{}("1696263571"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(887,16,887,81)")]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [function{}(), hook{}("BOOL.and"), smtlib{}("and"), productionID{}("1807015220"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(289,19,289,187)"), klabel{}("_andBool_"), boolOperation{}(), functional{}(), latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}")]
  hooked-symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), hook{}("SET.concat"), comm{}(), productionID{}("1164799006"), format{}("%1%n%2"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(168,18,168,176)"), unit{}(".Set"), klabel{}("_Set_"), functional{}(), assoc{}(), element{}("SetItem"), idem{}()]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortKItem{} [function{}(), hook{}("KREFLECTION.fresh"), impure{}(), productionID{}("2112233878"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(781,20,781,79)"), klabel{}("#fresh")]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [function{}(), hook{}("STRING.string2base"), productionID{}("997033037"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(527,21,527,92)"), klabel{}("String2Base")]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [function{}(), hook{}("STRING.floatFormat"), productionID{}("1346343363"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(522,21,522,113)"), klabel{}("FloatFormat")]
  symbol Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(SortProc{}, SortProc{}) : SortProc{} [productionID{}("916835004"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,19,18,69)"), klabel{}("Par"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsXor-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [function{}(), hook{}("INT.pow"), smtlib{}("^"), productionID{}("1095273238"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(353,18,353,151)"), latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}")]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortKItem{}) : SortKItem{} [function{}(), hook{}("MAP.lookup"), productionID{}("1201454821"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(117,20,117,112)"), klabel{}("Map:lookup")]
  symbol Lbl'Hash'EROFS'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1370074462"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(842,22,842,29)"), functional{}(), constructor{}()]
  symbol Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1864116663"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(854,22,854,39)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'KItem'Unds'KItem{}(SortMap{}, SortKItem{}, SortKItem{}) : SortKItem{} [function{}(), hook{}("MAP.lookupOrDefault"), productionID{}("1508038883"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(119,20,119,138)"), klabel{}("Map:lookupOrDefault"), functional{}()]
  symbol LblisIOError{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOError"), originalPrd{}()]
  symbol LblisFloat{}(SortK{}) : SortBool{} [function{}(), predicate{}("Float"), originalPrd{}()]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [function{}(), hook{}("IO.open"), impure{}(), productionID{}("288379405"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(879,18,879,84)")]
  symbol Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("1298146757"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(855,22,855,39)"), functional{}(), constructor{}()]
  symbol Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(SortName{}, SortName{}, SortProc{}) : SortProc{} [productionID{}("1943634922"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,19,17,74)"), binder{}("2"), klabel{}("Rec"), functional{}(), constructor{}()]
  symbol LblisRecsCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecsCellFragment"), originalPrd{}()]
  symbol Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}() : SortIOError{} [productionID{}("331122245"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(814,22,814,30)"), functional{}(), constructor{}()]
  hooked-symbol Lbl'Hash'stat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [function{}(), hook{}("IO.stat"), impure{}(), productionID{}("1720891078"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(892,20,892,75)")]
  symbol Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(SortName{}) : SortProc{} [productionID{}("2108297149"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,19,20,66)"), klabel{}("Reify"), functional{}(), constructor{}()]
  symbol LblisRecCellBag{}(SortK{}) : SortBool{} [function{}(), predicate{}("RecCellBag"), originalPrd{}()]
  hooked-symbol LblSet'Coln'in{}(SortKItem{}, SortSet{}) : SortBool{} [function{}(), hook{}("SET.in"), productionID{}("1871612052"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), symbol'Kywd'{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(184,19,184,106)"), klabel{}("Set:in"), functional{}()]
  symbol Lbl'-LT-'bind'-GT-'{}(SortK{}) : SortBindCell{} [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("5"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), cellName{}("bind"), cell{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,5,59,9)"), contentStartLine{}("38"), functional{}(), constructor{}()]

// generated axioms
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(Y0:SortInt{})), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSendsCellFragment{}, \equals{SortSendsCellFragment{}, R} (Val:SortSendsCellFragment{}, Lbl'-LT-'sends'-GT-'-fragment{}(K0:SortSendCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortSendsCellFragment{}} (\and{SortSendsCellFragment{}} (Lbl'-LT-'sends'-GT-'-fragment{}(X0:SortSendCellBag{}), Lbl'-LT-'sends'-GT-'-fragment{}(Y0:SortSendCellBag{})), Lbl'-LT-'sends'-GT-'-fragment{}(\and{SortSendCellBag{}} (X0:SortSendCellBag{}, Y0:SortSendCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSendsCellOpt{}, \equals{SortSendsCellOpt{}, R} (Val:SortSendsCellOpt{}, inj{SortSendsCell{}, SortSendsCellOpt{}} (From:SortSendsCell{}))) [subsort{SortSendsCell{}, SortSendsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortThreadCell{}, SortCell{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortSendsCell{}, \equals{SortSendsCell{}, R} (Val:SortSendsCell{}, Lbl'-LT-'sends'-GT-'{}(K0:SortSendCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortSendsCell{}} (\and{SortSendsCell{}} (Lbl'-LT-'sends'-GT-'{}(X0:SortSendCellBag{}), Lbl'-LT-'sends'-GT-'{}(Y0:SortSendCellBag{})), Lbl'-LT-'sends'-GT-'{}(\and{SortSendCellBag{}} (X0:SortSendCellBag{}, Y0:SortSendCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortRchanCell{}, SortCell{}} (From:SortRchanCell{}))) [subsort{SortRchanCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortContCellOpt{}, \equals{SortContCellOpt{}, R} (Val:SortContCellOpt{}, LblnoContCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInt{}, SortKItem{}} (From:SortInt{}))) [subsort{SortInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortActivityCellOpt{}, SortKItem{}} (From:SortActivityCellOpt{}))) [subsort{SortActivityCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecCellBag{}, SortKItem{}} (From:SortRecCellBag{}))) [subsort{SortRecCellBag{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortProc{}, \equals{SortProc{}, R} (Val:SortProc{}, Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(K0:SortName{}, K1:SortProc{}))) [functional{}()] // functional
  axiom{}\implies{SortProc{}} (\and{SortProc{}} (Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}), Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(Y0:SortName{}, Y1:SortProc{})), Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(\and{SortName{}} (X0:SortName{}, Y0:SortName{}), \and{SortProc{}} (X1:SortProc{}, Y1:SortProc{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}), LblNil'Unds'RHO-SYNTAX'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}), Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(Y0:SortProc{}, Y1:SortProc{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}), Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(Y0:SortName{}, Y1:SortName{}, Y2:SortProc{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Y0:SortName{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCell{}, SortKItem{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortKCell{}, SortCell{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'UndsUnds'KItem'Unds'List{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortRecCellBag{}, \equals{SortRecCellBag{}, R} (Val:SortRecCellBag{}, inj{SortRecCell{}, SortRecCellBag{}} (From:SortRecCell{}))) [subsort{SortRecCell{}, SortRecCellBag{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortSendsCell{}, SortCell{}} (From:SortSendsCell{}))) [subsort{SortSendsCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortThreadCell{}, \equals{SortThreadCell{}, R} (Val:SortThreadCell{}, Lbl'-LT-'thread'-GT-'{}(K0:SortKCell{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCell{}} (\and{SortThreadCell{}} (Lbl'-LT-'thread'-GT-'{}(X0:SortKCell{}), Lbl'-LT-'thread'-GT-'{}(Y0:SortKCell{})), Lbl'-LT-'thread'-GT-'{}(\and{SortKCell{}} (X0:SortKCell{}, Y0:SortKCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortTuplespaceCell{}, SortCell{}} (From:SortTuplespaceCell{}))) [subsort{SortTuplespaceCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecsCell{}, SortKItem{}} (From:SortRecsCell{}))) [subsort{SortRecsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortSchanCellOpt{}, \equals{SortSchanCellOpt{}, R} (Val:SortSchanCellOpt{}, inj{SortSchanCell{}, SortSchanCellOpt{}} (From:SortSchanCell{}))) [subsort{SortSchanCell{}, SortSchanCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortRecsCellFragment{}, \equals{SortRecsCellFragment{}, R} (Val:SortRecsCellFragment{}, Lbl'-LT-'recs'-GT-'-fragment{}(K0:SortRecCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortRecsCellFragment{}} (\and{SortRecsCellFragment{}} (Lbl'-LT-'recs'-GT-'-fragment{}(X0:SortRecCellBag{}), Lbl'-LT-'recs'-GT-'-fragment{}(Y0:SortRecCellBag{})), Lbl'-LT-'recs'-GT-'-fragment{}(\and{SortRecCellBag{}} (X0:SortRecCellBag{}, Y0:SortRecCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCell{}, SortKItem{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortRchanCellOpt{}, \equals{SortRchanCellOpt{}, R} (Val:SortRchanCellOpt{}, LblnoRchanCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellBag{}, SortKItem{}} (From:SortThreadCellBag{}))) [subsort{SortThreadCellBag{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMsgCell{}, \equals{SortMsgCell{}, R} (Val:SortMsgCell{}, Lbl'-LT-'msg'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortMsgCell{}} (\and{SortMsgCell{}} (Lbl'-LT-'msg'-GT-'{}(X0:SortK{}), Lbl'-LT-'msg'-GT-'{}(Y0:SortK{})), Lbl'-LT-'msg'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMsgCellOpt{}, \equals{SortMsgCellOpt{}, R} (Val:SortMsgCellOpt{}, LblnoMsgCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRchanCell{}, SortKItem{}} (From:SortRchanCell{}))) [subsort{SortRchanCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBindCellOpt{}, \equals{SortBindCellOpt{}, R} (Val:SortBindCellOpt{}, inj{SortBindCell{}, SortBindCellOpt{}} (From:SortBindCell{}))) [subsort{SortBindCell{}, SortBindCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendCellFragment{}, SortKItem{}} (From:SortSendCellFragment{}))) [subsort{SortSendCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSet{}, SortKItem{}} (From:SortSet{}))) [subsort{SortSet{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortThreadCellBag{}, \equals{SortThreadCellBag{}, R} (Val:SortThreadCellBag{}, inj{SortThreadCell{}, SortThreadCellBag{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortThreadCellBag{}}()] // subsort
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortKItem{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortRecsCellOpt{}, \equals{SortRecsCellOpt{}, R} (Val:SortRecsCellOpt{}, inj{SortRecsCell{}, SortRecsCellOpt{}} (From:SortRecsCell{}))) [subsort{SortRecsCell{}, SortRecsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortRecCellFragment{}, \equals{SortRecCellFragment{}, R} (Val:SortRecCellFragment{}, Lbl'-LT-'rec'-GT-'-fragment{}(K0:SortRchanCellOpt{}, K1:SortBindCellOpt{}, K2:SortContCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortRecCellFragment{}} (\and{SortRecCellFragment{}} (Lbl'-LT-'rec'-GT-'-fragment{}(X0:SortRchanCellOpt{}, X1:SortBindCellOpt{}, X2:SortContCellOpt{}), Lbl'-LT-'rec'-GT-'-fragment{}(Y0:SortRchanCellOpt{}, Y1:SortBindCellOpt{}, Y2:SortContCellOpt{})), Lbl'-LT-'rec'-GT-'-fragment{}(\and{SortRchanCellOpt{}} (X0:SortRchanCellOpt{}, Y0:SortRchanCellOpt{}), \and{SortBindCellOpt{}} (X1:SortBindCellOpt{}, Y1:SortBindCellOpt{}), \and{SortContCellOpt{}} (X2:SortContCellOpt{}, Y2:SortContCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCellFragment{}, \equals{SortGeneratedTopCellFragment{}, R} (Val:SortGeneratedTopCellFragment{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(K0:SortTCellOpt{}, K1:SortGeneratedCounterCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCellFragment{}} (\and{SortGeneratedTopCellFragment{}} (Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}), Lbl'-LT-'generatedTop'-GT-'-fragment{}(Y0:SortTCellOpt{}, Y1:SortGeneratedCounterCellOpt{})), Lbl'-LT-'generatedTop'-GT-'-fragment{}(\and{SortTCellOpt{}} (X0:SortTCellOpt{}, Y0:SortTCellOpt{}), \and{SortGeneratedCounterCellOpt{}} (X1:SortGeneratedCounterCellOpt{}, Y1:SortGeneratedCounterCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'KItem'Unds'KItem{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSchanCellOpt{}, \equals{SortSchanCellOpt{}, R} (Val:SortSchanCellOpt{}, LblnoSchanCell{}())) [functional{}()] // functional
  axiom{R} \equals{SortRecCellBag{}, R} (Lbl'Unds'RecCellBag'Unds'{}(Lbl'Unds'RecCellBag'Unds'{}(K1:SortRecCellBag{},K2:SortRecCellBag{}),K3:SortRecCellBag{}),Lbl'Unds'RecCellBag'Unds'{}(K1:SortRecCellBag{},Lbl'Unds'RecCellBag'Unds'{}(K2:SortRecCellBag{},K3:SortRecCellBag{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortRecCellBag{}, R} (Lbl'Unds'RecCellBag'Unds'{}(K1:SortRecCellBag{},K2:SortRecCellBag{}),Lbl'Unds'RecCellBag'Unds'{}(K2:SortRecCellBag{},K1:SortRecCellBag{})) [comm{}()] // commutativity
  axiom{R}\equals{SortRecCellBag{}, R} (Lbl'Unds'RecCellBag'Unds'{}(K:SortRecCellBag{},Lbl'Stop'RecCellBag{}()),K:SortRecCellBag{}) [unit{}()] // right unit
  axiom{R}\equals{SortRecCellBag{}, R} (Lbl'Unds'RecCellBag'Unds'{}(Lbl'Stop'RecCellBag{}(),K:SortRecCellBag{}),K:SortRecCellBag{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMsgCell{}, SortKItem{}} (From:SortMsgCell{}))) [subsort{SortMsgCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTuplespaceCellOpt{}, SortKItem{}} (From:SortTuplespaceCellOpt{}))) [subsort{SortTuplespaceCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortContCellOpt{}, SortKItem{}} (From:SortContCellOpt{}))) [subsort{SortContCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTuplespaceCellOpt{}, \equals{SortTuplespaceCellOpt{}, R} (Val:SortTuplespaceCellOpt{}, LblnoTuplespaceCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K:SortMap{},Lbl'Stop'Map{}()),K:SortMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),K:SortMap{}),K:SortMap{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(K:SortList{},Lbl'Stop'List{}()),K:SortList{}) [unit{}()] // right unit
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),K:SortList{}),K:SortList{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortActivityCell{}, \equals{SortActivityCell{}, R} (Val:SortActivityCell{}, Lbl'-LT-'activity'-GT-'{}(K0:SortThreadCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortActivityCell{}} (\and{SortActivityCell{}} (Lbl'-LT-'activity'-GT-'{}(X0:SortThreadCellBag{}), Lbl'-LT-'activity'-GT-'{}(Y0:SortThreadCellBag{})), Lbl'-LT-'activity'-GT-'{}(\and{SortThreadCellBag{}} (X0:SortThreadCellBag{}, Y0:SortThreadCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTuplespaceCellFragment{}, \equals{SortTuplespaceCellFragment{}, R} (Val:SortTuplespaceCellFragment{}, Lbl'-LT-'tuplespace'-GT-'-fragment{}(K0:SortSendsCellOpt{}, K1:SortRecsCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTuplespaceCellFragment{}} (\and{SortTuplespaceCellFragment{}} (Lbl'-LT-'tuplespace'-GT-'-fragment{}(X0:SortSendsCellOpt{}, X1:SortRecsCellOpt{}), Lbl'-LT-'tuplespace'-GT-'-fragment{}(Y0:SortSendsCellOpt{}, Y1:SortRecsCellOpt{})), Lbl'-LT-'tuplespace'-GT-'-fragment{}(\and{SortSendsCellOpt{}} (X0:SortSendsCellOpt{}, Y0:SortSendsCellOpt{}), \and{SortRecsCellOpt{}} (X1:SortRecsCellOpt{}, Y1:SortRecsCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTuplespaceCell{}, \equals{SortTuplespaceCell{}, R} (Val:SortTuplespaceCell{}, Lbl'-LT-'tuplespace'-GT-'{}(K0:SortSendsCell{}, K1:SortRecsCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTuplespaceCell{}} (\and{SortTuplespaceCell{}} (Lbl'-LT-'tuplespace'-GT-'{}(X0:SortSendsCell{}, X1:SortRecsCell{}), Lbl'-LT-'tuplespace'-GT-'{}(Y0:SortSendsCell{}, Y1:SortRecsCell{})), Lbl'-LT-'tuplespace'-GT-'{}(\and{SortSendsCell{}} (X0:SortSendsCell{}, Y0:SortSendsCell{}), \and{SortRecsCell{}} (X1:SortRecsCell{}, Y1:SortRecsCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'KItem'Unds'Map{}(K0:SortKItem{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, LblnoTCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecCellFragment{}, SortKItem{}} (From:SortRecCellFragment{}))) [subsort{SortRecCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortSchanCell{}, SortCell{}} (From:SortSchanCell{}))) [subsort{SortSchanCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortActivityCellOpt{}, \equals{SortActivityCellOpt{}, R} (Val:SortActivityCellOpt{}, LblnoActivityCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMap{}, SortKItem{}} (From:SortMap{}))) [subsort{SortMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTuplespaceCell{}, SortKItem{}} (From:SortTuplespaceCell{}))) [subsort{SortTuplespaceCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortActivityCellFragment{}, \equals{SortActivityCellFragment{}, R} (Val:SortActivityCellFragment{}, Lbl'-LT-'activity'-GT-'-fragment{}(K0:SortThreadCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortActivityCellFragment{}} (\and{SortActivityCellFragment{}} (Lbl'-LT-'activity'-GT-'-fragment{}(X0:SortThreadCellBag{}), Lbl'-LT-'activity'-GT-'-fragment{}(Y0:SortThreadCellBag{})), Lbl'-LT-'activity'-GT-'-fragment{}(\and{SortThreadCellBag{}} (X0:SortThreadCellBag{}, Y0:SortThreadCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (From:SortGeneratedCounterCellOpt{}))) [subsort{SortGeneratedCounterCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKVariable{}, SortKItem{}} (From:SortKVariable{}))) [subsort{SortKVariable{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCell{}, SortKItem{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTuplespaceCellOpt{}, \equals{SortTuplespaceCellOpt{}, R} (Val:SortTuplespaceCellOpt{}, inj{SortTuplespaceCell{}, SortTuplespaceCellOpt{}} (From:SortTuplespaceCell{}))) [subsort{SortTuplespaceCell{}, SortTuplespaceCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCell{}, SortKItem{}} (From:SortGeneratedTopCell{}))) [subsort{SortGeneratedTopCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortGeneratedTopCell{}, \equals{SortGeneratedTopCell{}, R} (Val:SortGeneratedTopCell{}, Lbl'-LT-'generatedTop'-GT-'{}(K0:SortTCell{}, K1:SortGeneratedCounterCell{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCell{}} (\and{SortGeneratedTopCell{}} (Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}), Lbl'-LT-'generatedTop'-GT-'{}(Y0:SortTCell{}, Y1:SortGeneratedCounterCell{})), Lbl'-LT-'generatedTop'-GT-'{}(\and{SortTCell{}} (X0:SortTCell{}, Y0:SortTCell{}), \and{SortGeneratedCounterCell{}} (X1:SortGeneratedCounterCell{}, Y1:SortGeneratedCounterCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortActivityCellOpt{}, \equals{SortActivityCellOpt{}, R} (Val:SortActivityCellOpt{}, inj{SortActivityCell{}, SortActivityCellOpt{}} (From:SortActivityCell{}))) [subsort{SortActivityCell{}, SortActivityCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortList{}, SortKItem{}} (From:SortList{}))) [subsort{SortList{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBindCell{}, SortKItem{}} (From:SortBindCell{}))) [subsort{SortBindCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R, SortS0} \exists{R} (Val:SortS0, \equals{SortS0, R} (Val:SortS0, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(K0:SortBool{}, K1:SortS0, K2:SortS0))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (From:SortGeneratedTopCellFragment{}))) [subsort{SortGeneratedTopCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, inj{SortTCell{}, SortTCellOpt{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortTCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSchanCellOpt{}, SortKItem{}} (From:SortSchanCellOpt{}))) [subsort{SortSchanCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortSchanCell{}, \equals{SortSchanCell{}, R} (Val:SortSchanCell{}, Lbl'-LT-'schan'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortSchanCell{}} (\and{SortSchanCell{}} (Lbl'-LT-'schan'-GT-'{}(X0:SortK{}), Lbl'-LT-'schan'-GT-'{}(Y0:SortK{})), Lbl'-LT-'schan'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOError{}, SortKItem{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellFragment{}, SortKItem{}} (From:SortTCellFragment{}))) [subsort{SortTCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortRecsCell{}, \equals{SortRecsCell{}, R} (Val:SortRecsCell{}, Lbl'-LT-'recs'-GT-'{}(K0:SortRecCellBag{}))) [functional{}()] // functional
  axiom{}\implies{SortRecsCell{}} (\and{SortRecsCell{}} (Lbl'-LT-'recs'-GT-'{}(X0:SortRecCellBag{}), Lbl'-LT-'recs'-GT-'{}(Y0:SortRecCellBag{})), Lbl'-LT-'recs'-GT-'{}(\and{SortRecCellBag{}} (X0:SortRecCellBag{}, Y0:SortRecCellBag{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortThreadCellFragment{}, \equals{SortThreadCellFragment{}, R} (Val:SortThreadCellFragment{}, Lbl'-LT-'thread'-GT-'-fragment{}(K0:SortKCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCellFragment{}} (\and{SortThreadCellFragment{}} (Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortKCellOpt{}), Lbl'-LT-'thread'-GT-'-fragment{}(Y0:SortKCellOpt{})), Lbl'-LT-'thread'-GT-'-fragment{}(\and{SortKCellOpt{}} (X0:SortKCellOpt{}, Y0:SortKCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendCell{}, SortKItem{}} (From:SortSendCell{}))) [subsort{SortSendCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMsgCellOpt{}, \equals{SortMsgCellOpt{}, R} (Val:SortMsgCellOpt{}, inj{SortMsgCell{}, SortMsgCellOpt{}} (From:SortMsgCell{}))) [subsort{SortMsgCell{}, SortMsgCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortSendCellBag{}, \equals{SortSendCellBag{}, R} (Val:SortSendCellBag{}, inj{SortSendCell{}, SortSendCellBag{}} (From:SortSendCell{}))) [subsort{SortSendCell{}, SortSendCellBag{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, inj{SortKItem{}, SortK{}} (From:SortKItem{}))) [subsort{SortKItem{}, SortK{}}()] // subsort
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortSendCellBag{}, R} (Lbl'Unds'SendCellBag'Unds'{}(Lbl'Unds'SendCellBag'Unds'{}(K1:SortSendCellBag{},K2:SortSendCellBag{}),K3:SortSendCellBag{}),Lbl'Unds'SendCellBag'Unds'{}(K1:SortSendCellBag{},Lbl'Unds'SendCellBag'Unds'{}(K2:SortSendCellBag{},K3:SortSendCellBag{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSendCellBag{}, R} (Lbl'Unds'SendCellBag'Unds'{}(K1:SortSendCellBag{},K2:SortSendCellBag{}),Lbl'Unds'SendCellBag'Unds'{}(K2:SortSendCellBag{},K1:SortSendCellBag{})) [comm{}()] // commutativity
  axiom{R}\equals{SortSendCellBag{}, R} (Lbl'Unds'SendCellBag'Unds'{}(K:SortSendCellBag{},Lbl'Stop'SendCellBag{}()),K:SortSendCellBag{}) [unit{}()] // right unit
  axiom{R}\equals{SortSendCellBag{}, R} (Lbl'Unds'SendCellBag'Unds'{}(Lbl'Stop'SendCellBag{}(),K:SortSendCellBag{}),K:SortSendCellBag{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortTCell{}, SortCell{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBindCellOpt{}, SortKItem{}} (From:SortBindCellOpt{}))) [subsort{SortBindCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecsCellFragment{}, SortKItem{}} (From:SortRecsCellFragment{}))) [subsort{SortRecsCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortContCell{}, SortCell{}} (From:SortContCell{}))) [subsort{SortContCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortSendCellFragment{}, \equals{SortSendCellFragment{}, R} (Val:SortSendCellFragment{}, Lbl'-LT-'send'-GT-'-fragment{}(K0:SortSchanCellOpt{}, K1:SortMsgCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortSendCellFragment{}} (\and{SortSendCellFragment{}} (Lbl'-LT-'send'-GT-'-fragment{}(X0:SortSchanCellOpt{}, X1:SortMsgCellOpt{}), Lbl'-LT-'send'-GT-'-fragment{}(Y0:SortSchanCellOpt{}, Y1:SortMsgCellOpt{})), Lbl'-LT-'send'-GT-'-fragment{}(\and{SortSchanCellOpt{}} (X0:SortSchanCellOpt{}, Y0:SortSchanCellOpt{}), \and{SortMsgCellOpt{}} (X1:SortMsgCellOpt{}, Y1:SortMsgCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(K0:SortString{}, K1:SortInt{}, K2:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortRecCell{}, SortCell{}} (From:SortRecCell{}))) [subsort{SortRecCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortSendCell{}, SortCell{}} (From:SortSendCell{}))) [subsort{SortSendCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, Lbl'-LT-'generatedCounter'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedCounterCell{}} (\and{SortGeneratedCounterCell{}} (Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{}), Lbl'-LT-'generatedCounter'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'generatedCounter'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortSendsCellOpt{}, \equals{SortSendsCellOpt{}, R} (Val:SortSendsCellOpt{}, LblnoSendsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBindCellOpt{}, \equals{SortBindCellOpt{}, R} (Val:SortBindCellOpt{}, LblnoBindCell{}())) [functional{}()] // functional
  axiom{R} \equals{SortThreadCellBag{}, R} (Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Unds'ThreadCellBag'Unds'{}(K1:SortThreadCellBag{},K2:SortThreadCellBag{}),K3:SortThreadCellBag{}),Lbl'Unds'ThreadCellBag'Unds'{}(K1:SortThreadCellBag{},Lbl'Unds'ThreadCellBag'Unds'{}(K2:SortThreadCellBag{},K3:SortThreadCellBag{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortThreadCellBag{}, R} (Lbl'Unds'ThreadCellBag'Unds'{}(K1:SortThreadCellBag{},K2:SortThreadCellBag{}),Lbl'Unds'ThreadCellBag'Unds'{}(K2:SortThreadCellBag{},K1:SortThreadCellBag{})) [comm{}()] // commutativity
  axiom{R}\equals{SortThreadCellBag{}, R} (Lbl'Unds'ThreadCellBag'Unds'{}(K:SortThreadCellBag{},Lbl'Stop'ThreadCellBag{}()),K:SortThreadCellBag{}) [unit{}()] // right unit
  axiom{R}\equals{SortThreadCellBag{}, R} (Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Stop'ThreadCellBag{}(),K:SortThreadCellBag{}),K:SortThreadCellBag{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortName{}, \equals{SortName{}, R} (Val:SortName{}, inj{SortId{}, SortName{}} (From:SortId{}))) [subsort{SortId{}, SortName{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, LblnoGeneratedCounterCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortActivityCellOpt{}, K1:SortTuplespaceCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortActivityCellOpt{}, X1:SortTuplespaceCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortActivityCellOpt{}, Y1:SortTuplespaceCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortActivityCellOpt{}} (X0:SortActivityCellOpt{}, Y0:SortActivityCellOpt{}), \and{SortTuplespaceCellOpt{}} (X1:SortTuplespaceCellOpt{}, Y1:SortTuplespaceCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecCell{}, SortKItem{}} (From:SortRecCell{}))) [subsort{SortRecCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortRecCell{}, \equals{SortRecCell{}, R} (Val:SortRecCell{}, Lbl'-LT-'rec'-GT-'{}(K0:SortRchanCell{}, K1:SortBindCell{}, K2:SortContCell{}))) [functional{}()] // functional
  axiom{}\implies{SortRecCell{}} (\and{SortRecCell{}} (Lbl'-LT-'rec'-GT-'{}(X0:SortRchanCell{}, X1:SortBindCell{}, X2:SortContCell{}), Lbl'-LT-'rec'-GT-'{}(Y0:SortRchanCell{}, Y1:SortBindCell{}, Y2:SortContCell{})), Lbl'-LT-'rec'-GT-'{}(\and{SortRchanCell{}} (X0:SortRchanCell{}, Y0:SortRchanCell{}), \and{SortBindCell{}} (X1:SortBindCell{}, Y1:SortBindCell{}), \and{SortContCell{}} (X2:SortContCell{}, Y2:SortContCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortRchanCellOpt{}, \equals{SortRchanCellOpt{}, R} (Val:SortRchanCellOpt{}, inj{SortRchanCell{}, SortRchanCellOpt{}} (From:SortRchanCell{}))) [subsort{SortRchanCell{}, SortRchanCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortCell{}, SortKItem{}} (From:SortCell{}))) [subsort{SortCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBool{}, SortKItem{}} (From:SortBool{}))) [subsort{SortBool{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFloat{}, SortKItem{}} (From:SortFloat{}))) [subsort{SortFloat{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortName{}, \equals{SortName{}, R} (Val:SortName{}, Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(K0:SortProc{}))) [functional{}()] // functional
  axiom{}\implies{SortName{}} (\and{SortName{}} (Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(X0:SortProc{}), Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(Y0:SortProc{})), Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(\and{SortProc{}} (X0:SortProc{}, Y0:SortProc{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortName{}, SortKItem{}} (From:SortName{}))) [subsort{SortName{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortActivityCell{}, K1:SortTuplespaceCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortActivityCell{}, X1:SortTuplespaceCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortActivityCell{}, Y1:SortTuplespaceCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortActivityCell{}} (X0:SortActivityCell{}, Y0:SortActivityCell{}), \and{SortTuplespaceCell{}} (X1:SortTuplespaceCell{}, Y1:SortTuplespaceCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortProc{}, \equals{SortProc{}, R} (Val:SortProc{}, LblNil'Unds'RHO-SYNTAX'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortProc{}} (\and{SortProc{}} (LblNil'Unds'RHO-SYNTAX'Unds'{}(), Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(Y0:SortProc{}, Y1:SortProc{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (LblNil'Unds'RHO-SYNTAX'Unds'{}(), Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(Y0:SortName{}, Y1:SortName{}, Y2:SortProc{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (LblNil'Unds'RHO-SYNTAX'Unds'{}(), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Y0:SortName{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortRecsCellOpt{}, \equals{SortRecsCellOpt{}, R} (Val:SortRecsCellOpt{}, LblnoRecsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, inj{SortKCell{}, SortKCellOpt{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMsgCellOpt{}, SortKItem{}} (From:SortMsgCellOpt{}))) [subsort{SortMsgCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortContCell{}, \equals{SortContCell{}, R} (Val:SortContCell{}, Lbl'-LT-'cont'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortContCell{}} (\and{SortContCell{}} (Lbl'-LT-'cont'-GT-'{}(X0:SortK{}), Lbl'-LT-'cont'-GT-'{}(Y0:SortK{})), Lbl'-LT-'cont'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTuplespaceCellFragment{}, SortKItem{}} (From:SortTuplespaceCellFragment{}))) [subsort{SortTuplespaceCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortBindCell{}, SortCell{}} (From:SortBindCell{}))) [subsort{SortBindCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendsCellFragment{}, SortKItem{}} (From:SortSendsCellFragment{}))) [subsort{SortSendsCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortId{}, SortKItem{}} (From:SortId{}))) [subsort{SortId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRchanCellOpt{}, SortKItem{}} (From:SortRchanCellOpt{}))) [subsort{SortRchanCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortRchanCell{}, \equals{SortRchanCell{}, R} (Val:SortRchanCell{}, Lbl'-LT-'rchan'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortRchanCell{}} (\and{SortRchanCell{}} (Lbl'-LT-'rchan'-GT-'{}(X0:SortK{}), Lbl'-LT-'rchan'-GT-'{}(Y0:SortK{})), Lbl'-LT-'rchan'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortMsgCell{}, SortCell{}} (From:SortMsgCell{}))) [subsort{SortMsgCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortProc{}, SortKItem{}} (From:SortProc{}))) [subsort{SortProc{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellFragment{}, SortKItem{}} (From:SortThreadCellFragment{}))) [subsort{SortThreadCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortRecsCellOpt{}, SortKItem{}} (From:SortRecsCellOpt{}))) [subsort{SortRecsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortActivityCell{}, SortKItem{}} (From:SortActivityCell{}))) [subsort{SortActivityCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSendCell{}, \equals{SortSendCell{}, R} (Val:SortSendCell{}, Lbl'-LT-'send'-GT-'{}(K0:SortSchanCell{}, K1:SortMsgCell{}))) [functional{}()] // functional
  axiom{}\implies{SortSendCell{}} (\and{SortSendCell{}} (Lbl'-LT-'send'-GT-'{}(X0:SortSchanCell{}, X1:SortMsgCell{}), Lbl'-LT-'send'-GT-'{}(Y0:SortSchanCell{}, Y1:SortMsgCell{})), Lbl'-LT-'send'-GT-'{}(\and{SortSchanCell{}} (X0:SortSchanCell{}, Y0:SortSchanCell{}), \and{SortMsgCell{}} (X1:SortMsgCell{}, Y1:SortMsgCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSchanCell{}, SortKItem{}} (From:SortSchanCell{}))) [subsort{SortSchanCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},Lbl'Stop'Set{}()),K:SortSet{}) [unit{}()] // right unit
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Stop'Set{}(),K:SortSet{}),K:SortSet{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Unds'Set'Unds'{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCellOpt{}, SortKItem{}} (From:SortKCellOpt{}))) [subsort{SortKCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortProc{}, \equals{SortProc{}, R} (Val:SortProc{}, Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(K0:SortProc{}, K1:SortProc{}))) [functional{}()] // functional
  axiom{}\implies{SortProc{}} (\and{SortProc{}} (Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(X0:SortProc{}, X1:SortProc{}), Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(Y0:SortProc{}, Y1:SortProc{})), Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(\and{SortProc{}} (X0:SortProc{}, Y0:SortProc{}), \and{SortProc{}} (X1:SortProc{}, Y1:SortProc{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(X0:SortProc{}, X1:SortProc{}), Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(Y0:SortName{}, Y1:SortName{}, Y2:SortProc{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(X0:SortProc{}, X1:SortProc{}), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Y0:SortName{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortActivityCell{}, SortCell{}} (From:SortActivityCell{}))) [subsort{SortActivityCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellOpt{}, SortKItem{}} (From:SortTCellOpt{}))) [subsort{SortTCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'KItem'Unds'KItem{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortContCell{}, SortKItem{}} (From:SortContCell{}))) [subsort{SortContCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortString{}, SortKItem{}} (From:SortString{}))) [subsort{SortString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortContCellOpt{}, \equals{SortContCellOpt{}, R} (Val:SortContCellOpt{}, inj{SortContCell{}, SortContCellOpt{}} (From:SortContCell{}))) [subsort{SortContCell{}, SortContCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKVariable{}, \equals{SortKVariable{}, R} (Val:SortKVariable{}, inj{SortName{}, SortKVariable{}} (From:SortName{}))) [subsort{SortName{}, SortKVariable{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendsCellOpt{}, SortKItem{}} (From:SortSendsCellOpt{}))) [subsort{SortSendsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendsCell{}, SortKItem{}} (From:SortSendsCell{}))) [subsort{SortSendsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortProc{}, \equals{SortProc{}, R} (Val:SortProc{}, Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(K0:SortName{}, K1:SortName{}, K2:SortProc{}))) [functional{}()] // functional
  axiom{}\implies{SortProc{}} (\and{SortProc{}} (Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(X0:SortName{}, X1:SortName{}, X2:SortProc{}), Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(Y0:SortName{}, Y1:SortName{}, Y2:SortProc{})), Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(\and{SortName{}} (X0:SortName{}, Y0:SortName{}), \and{SortName{}} (X1:SortName{}, Y1:SortName{}), \and{SortProc{}} (X2:SortProc{}, Y2:SortProc{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProc{}} (\and{SortProc{}} (Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(X0:SortName{}, X1:SortName{}, X2:SortProc{}), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Y0:SortName{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortActivityCellFragment{}, SortKItem{}} (From:SortActivityCellFragment{}))) [subsort{SortActivityCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSendCellBag{}, SortKItem{}} (From:SortSendCellBag{}))) [subsort{SortSendCellBag{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortProc{}, \equals{SortProc{}, R} (Val:SortProc{}, Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(K0:SortName{}))) [functional{}()] // functional
  axiom{}\implies{SortProc{}} (\and{SortProc{}} (Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(X0:SortName{}), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Y0:SortName{})), Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(\and{SortName{}} (X0:SortName{}, Y0:SortName{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStream{}, SortKItem{}} (From:SortStream{}))) [subsort{SortStream{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortKItem{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortRecsCell{}, SortCell{}} (From:SortRecsCell{}))) [subsort{SortRecsCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBindCell{}, \equals{SortBindCell{}, R} (Val:SortBindCell{}, Lbl'-LT-'bind'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortBindCell{}} (\and{SortBindCell{}} (Lbl'-LT-'bind'-GT-'{}(X0:SortK{}), Lbl'-LT-'bind'-GT-'{}(Y0:SortK{})), Lbl'-LT-'bind'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{} \or{SortRecCellFragment{}} (\exists{SortRecCellFragment{}} (X0:SortRchanCellOpt{}, \exists{SortRecCellFragment{}} (X1:SortBindCellOpt{}, \exists{SortRecCellFragment{}} (X2:SortContCellOpt{}, Lbl'-LT-'rec'-GT-'-fragment{}(X0:SortRchanCellOpt{}, X1:SortBindCellOpt{}, X2:SortContCellOpt{})))), \bottom{SortRecCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecCellFragment{}, inj{SortRecCellFragment{}, SortKItem{}} (Val:SortRecCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendCellBag{}, inj{SortSendCellBag{}, SortKItem{}} (Val:SortSendCellBag{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTuplespaceCellFragment{}, inj{SortTuplespaceCellFragment{}, SortKItem{}} (Val:SortTuplespaceCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSchanCellOpt{}, inj{SortSchanCellOpt{}, SortKItem{}} (Val:SortSchanCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSchanCell{}, inj{SortSchanCell{}, SortKItem{}} (Val:SortSchanCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecsCellOpt{}, inj{SortRecsCellOpt{}, SortKItem{}} (Val:SortRecsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendsCell{}, inj{SortSendsCell{}, SortKItem{}} (Val:SortSendsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellOpt{}, inj{SortTCellOpt{}, SortKItem{}} (Val:SortTCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKVariable{}, inj{SortKVariable{}, SortKItem{}} (Val:SortKVariable{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellFragment{}, inj{SortThreadCellFragment{}, SortKItem{}} (Val:SortThreadCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRchanCellOpt{}, inj{SortRchanCellOpt{}, SortKItem{}} (Val:SortRchanCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTuplespaceCell{}, inj{SortTuplespaceCell{}, SortKItem{}} (Val:SortTuplespaceCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendCellFragment{}, inj{SortSendCellFragment{}, SortKItem{}} (Val:SortSendCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortProc{}, inj{SortProc{}, SortKItem{}} (Val:SortProc{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (Val:SortGeneratedCounterCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMsgCell{}, inj{SortMsgCell{}, SortKItem{}} (Val:SortMsgCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (Val:SortGeneratedCounterCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortCell{}, inj{SortCell{}, SortKItem{}} (Val:SortCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendsCellOpt{}, inj{SortSendsCellOpt{}, SortKItem{}} (Val:SortSendsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortContCellOpt{}, inj{SortContCellOpt{}, SortKItem{}} (Val:SortContCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortKItem{}} (Val:SortThreadCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellBag{}, inj{SortThreadCellBag{}, SortKItem{}} (Val:SortThreadCellBag{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBindCell{}, inj{SortBindCell{}, SortKItem{}} (Val:SortBindCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortName{}, inj{SortName{}, SortKItem{}} (Val:SortName{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecsCell{}, inj{SortRecsCell{}, SortKItem{}} (Val:SortRecsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecCellBag{}, inj{SortRecCellBag{}, SortKItem{}} (Val:SortRecCellBag{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecCell{}, inj{SortRecCell{}, SortKItem{}} (Val:SortRecCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBindCellOpt{}, inj{SortBindCellOpt{}, SortKItem{}} (Val:SortBindCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRchanCell{}, inj{SortRchanCell{}, SortKItem{}} (Val:SortRchanCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMsgCellOpt{}, inj{SortMsgCellOpt{}, SortKItem{}} (Val:SortMsgCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortActivityCellOpt{}, inj{SortActivityCellOpt{}, SortKItem{}} (Val:SortActivityCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortKItem{}} (Val:SortGeneratedTopCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortContCell{}, inj{SortContCell{}, SortKItem{}} (Val:SortContCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTuplespaceCellOpt{}, inj{SortTuplespaceCellOpt{}, SortKItem{}} (Val:SortTuplespaceCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortActivityCell{}, inj{SortActivityCell{}, SortKItem{}} (Val:SortActivityCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortRecsCellFragment{}, inj{SortRecsCellFragment{}, SortKItem{}} (Val:SortRecsCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendCell{}, inj{SortSendCell{}, SortKItem{}} (Val:SortSendCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSendsCellFragment{}, inj{SortSendsCellFragment{}, SortKItem{}} (Val:SortSendsCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (Val:SortGeneratedTopCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortActivityCellFragment{}, inj{SortActivityCellFragment{}, SortKItem{}} (Val:SortActivityCellFragment{})), \bottom{SortKItem{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortSendCellBag{}} (\exists{SortSendCellBag{}} (Val:SortSendCell{}, inj{SortSendCell{}, SortSendCellBag{}} (Val:SortSendCell{})), \bottom{SortSendCellBag{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortList{}}() [constructor{}()] // no junk
  axiom{} \or{SortTuplespaceCellFragment{}} (\exists{SortTuplespaceCellFragment{}} (X0:SortSendsCellOpt{}, \exists{SortTuplespaceCellFragment{}} (X1:SortRecsCellOpt{}, Lbl'-LT-'tuplespace'-GT-'-fragment{}(X0:SortSendsCellOpt{}, X1:SortRecsCellOpt{}))), \bottom{SortTuplespaceCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSchanCellOpt{}} (LblnoSchanCell{}(), \or{SortSchanCellOpt{}} (\exists{SortSchanCellOpt{}} (Val:SortSchanCell{}, inj{SortSchanCell{}, SortSchanCellOpt{}} (Val:SortSchanCell{})), \bottom{SortSchanCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortSchanCell{}} (\exists{SortSchanCell{}} (X0:SortK{}, Lbl'-LT-'schan'-GT-'{}(X0:SortK{})), \bottom{SortSchanCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortRecsCellOpt{}} (LblnoRecsCell{}(), \or{SortRecsCellOpt{}} (\exists{SortRecsCellOpt{}} (Val:SortRecsCell{}, inj{SortRecsCell{}, SortRecsCellOpt{}} (Val:SortRecsCell{})), \bottom{SortRecsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortSendsCell{}} (\exists{SortSendsCell{}} (X0:SortSendCellBag{}, Lbl'-LT-'sends'-GT-'{}(X0:SortSendCellBag{})), \bottom{SortSendsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTCellOpt{}} (LblnoTCell{}(), \or{SortTCellOpt{}} (\exists{SortTCellOpt{}} (Val:SortTCell{}, inj{SortTCell{}, SortTCellOpt{}} (Val:SortTCell{})), \bottom{SortTCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortActivityCellOpt{}, \exists{SortTCellFragment{}} (X1:SortTuplespaceCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortActivityCellOpt{}, X1:SortTuplespaceCellOpt{}))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKVariable{}} (\exists{SortKVariable{}} (Val:SortId{}, inj{SortId{}, SortKVariable{}} (Val:SortId{})), \or{SortKVariable{}} (\exists{SortKVariable{}} (Val:SortName{}, inj{SortName{}, SortKVariable{}} (Val:SortName{})), \bottom{SortKVariable{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellFragment{}} (\exists{SortThreadCellFragment{}} (X0:SortKCellOpt{}, Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortKCellOpt{})), \bottom{SortThreadCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortRchanCellOpt{}} (LblnoRchanCell{}(), \or{SortRchanCellOpt{}} (\exists{SortRchanCellOpt{}} (Val:SortRchanCell{}, inj{SortRchanCell{}, SortRchanCellOpt{}} (Val:SortRchanCell{})), \bottom{SortRchanCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortActivityCell{}, \exists{SortTCell{}} (X1:SortTuplespaceCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortActivityCell{}, X1:SortTuplespaceCell{}))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTuplespaceCell{}} (\exists{SortTuplespaceCell{}} (X0:SortSendsCell{}, \exists{SortTuplespaceCell{}} (X1:SortRecsCell{}, Lbl'-LT-'tuplespace'-GT-'{}(X0:SortSendsCell{}, X1:SortRecsCell{}))), \bottom{SortTuplespaceCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSendCellFragment{}} (\exists{SortSendCellFragment{}} (X0:SortSchanCellOpt{}, \exists{SortSendCellFragment{}} (X1:SortMsgCellOpt{}, Lbl'-LT-'send'-GT-'-fragment{}(X0:SortSchanCellOpt{}, X1:SortMsgCellOpt{}))), \bottom{SortSendCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortProc{}} (\exists{SortProc{}} (X0:SortName{}, \exists{SortProc{}} (X1:SortProc{}, Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(X0:SortName{}, X1:SortProc{}))), \or{SortProc{}} (LblNil'Unds'RHO-SYNTAX'Unds'{}(), \or{SortProc{}} (\exists{SortProc{}} (X0:SortProc{}, \exists{SortProc{}} (X1:SortProc{}, Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(X0:SortProc{}, X1:SortProc{}))), \or{SortProc{}} (\exists{SortProc{}} (X0:SortName{}, \exists{SortProc{}} (X1:SortName{}, \exists{SortProc{}} (X2:SortProc{}, Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(X0:SortName{}, X1:SortName{}, X2:SortProc{})))), \or{SortProc{}} (\exists{SortProc{}} (X0:SortName{}, Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(X0:SortName{})), \bottom{SortProc{}}()))))) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCellOpt{}} (LblnoGeneratedCounterCell{}(), \or{SortGeneratedCounterCellOpt{}} (\exists{SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{})), \bottom{SortGeneratedCounterCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortMsgCell{}} (\exists{SortMsgCell{}} (X0:SortK{}, Lbl'-LT-'msg'-GT-'{}(X0:SortK{})), \bottom{SortMsgCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCell{}} (\exists{SortGeneratedCounterCell{}} (X0:SortInt{}, Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{})), \bottom{SortGeneratedCounterCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{})), \bottom{SortStream{}}()) [constructor{}()] // no junk
  axiom{} \or{SortCell{}} (\exists{SortCell{}} (Val:SortSchanCell{}, inj{SortSchanCell{}, SortCell{}} (Val:SortSchanCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortSendsCell{}, inj{SortSendsCell{}, SortCell{}} (Val:SortSendsCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTCell{}, inj{SortTCell{}, SortCell{}} (Val:SortTCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTuplespaceCell{}, inj{SortTuplespaceCell{}, SortCell{}} (Val:SortTuplespaceCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortMsgCell{}, inj{SortMsgCell{}, SortCell{}} (Val:SortMsgCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortKCell{}, inj{SortKCell{}, SortCell{}} (Val:SortKCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortCell{}} (Val:SortThreadCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortBindCell{}, inj{SortBindCell{}, SortCell{}} (Val:SortBindCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortRecsCell{}, inj{SortRecsCell{}, SortCell{}} (Val:SortRecsCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortRecCell{}, inj{SortRecCell{}, SortCell{}} (Val:SortRecCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortRchanCell{}, inj{SortRchanCell{}, SortCell{}} (Val:SortRchanCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortContCell{}, inj{SortContCell{}, SortCell{}} (Val:SortContCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortActivityCell{}, inj{SortActivityCell{}, SortCell{}} (Val:SortActivityCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortSendCell{}, inj{SortSendCell{}, SortCell{}} (Val:SortSendCell{})), \bottom{SortCell{}}())))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortK{}} (\exists{SortK{}} (Val:SortRecCellFragment{}, inj{SortRecCellFragment{}, SortK{}} (Val:SortRecCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortKItem{}, inj{SortKItem{}, SortK{}} (Val:SortKItem{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendCellBag{}, inj{SortSendCellBag{}, SortK{}} (Val:SortSendCellBag{})), \or{SortK{}} (\exists{SortK{}} (Val:SortList{}, inj{SortList{}, SortK{}} (Val:SortList{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTuplespaceCellFragment{}, inj{SortTuplespaceCellFragment{}, SortK{}} (Val:SortTuplespaceCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSchanCellOpt{}, inj{SortSchanCellOpt{}, SortK{}} (Val:SortSchanCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSchanCell{}, inj{SortSchanCell{}, SortK{}} (Val:SortSchanCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRecsCellOpt{}, inj{SortRecsCellOpt{}, SortK{}} (Val:SortRecsCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendsCell{}, inj{SortSendsCell{}, SortK{}} (Val:SortSendsCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTCellOpt{}, inj{SortTCellOpt{}, SortK{}} (Val:SortTCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortK{}} (Val:SortTCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortKVariable{}, inj{SortKVariable{}, SortK{}} (Val:SortKVariable{})), \or{SortK{}} (\exists{SortK{}} (Val:SortThreadCellFragment{}, inj{SortThreadCellFragment{}, SortK{}} (Val:SortThreadCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRchanCellOpt{}, inj{SortRchanCellOpt{}, SortK{}} (Val:SortRchanCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortString{}, inj{SortString{}, SortK{}} (Val:SortString{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTCell{}, inj{SortTCell{}, SortK{}} (Val:SortTCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTuplespaceCell{}, inj{SortTuplespaceCell{}, SortK{}} (Val:SortTuplespaceCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendCellFragment{}, inj{SortSendCellFragment{}, SortK{}} (Val:SortSendCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortProc{}, inj{SortProc{}, SortK{}} (Val:SortProc{})), \or{SortK{}} (\exists{SortK{}} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCellOpt{}, SortK{}} (Val:SortGeneratedCounterCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortMsgCell{}, inj{SortMsgCell{}, SortK{}} (Val:SortMsgCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortK{}} (Val:SortGeneratedCounterCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortId{}, inj{SortId{}, SortK{}} (Val:SortId{})), \or{SortK{}} (\exists{SortK{}} (Val:SortStream{}, inj{SortStream{}, SortK{}} (Val:SortStream{})), \or{SortK{}} (\exists{SortK{}} (Val:SortCell{}, inj{SortCell{}, SortK{}} (Val:SortCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortBool{}, inj{SortBool{}, SortK{}} (Val:SortBool{})), \or{SortK{}} (\exists{SortK{}} (Val:SortKCell{}, inj{SortKCell{}, SortK{}} (Val:SortKCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendsCellOpt{}, inj{SortSendsCellOpt{}, SortK{}} (Val:SortSendsCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortContCellOpt{}, inj{SortContCellOpt{}, SortK{}} (Val:SortContCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortK{}} (Val:SortThreadCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortThreadCellBag{}, inj{SortThreadCellBag{}, SortK{}} (Val:SortThreadCellBag{})), \or{SortK{}} (\exists{SortK{}} (Val:SortBindCell{}, inj{SortBindCell{}, SortK{}} (Val:SortBindCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortMap{}, inj{SortMap{}, SortK{}} (Val:SortMap{})), \or{SortK{}} (\exists{SortK{}} (Val:SortName{}, inj{SortName{}, SortK{}} (Val:SortName{})), \or{SortK{}} (\exists{SortK{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortK{}} (Val:SortKCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRecsCell{}, inj{SortRecsCell{}, SortK{}} (Val:SortRecsCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRecCellBag{}, inj{SortRecCellBag{}, SortK{}} (Val:SortRecCellBag{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRecCell{}, inj{SortRecCell{}, SortK{}} (Val:SortRecCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortInt{}, inj{SortInt{}, SortK{}} (Val:SortInt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortBindCellOpt{}, inj{SortBindCellOpt{}, SortK{}} (Val:SortBindCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortFloat{}, inj{SortFloat{}, SortK{}} (Val:SortFloat{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRchanCell{}, inj{SortRchanCell{}, SortK{}} (Val:SortRchanCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortMsgCellOpt{}, inj{SortMsgCellOpt{}, SortK{}} (Val:SortMsgCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortActivityCellOpt{}, inj{SortActivityCellOpt{}, SortK{}} (Val:SortActivityCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortK{}} (Val:SortGeneratedTopCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortContCell{}, inj{SortContCell{}, SortK{}} (Val:SortContCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortTuplespaceCellOpt{}, inj{SortTuplespaceCellOpt{}, SortK{}} (Val:SortTuplespaceCellOpt{})), \or{SortK{}} (\exists{SortK{}} (Val:SortActivityCell{}, inj{SortActivityCell{}, SortK{}} (Val:SortActivityCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSet{}, inj{SortSet{}, SortK{}} (Val:SortSet{})), \or{SortK{}} (\exists{SortK{}} (Val:SortRecsCellFragment{}, inj{SortRecsCellFragment{}, SortK{}} (Val:SortRecsCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendCell{}, inj{SortSendCell{}, SortK{}} (Val:SortSendCell{})), \or{SortK{}} (\exists{SortK{}} (Val:SortSendsCellFragment{}, inj{SortSendsCellFragment{}, SortK{}} (Val:SortSendsCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortK{}} (Val:SortGeneratedTopCellFragment{})), \or{SortK{}} (\exists{SortK{}} (Val:SortIOError{}, inj{SortIOError{}, SortK{}} (Val:SortIOError{})), \or{SortK{}} (\exists{SortK{}} (Val:SortActivityCellFragment{}, inj{SortActivityCellFragment{}, SortK{}} (Val:SortActivityCellFragment{})), \bottom{SortK{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortSendsCellOpt{}} (LblnoSendsCell{}(), \or{SortSendsCellOpt{}} (\exists{SortSendsCellOpt{}} (Val:SortSendsCell{}, inj{SortSendsCell{}, SortSendsCellOpt{}} (Val:SortSendsCell{})), \bottom{SortSendsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortContCellOpt{}} (LblnoContCell{}(), \or{SortContCellOpt{}} (\exists{SortContCellOpt{}} (Val:SortContCell{}, inj{SortContCell{}, SortContCellOpt{}} (Val:SortContCell{})), \bottom{SortContCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadCell{}} (\exists{SortThreadCell{}} (X0:SortKCell{}, Lbl'-LT-'thread'-GT-'{}(X0:SortKCell{})), \bottom{SortThreadCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellBag{}} (\exists{SortThreadCellBag{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortThreadCellBag{}} (Val:SortThreadCell{})), \bottom{SortThreadCellBag{}}()) [constructor{}()] // no junk
  axiom{} \or{SortBindCell{}} (\exists{SortBindCell{}} (X0:SortK{}, Lbl'-LT-'bind'-GT-'{}(X0:SortK{})), \bottom{SortBindCell{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortMap{}}() [constructor{}()] // no junk
  axiom{} \or{SortName{}} (\exists{SortName{}} (X0:SortProc{}, Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(X0:SortProc{})), \or{SortName{}} (\exists{SortName{}} (Val:SortId{}, inj{SortId{}, SortName{}} (Val:SortId{})), \bottom{SortName{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (LblnoKCell{}(), \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortRecsCell{}} (\exists{SortRecsCell{}} (X0:SortRecCellBag{}, Lbl'-LT-'recs'-GT-'{}(X0:SortRecCellBag{})), \bottom{SortRecsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortRecCellBag{}} (\exists{SortRecCellBag{}} (Val:SortRecCell{}, inj{SortRecCell{}, SortRecCellBag{}} (Val:SortRecCell{})), \bottom{SortRecCellBag{}}()) [constructor{}()] // no junk
  axiom{} \or{SortRecCell{}} (\exists{SortRecCell{}} (X0:SortRchanCell{}, \exists{SortRecCell{}} (X1:SortBindCell{}, \exists{SortRecCell{}} (X2:SortContCell{}, Lbl'-LT-'rec'-GT-'{}(X0:SortRchanCell{}, X1:SortBindCell{}, X2:SortContCell{})))), \bottom{SortRecCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortBindCellOpt{}} (LblnoBindCell{}(), \or{SortBindCellOpt{}} (\exists{SortBindCellOpt{}} (Val:SortBindCell{}, inj{SortBindCell{}, SortBindCellOpt{}} (Val:SortBindCell{})), \bottom{SortBindCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortRchanCell{}} (\exists{SortRchanCell{}} (X0:SortK{}, Lbl'-LT-'rchan'-GT-'{}(X0:SortK{})), \bottom{SortRchanCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortMsgCellOpt{}} (LblnoMsgCell{}(), \or{SortMsgCellOpt{}} (\exists{SortMsgCellOpt{}} (Val:SortMsgCell{}, inj{SortMsgCell{}, SortMsgCellOpt{}} (Val:SortMsgCell{})), \bottom{SortMsgCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortActivityCellOpt{}} (LblnoActivityCell{}(), \or{SortActivityCellOpt{}} (\exists{SortActivityCellOpt{}} (Val:SortActivityCell{}, inj{SortActivityCell{}, SortActivityCellOpt{}} (Val:SortActivityCell{})), \bottom{SortActivityCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCell{}} (\exists{SortGeneratedTopCell{}} (X0:SortTCell{}, \exists{SortGeneratedTopCell{}} (X1:SortGeneratedCounterCell{}, Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}))), \bottom{SortGeneratedTopCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortContCell{}} (\exists{SortContCell{}} (X0:SortK{}, Lbl'-LT-'cont'-GT-'{}(X0:SortK{})), \bottom{SortContCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTuplespaceCellOpt{}} (LblnoTuplespaceCell{}(), \or{SortTuplespaceCellOpt{}} (\exists{SortTuplespaceCellOpt{}} (Val:SortTuplespaceCell{}, inj{SortTuplespaceCell{}, SortTuplespaceCellOpt{}} (Val:SortTuplespaceCell{})), \bottom{SortTuplespaceCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortActivityCell{}} (\exists{SortActivityCell{}} (X0:SortThreadCellBag{}, Lbl'-LT-'activity'-GT-'{}(X0:SortThreadCellBag{})), \bottom{SortActivityCell{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortSet{}}() [constructor{}()] // no junk
  axiom{} \or{SortRecsCellFragment{}} (\exists{SortRecsCellFragment{}} (X0:SortRecCellBag{}, Lbl'-LT-'recs'-GT-'-fragment{}(X0:SortRecCellBag{})), \bottom{SortRecsCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSendCell{}} (\exists{SortSendCell{}} (X0:SortSchanCell{}, \exists{SortSendCell{}} (X1:SortMsgCell{}, Lbl'-LT-'send'-GT-'{}(X0:SortSchanCell{}, X1:SortMsgCell{}))), \bottom{SortSendCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSendsCellFragment{}} (\exists{SortSendsCellFragment{}} (X0:SortSendCellBag{}, Lbl'-LT-'sends'-GT-'-fragment{}(X0:SortSendCellBag{})), \bottom{SortSendsCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCellFragment{}} (\exists{SortGeneratedTopCellFragment{}} (X0:SortTCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X1:SortGeneratedCounterCellOpt{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}))), \bottom{SortGeneratedTopCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{})), \or{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}(), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortActivityCellFragment{}} (\exists{SortActivityCellFragment{}} (X0:SortThreadCellBag{}, Lbl'-LT-'activity'-GT-'-fragment{}(X0:SortThreadCellBag{})), \bottom{SortActivityCellFragment{}}()) [constructor{}()] // no junk

// rules
// rule initSendsCell(.KList)=>`<sends>`(`.SendCellBag`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortSendsCell{},R} (
        LblinitSendsCell{}(),
        Lbl'-LT-'sends'-GT-'{}(Lbl'Stop'SendCellBag{}())),
      \top{R}()))
  [initializer{}()]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`Nil_RHO-SYNTAX_`(.KList))))),DotVar2)),DotVar1),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(`.ThreadCellBag`(.KList),DotVar2)),DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(92) org.kframework.attributes.Location(Location(92,8,92,47)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(LblNil'Unds'RHO-SYNTAX'Unds'{}()),dotk{}())))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Stop'ThreadCellBag{}(),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(92,8,92,47)"), contentStartLine{}("92")]

// rule isRecCell(inj{RecCell,KItem}(RecCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCell{}(kseq{}(inj{SortRecCell{}, SortKItem{}}(VarRecCell:SortRecCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSet:SortSet{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTuplespaceCell(inj{TuplespaceCell,KItem}(TuplespaceCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCell{}(kseq{}(inj{SortTuplespaceCell{}, SortKItem{}}(VarTuplespaceCell:SortTuplespaceCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#stderr_K-IO_`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(910) org.kframework.attributes.Location(Location(910,8,910,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stderr'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("2")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(910,8,910,20)"), contentStartLine{}("910")]

// rule `project:Proc`(inj{Proc,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortProc{},R} (
        Lblproject'Coln'Proc{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarK:SortProc{}),dotk{}())),
        VarK:SortProc{}),
      \top{R}()))
  [projection{}()]

// rule isBindCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarBindCell:SortBindCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBindCell{}, SortKItem{}}(VarBindCell:SortBindCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBindCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isRchanCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRchanCell:SortRchanCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRchanCell{}, SortKItem{}}(VarRchanCell:SortRchanCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRchanCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecsCellFragment(inj{RecsCellFragment,KItem}(RecsCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCellFragment{}(kseq{}(inj{SortRecsCellFragment{}, SortKItem{}}(VarRecsCellFragment:SortRecsCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarMap:SortMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMsgCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarMsgCell:SortMsgCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMsgCell{}, SortKItem{}}(VarMsgCell:SortMsgCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMsgCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initKCell(Init)=>`<k>`(inj{Proc,KItem}(`project:Proc`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCell{},R} (
        LblinitKCell{}(VarInit:SortMap{}),
        Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lblproject'Coln'Proc{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM"))),dotk{}()))),dotk{}()))),
      \top{R}()))
  [initializer{}()]

// rule `_andThenBool__BOOL__Bool_Bool`(#token("true","Bool") #as _9,K)=>K requires _9 ensures _9 [contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'9:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'9:SortBool{}),VarK:SortBool{}),
        VarK:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'9:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(307,8,307,37)"), contentStartLine{}("307")]

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source))) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(563) org.kframework.attributes.Location(Location(563,8,565,66)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(563,8,565,66)"), contentStartLine{}("563")]

// rule `_andThenBool__BOOL__Bool_Bool`(_5,#token("false","Bool") #as _24)=>_24 requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(310) org.kframework.attributes.Location(Location(310,8,310,36)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'5:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'24:SortBool{})),
        Var'Unds'24:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(310,8,310,36)"), contentStartLine{}("310")]

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarKConfigVar:SortKConfigVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_andBool_`(#token("true","Bool") #as _30,B)=>B requires _30 ensures _30 [contentStartColumn(8) contentStartLine(302) org.kframework.attributes.Location(Location(302,8,302,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'30:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'30:SortBool{}),VarB:SortBool{}),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'30:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(302,8,302,37)"), contentStartLine{}("302")]

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarString:SortString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarStream:SortStream{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isContCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarContCellOpt:SortContCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortContCellOpt{}, SortKItem{}}(VarContCellOpt:SortContCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisContCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andBool_`(B,#token("true","Bool") #as _20)=>B requires _20 ensures _20 [contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'20:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(VarB:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'20:SortBool{})),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'20:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(303,8,303,37)"), contentStartLine{}("303")]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isContCell(inj{ContCell,KItem}(ContCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisContCell{}(kseq{}(inj{SortContCell{}, SortKItem{}}(VarContCell:SortContCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTCell:SortTCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSchanCellOpt(inj{SchanCellOpt,KItem}(SchanCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSchanCellOpt{}(kseq{}(inj{SortSchanCellOpt{}, SortKItem{}}(VarSchanCellOpt:SortSchanCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isThreadCellFragment(inj{ThreadCellFragment,KItem}(ThreadCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCellFragment{}(kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarThreadCellFragment:SortThreadCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isActivityCellOpt(inj{ActivityCellOpt,KItem}(ActivityCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCellOpt{}(kseq{}(inj{SortActivityCellOpt{}, SortKItem{}}(VarActivityCellOpt:SortActivityCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isContCellOpt(inj{ContCellOpt,KItem}(ContCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisContCellOpt{}(kseq{}(inj{SortContCellOpt{}, SortKItem{}}(VarContCellOpt:SortContCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isActivityCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarActivityCell:SortActivityCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortActivityCell{}, SortKItem{}}(VarActivityCell:SortActivityCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(558) org.kframework.attributes.Location(Location(558,8,559,59)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(558,8,559,59)"), contentStartLine{}("558")]

// rule isGeneratedCounterCellOpt(inj{GeneratedCounterCellOpt,KItem}(GeneratedCounterCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCellOpt{}(kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecCell:SortRecCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecCell{}, SortKItem{}}(VarRecCell:SortRecCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,_10,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(770) org.kframework.attributes.Location(Location(770,8,770,64)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},Var'Unds'10:SortK{},VarB2:SortK{}),
        VarB2:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(770,8,770,64)"), contentStartLine{}("770")]

// rule initGeneratedTopCell(Init)=>`<generatedTop>`(initTCell(Init),initGeneratedCounterCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedTopCell{},R} (
        LblinitGeneratedTopCell{}(VarInit:SortMap{}),
        Lbl'-LT-'generatedTop'-GT-'{}(LblinitTCell{}(VarInit:SortMap{}),LblinitGeneratedCounterCell{}())),
      \top{R}()))
  [initializer{}()]

// rule `_xorBool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(315,8,315,57)"), contentStartLine{}("315")]

// rule `_modInt__INT__Int_Int`(I1,I2)=>`_%Int__INT__Int_Int`(`_+Int_`(`_%Int__INT__Int_Int`(I1,`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [concrete() contentStartColumn(5) contentStartLine(391) org.kframework.attributes.Location(Location(391,5,394,23)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("5"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(391,5,394,23)"), contentStartLine{}("391")]

// rule isCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarCell:SortCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(763) org.kframework.attributes.Location(Location(763,8,763,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(763,8,763,45)"), contentStartLine{}("763")]

// rule isName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarName:SortName{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortName{}, SortKItem{}}(VarName:SortName{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisName{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarKCell:SortKCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarKItem:SortKItem{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(VarKItem:SortKItem{},dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,B1,_11)=>B1 requires C ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(769) org.kframework.attributes.Location(Location(769,8,769,56)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},VarB1:SortK{},Var'Unds'11:SortK{}),
        VarB1:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(769,8,769,56)"), contentStartLine{}("769")]

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisK{}(VarK:SortK{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andBool_`(_8,#token("false","Bool") #as _43)=>_43 requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(Var'Unds'8:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'43:SortBool{})),
        Var'Unds'43:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(305,8,305,37)"), contentStartLine{}("305")]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`_|__RHO-SYNTAX__Proc_Proc`(P,`Nil_RHO-SYNTAX_`(.KList)))~>DotVar4))),DotVar2)),DotVar1),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(P)~>DotVar4))),DotVar2)),DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(86) org.kframework.attributes.Location(Location(86,8,86,25)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(VarP:SortProc{},LblNil'Unds'RHO-SYNTAX'Unds'{}())),VarDotVar4:SortK{})))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),VarDotVar4:SortK{})))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(86,8,86,25)"), contentStartLine{}("86")]

// rule isSendsCellFragment(inj{SendsCellFragment,KItem}(SendsCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCellFragment{}(kseq{}(inj{SortSendsCellFragment{}, SortKItem{}}(VarSendsCellFragment:SortSendsCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_orBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(320,8,320,32)"), contentStartLine{}("320")]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(324,8,324,37)"), contentStartLine{}("324")]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`*__RHO-SYNTAX__Name`(`@__RHO-SYNTAX__Proc`(P)))~>DotVar4))),DotVar2)),DotVar1),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(P)~>DotVar4))),DotVar2)),DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(105) org.kframework.attributes.Location(Location(105,8,105,23)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(VarP:SortProc{}))),VarDotVar4:SortK{})))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),VarDotVar4:SortK{})))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,8,105,23)"), contentStartLine{}("105")]

// rule isTuplespaceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTuplespaceCell:SortTuplespaceCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTuplespaceCell{}, SortKItem{}}(VarTuplespaceCell:SortTuplespaceCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isRecCellFragment(inj{RecCellFragment,KItem}(RecCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCellFragment{}(kseq{}(inj{SortRecCellFragment{}, SortKItem{}}(VarRecCellFragment:SortRecCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING__String`(ToCount)),`lengthString(_)_STRING__String`(Source)),ToCount)) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(560) org.kframework.attributes.Location(Location(560,8,561,60)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        Lbl'UndsPlus'Int'Unds'{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToCount:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(560,8,561,60)"), contentStartLine{}("560")]

// rule isThreadCell(inj{ThreadCell,KItem}(ThreadCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCell{}(kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarThreadCell:SortThreadCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecCellFragment:SortRecCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecCellFragment{}, SortKItem{}}(VarRecCellFragment:SortRecCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedTopCell(inj{GeneratedTopCell,KItem}(GeneratedTopCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCell{}(kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTCellFragment:SortTCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(DotVar4,`<msg>`(inj{Name,KItem}(`@__RHO-SYNTAX__Proc`(`*__RHO-SYNTAX__Name`(X)))))),DotVar3)),DotVar2)),DotVar0)=>`<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(DotVar4,`<msg>`(inj{Name,KItem}(X)))),DotVar3)),DotVar2)),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(99) org.kframework.attributes.Location(Location(99,8,99,36)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(VarDotVar4:SortSchanCell{},Lbl'-LT-'msg'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(VarX:SortName{}))),dotk{}())))),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(VarDotVar4:SortSchanCell{},Lbl'-LT-'msg'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())))),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(99,8,99,36)"), contentStartLine{}("99")]

// rule `#stdout_K-IO_`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(909) org.kframework.attributes.Location(Location(909,8,909,20)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdout'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("1")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(909,8,909,20)"), contentStartLine{}("909")]

// rule `_xorBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(312,8,312,38)"), contentStartLine{}("312")]

// rule isMsgCell(inj{MsgCell,KItem}(MsgCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMsgCell{}(kseq{}(inj{SortMsgCell{}, SortKItem{}}(VarMsgCell:SortMsgCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarGeneratedTopCell:SortGeneratedTopCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_<=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,549,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(549,8,549,63)"), contentStartLine{}("549")]

// rule isSchanCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSchanCellOpt:SortSchanCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSchanCellOpt{}, SortKItem{}}(VarSchanCellOpt:SortSchanCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSchanCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSendsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendsCellFragment:SortSendsCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendsCellFragment{}, SortKItem{}}(VarSendsCellFragment:SortSendsCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `notBool_`(#token("true","Bool") #as _36)=>#token("false","Bool") requires _36 ensures _36 [contentStartColumn(8) contentStartLine(299) org.kframework.attributes.Location(Location(299,8,299,29)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'36:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'36:SortBool{})),
        \dv{SortBool{}}("false")),
      \equals{SortBool{},R}(
        Var'Unds'36:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(299,8,299,29)"), contentStartLine{}("299")]

// rule isActivityCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarActivityCellFragment:SortActivityCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortActivityCellFragment{}, SortKItem{}}(VarActivityCellFragment:SortActivityCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_impliesBool__BOOL__Bool_Bool`(#token("false","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),Var'Unds'0:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(328,8,328,40)"), contentStartLine{}("328")]

// rule isRchanCell(inj{RchanCell,KItem}(RchanCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRchanCell{}(kseq{}(inj{SortRchanCell{}, SortKItem{}}(VarRchanCell:SortRchanCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replaceAll(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING__String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(575) org.kframework.attributes.Location(Location(575,8,575,154)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(575,8,575,154)"), contentStartLine{}("575")]

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarBool:SortBool{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_impliesBool__BOOL__Bool_Bool`(#token("true","Bool") #as _7,B)=>B requires _7 ensures _7 [contentStartColumn(8) contentStartLine(327) org.kframework.attributes.Location(Location(327,8,327,36)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'7:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'7:SortBool{}),VarB:SortBool{}),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'7:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(327,8,327,36)"), contentStartLine{}("327")]

// rule `_>=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(551) org.kframework.attributes.Location(Location(551,8,551,63)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(551,8,551,63)"), contentStartLine{}("551")]

// rule `_impliesBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        LblnotBool'Unds'{}(VarB:SortBool{})),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(330,8,330,45)"), contentStartLine{}("330")]

// rule isSchanCell(inj{SchanCell,KItem}(SchanCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSchanCell{}(kseq{}(inj{SortSchanCell{}, SortKItem{}}(VarSchanCell:SortSchanCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(_0,_1,`<cont>`(inj{Proc,KItem}(`_|__RHO-SYNTAX__Proc_Proc`(P,`Nil_RHO-SYNTAX_`(.KList)))))),DotVar3)))),DotVar0)=>`<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(_0,_1,`<cont>`(inj{Proc,KItem}(P)))),DotVar3)))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(88) org.kframework.attributes.Location(Location(88,8,88,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Var'Unds'0:SortRchanCell{},Var'Unds'1:SortBindCell{},Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(VarP:SortProc{},LblNil'Unds'RHO-SYNTAX'Unds'{}())),dotk{}())))),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Var'Unds'0:SortRchanCell{},Var'Unds'1:SortBindCell{},Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),dotk{}())))),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(88,8,88,40)"), contentStartLine{}("88")]

// rule initTCell(Init)=>`<T>`(initActivityCell(Init),initTuplespaceCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCell{},R} (
        LblinitTCell{}(VarInit:SortMap{}),
        Lbl'-LT-'T'-GT-'{}(LblinitActivityCell{}(VarInit:SortMap{}),LblinitTuplespaceCell{}())),
      \top{R}()))
  [initializer{}()]

// rule isTuplespaceCellOpt(inj{TuplespaceCellOpt,KItem}(TuplespaceCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCellOpt{}(kseq{}(inj{SortTuplespaceCellOpt{}, SortKItem{}}(VarTuplespaceCellOpt:SortTuplespaceCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule initTuplespaceCell(.KList)=>`<tuplespace>`(initSendsCell(.KList),initRecsCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTuplespaceCell{},R} (
        LblinitTuplespaceCell{}(),
        Lbl'-LT-'tuplespace'-GT-'{}(LblinitSendsCell{}(),LblinitRecsCell{}())),
      \top{R}()))
  [initializer{}()]

// rule `_orBool__BOOL__Bool_Bool`(_3,#token("true","Bool") #as _26)=>_26 requires _26 ensures _26 [contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,318,34)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'26:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'3:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'26:SortBool{})),
        Var'Unds'26:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'26:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(318,8,318,34)"), contentStartLine{}("318")]

// rule isBindCell(inj{BindCell,KItem}(BindCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBindCell{}(kseq{}(inj{SortBindCell{}, SortKItem{}}(VarBindCell:SortBindCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(KItem)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(VarKItem:SortKItem{},dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_=/=String__STRING__String_String`(S1,S2)=>`notBool_`(`_==String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(536) org.kframework.attributes.Location(Location(536,8,536,65)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(536,8,536,65)"), contentStartLine{}("536")]

// rule `signExtendBitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_-Int__INT__Int_Int`(`_modInt__INT__Int_Int`(`_+Int_`(`bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(386) org.kframework.attributes.Location(Location(386,8,386,149)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(386,8,386,149)"), contentStartLine{}("386")]

// rule `_orBool__BOOL__Bool_Bool`(#token("true","Bool") #as _3,_4)=>_3 requires _3 ensures _3 [contentStartColumn(8) contentStartLine(317) org.kframework.attributes.Location(Location(317,8,317,34)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'3:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'3:SortBool{}),Var'Unds'4:SortBool{}),
        Var'Unds'3:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'3:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(317,8,317,34)"), contentStartLine{}("317")]

// rule `_impliesBool__BOOL__Bool_Bool`(_7,#token("true","Bool") #as _11)=>_11 requires _11 ensures _11 [contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,39)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'11:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'7:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'11:SortBool{})),
        Var'Unds'11:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'11:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(329,8,329,39)"), contentStartLine{}("329")]

// rule isThreadCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarThreadCellFragment:SortThreadCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarThreadCellFragment:SortThreadCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarId:SortId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(_0,_1,`<cont>`(inj{Proc,KItem}(`*__RHO-SYNTAX__Name`(`@__RHO-SYNTAX__Proc`(P)))))),DotVar3)))),DotVar0)=>`<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(_0,_1,`<cont>`(inj{Proc,KItem}(P)))),DotVar3)))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(107) org.kframework.attributes.Location(Location(107,8,107,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Var'Unds'0:SortRchanCell{},Var'Unds'1:SortBindCell{},Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(VarP:SortProc{}))),dotk{}())))),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Var'Unds'0:SortRchanCell{},Var'Unds'1:SortBindCell{},Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),dotk{}())))),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(107,8,107,38)"), contentStartLine{}("107")]

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(300) org.kframework.attributes.Location(Location(300,8,300,29)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("false")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(300,8,300,29)"), contentStartLine{}("300")]

// rule initSchanCell(.KList)=>`<schan>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortSchanCell{},R} (
        LblinitSchanCell{}(),
        Lbl'-LT-'schan'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule isSendCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendCell:SortSendCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendCell{}, SortKItem{}}(VarSendCell:SortSendCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isActivityCell(inj{ActivityCell,KItem}(ActivityCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCell{}(kseq{}(inj{SortActivityCell{}, SortKItem{}}(VarActivityCell:SortActivityCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSendCell(inj{SendCell,KItem}(SendCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCell{}(kseq{}(inj{SortSendCell{}, SortKItem{}}(VarSendCell:SortSendCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(`<rchan>`(inj{Name,KItem}(`@__RHO-SYNTAX__Proc`(`*__RHO-SYNTAX__Name`(X)))),_0,_1)),DotVar3)))),DotVar0)=>`<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(`<rchan>`(inj{Name,KItem}(X)),_0,_1)),DotVar3)))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(101) org.kframework.attributes.Location(Location(101,8,101,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Lbl'-LT-'rchan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(VarX:SortName{}))),dotk{}())),Var'Unds'0:SortBindCell{},Var'Unds'1:SortContCell{})),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Lbl'-LT-'rchan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),Var'Unds'0:SortBindCell{},Var'Unds'1:SortContCell{})),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,8,101,40)"), contentStartLine{}("101")]

// rule `_orBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(319) org.kframework.attributes.Location(Location(319,8,319,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(319,8,319,32)"), contentStartLine{}("319")]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_>String__STRING__String_String`(S1,S2)=>`_<String__STRING__String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(550) org.kframework.attributes.Location(Location(550,8,550,52)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(550,8,550,52)"), contentStartLine{}("550")]

// rule isProc(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarProc:SortProc{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortProc{}, SortKItem{}}(VarProc:SortProc{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisProc{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,_16,_17,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(574) org.kframework.attributes.Location(Location(574,8,574,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},Var'Unds'16:SortString{},Var'Unds'17:SortString{},\dv{SortInt{}}("0")),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(574,8,574,49)"), contentStartLine{}("574")]

// rule `_andThenBool__BOOL__Bool_Bool`(#token("false","Bool") #as _41,_1)=>_41 requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(309) org.kframework.attributes.Location(Location(309,8,309,36)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'41:SortBool{}),Var'Unds'1:SortBool{}),
        Var'Unds'41:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(309,8,309,36)"), contentStartLine{}("309")]

// rule isSendCellBag(inj{SendCellBag,KItem}(SendCellBag))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCellBag{}(kseq{}(inj{SortSendCellBag{}, SortKItem{}}(VarSendCellBag:SortSendCellBag{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecsCellOpt:SortRecsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecsCellOpt{}, SortKItem{}}(VarRecsCellOpt:SortRecsCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isRchanCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRchanCellOpt:SortRchanCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRchanCellOpt{}, SortKItem{}}(VarRchanCellOpt:SortRchanCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRchanCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initRchanCell(.KList)=>`<rchan>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortRchanCell{},R} (
        LblinitRchanCell{}(),
        Lbl'-LT-'rchan'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule `_andThenBool__BOOL__Bool_Bool`(K,#token("true","Bool") #as _38)=>K requires _38 ensures _38 [contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'38:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'38:SortBool{})),
        VarK:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'38:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(308,8,308,37)"), contentStartLine{}("308")]

// rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedCounterCell{},R} (
        LblinitGeneratedCounterCell{}(),
        Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0"))),
      \top{R}()))
  [initializer{}()]

// rule isThreadCellBag(inj{ThreadCellBag,KItem}(ThreadCellBag))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCellBag{}(kseq{}(inj{SortThreadCellBag{}, SortKItem{}}(VarThreadCellBag:SortThreadCellBag{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `freshId(_)_ID-SYNTAX__Int`(I)=>`String2Id(_)_ID-SYNTAX__String`(`_+String__STRING__String_String`(#token("\"_\"","String"),`Int2String(_)_STRING__Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(745) org.kframework.attributes.Location(Location(745,8,745,62)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortId{},R} (
        LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(VarI:SortInt{}),
        LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(\dv{SortString{}}("_"),LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(VarI:SortInt{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(745,8,745,62)"), contentStartLine{}("745")]

// rule isRecsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecsCellFragment:SortRecsCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecsCellFragment{}, SortKItem{}}(VarRecsCellFragment:SortRecsCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSendCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendCellFragment:SortSendCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendCellFragment{}, SortKItem{}}(VarSendCellFragment:SortSendCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`_(_){_}_RHO-SYNTAX__Name_Name_Proc`(X,Y,P))~>DotVar6))),DotVar4)),`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(`.RecCellBag`(.KList),DotVar3)))),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(DotVar6))),DotVar4)),`<tuplespace>`(DotVar2,`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(`<rchan>`(inj{Name,KItem}(X)),`<bind>`(inj{Name,KItem}(Y)),`<cont>`(inj{Proc,KItem}(P)))),DotVar3)))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(74) org.kframework.attributes.Location(Location(74,8,79,24)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsLParUndsRParLBraUndsRBraUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Name'Unds'Proc{}(VarX:SortName{},VarY:SortName{},VarP:SortProc{})),VarDotVar6:SortK{})))),VarDotVar4:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(Lbl'Stop'RecCellBag{}(),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar6:SortK{}))),VarDotVar4:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(VarDotVar2:SortSendsCell{},Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Lbl'-LT-'rchan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),Lbl'-LT-'bind'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarY:SortName{}),dotk{}())),Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),dotk{}())))),VarDotVar3:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(74,8,79,24)"), contentStartLine{}("74")]

// rule isTuplespaceCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTuplespaceCellFragment:SortTuplespaceCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTuplespaceCellFragment{}, SortKItem{}}(VarTuplespaceCellFragment:SortTuplespaceCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("true","Bool") #as _5,_6)=>_5 requires _5 ensures _5 [contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,33)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'5:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'5:SortBool{}),Var'Unds'6:SortBool{}),
        Var'Unds'5:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'5:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(322,8,322,33)"), contentStartLine{}("322")]

// rule `_andBool_`(#token("false","Bool") #as _1,_9)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(304) org.kframework.attributes.Location(Location(304,8,304,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{}),Var'Unds'9:SortBool{}),
        Var'Unds'1:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(304,8,304,37)"), contentStartLine{}("304")]

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarIOError:SortIOError{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `findChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)))) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(553) org.kframework.attributes.Location(Location(553,8,553,431)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(553,8,553,431)"), contentStartLine{}("553")]

// rule isSendsCell(inj{SendsCell,KItem}(SendsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCell{}(kseq{}(inj{SortSendsCell{}, SortKItem{}}(VarSendsCell:SortSendsCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTCellOpt:SortTCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarTCellOpt:SortTCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(.K))),DotVar2)),DotVar1),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(`.ThreadCellBag`(.KList),DotVar2)),DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(90) org.kframework.attributes.Location(Location(90,8,90,45)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(dotk{}()))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Stop'ThreadCellBag{}(),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(90,8,90,45)"), contentStartLine{}("90")]

// rule isTuplespaceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarTuplespaceCellOpt:SortTuplespaceCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTuplespaceCellOpt{}, SortKItem{}}(VarTuplespaceCellOpt:SortTuplespaceCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_orElseBool__BOOL__Bool_Bool`(_2,#token("true","Bool") #as _45)=>_45 requires _45 ensures _45 [contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,323,33)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'45:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'2:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'45:SortBool{})),
        Var'Unds'45:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'45:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(323,8,323,33)"), contentStartLine{}("323")]

// rule isThreadCellBag(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarThreadCellBag:SortThreadCellBag{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortThreadCellBag{}, SortKItem{}}(VarThreadCellBag:SortThreadCellBag{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCellBag{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isContCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarContCell:SortContCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortContCell{}, SortKItem{}}(VarContCell:SortContCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisContCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING__String_String_String_Int`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source)),ToReplace,Replacement,`_-Int__INT__Int_Int`(Count,#token("1","Int")))) requires `_>Int__INT__Int_Int`(Count,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(570) org.kframework.attributes.Location(Location(570,8,573,30)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},VarCount:SortInt{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(570,8,573,30)"), contentStartLine{}("570")]

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I2 requires `_>=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(397) org.kframework.attributes.Location(Location(397,8,397,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI2:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(397,8,397,57)"), contentStartLine{}("397")]

// rule isGeneratedCounterCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarGeneratedCounterCell:SortGeneratedCounterCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initSendCell(.KList)=>`<send>`(initSchanCell(.KList),initMsgCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortSendCell{},R} (
        LblinitSendCell{}(),
        Lbl'-LT-'send'-GT-'{}(LblinitSchanCell{}(),LblinitMsgCell{}())),
      \top{R}()))
  [initializer{}()]

// rule isSendCellFragment(inj{SendCellFragment,KItem}(SendCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCellFragment{}(kseq{}(inj{SortSendCellFragment{}, SortKItem{}}(VarSendCellFragment:SortSendCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(_12,#token("\"\"","String"),_13)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(556) org.kframework.attributes.Location(Location(556,8,556,33)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'12:SortString{},\dv{SortString{}}(""),Var'Unds'13:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(556,8,556,33)"), contentStartLine{}("556")]

// rule isKVariable(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarKVariable:SortKVariable{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKVariable{}, SortKItem{}}(VarKVariable:SortKVariable{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKVariable{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarList:SortList{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKVariable(inj{KVariable,KItem}(KVariable))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKVariable{}(kseq{}(inj{SortKVariable{}, SortKItem{}}(VarKVariable:SortKVariable{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isName(inj{Name,KItem}(Name))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisName{}(kseq{}(inj{SortName{}, SortKItem{}}(VarName:SortName{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `freshInt(_)_INT__Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(412) org.kframework.attributes.Location(Location(412,8,412,28)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI:SortInt{}),
        VarI:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(412,8,412,28)"), contentStartLine{}("412")]

// rule initActivityCell(Init)=>`<activity>`(inj{ThreadCell,ThreadCellBag}(initThreadCell(Init))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortActivityCell{},R} (
        LblinitActivityCell{}(VarInit:SortMap{}),
        Lbl'-LT-'activity'-GT-'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(LblinitThreadCell{}(VarInit:SortMap{})))),
      \top{R}()))
  [initializer{}()]

// rule initMsgCell(.KList)=>`<msg>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMsgCell{},R} (
        LblinitMsgCell{}(),
        Lbl'-LT-'msg'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule initRecsCell(.KList)=>`<recs>`(`.RecCellBag`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortRecsCell{},R} (
        LblinitRecsCell{}(),
        Lbl'-LT-'recs'-GT-'{}(Lbl'Stop'RecCellBag{}())),
      \top{R}()))
  [initializer{}()]

// rule `#open(_)_K-IO__String`(S)=>`#open(_,_)_K-IO__String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(902) org.kframework.attributes.Location(Location(902,8,902,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(VarS:SortString{}),
        Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("r+"))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(902,8,902,48)"), contentStartLine{}("902")]

// rule `_==String__STRING__String_String`(S1,S2)=>`_==K_`(inj{String,KItem}(S1),inj{String,KItem}(S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,537,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS1:SortString{}),dotk{}()),kseq{}(inj{SortString{}, SortKItem{}}(VarS2:SortString{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(537,8,537,49)"), contentStartLine{}("537")]

// rule isTCellOpt(inj{TCellOpt,KItem}(TCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellOpt{}(kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarTCellOpt:SortTCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_modInt__INT__Int_Int`(`_>>Int__INT__Int_Int`(I,IDX),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(384) org.kframework.attributes.Location(Location(384,8,384,70)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(384,8,384,70)"), contentStartLine{}("384")]

// rule `_=/=Bool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(332,8,332,57)"), contentStartLine{}("332")]

// rule `_==Int__INT__Int_Int`(I1,I2)=>`_==K_`(inj{Int,KItem}(I1),inj{Int,KItem}(I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(407) org.kframework.attributes.Location(Location(407,8,407,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(407,8,407,40)"), contentStartLine{}("407")]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I1 requires `_<=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(396) org.kframework.attributes.Location(Location(396,8,396,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI1:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(396,8,396,57)"), contentStartLine{}("396")]

// rule `findChar(_,_,_)_STRING__String_String_Int`(_14,#token("\"\"","String"),_15)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(554) org.kframework.attributes.Location(Location(554,8,554,32)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'14:SortString{},\dv{SortString{}}(""),Var'Unds'15:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(554,8,554,32)"), contentStartLine{}("554")]

// rule `<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(`<schan>`(inj{Name,KItem}(`@__RHO-SYNTAX__Proc`(`*__RHO-SYNTAX__Name`(X)))),DotVar4)),DotVar3)),DotVar2)),DotVar0)=>`<generatedTop>`(`<T>`(DotVar1,`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(`<schan>`(inj{Name,KItem}(X)),DotVar4)),DotVar3)),DotVar2)),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(103) org.kframework.attributes.Location(Location(103,8,103,40)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(Lbl'-LT-'schan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(Lbl'StarUndsUnds'RHO-SYNTAX'UndsUnds'Name{}(VarX:SortName{}))),dotk{}())),VarDotVar4:SortMsgCell{})),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(VarDotVar1:SortActivityCell{},Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(Lbl'-LT-'schan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),VarDotVar4:SortMsgCell{})),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,8,103,40)"), contentStartLine{}("103")]

// rule initBindCell(.KList)=>`<bind>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBindCell{},R} (
        LblinitBindCell{}(),
        Lbl'-LT-'bind'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarFloat:SortFloat{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarInt:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBindCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarBindCellOpt:SortBindCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBindCellOpt{}, SortKItem{}}(VarBindCellOpt:SortBindCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBindCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,_18)=>Source requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(566) org.kframework.attributes.Location(Location(566,8,567,57)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},Var'Unds'18:SortString{}),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(566,8,567,57)"), contentStartLine{}("566")]

// rule isMsgCellOpt(inj{MsgCellOpt,KItem}(MsgCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMsgCellOpt{}(kseq{}(inj{SortMsgCellOpt{}, SortKItem{}}(VarMsgCellOpt:SortMsgCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecsCell:SortRecsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecsCell{}, SortKItem{}}(VarRecsCell:SortRecsCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initContCell(.KList)=>`<cont>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortContCell{},R} (
        LblinitContCell{}(),
        Lbl'-LT-'cont'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule isSendsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendsCellOpt:SortSendsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendsCellOpt{}, SortKItem{}}(VarSendsCellOpt:SortSendsCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`_!(_)_RHO-SYNTAX__Name_Proc`(X,P))~>DotVar6))),DotVar4)),`<tuplespace>`(`<sends>`(`_SendCellBag_`(`.SendCellBag`(.KList),DotVar3)),DotVar2)),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(DotVar6))),DotVar4)),`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(`<schan>`(inj{Name,KItem}(X)),`<msg>`(inj{Name,KItem}(`@__RHO-SYNTAX__Proc`(P))))),DotVar3)),DotVar2)),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(67) org.kframework.attributes.Location(Location(67,8,71,25)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsBangLParUndsRParUnds'RHO-SYNTAX'UndsUnds'Name'Unds'Proc{}(VarX:SortName{},VarP:SortProc{})),VarDotVar6:SortK{})))),VarDotVar4:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(Lbl'Stop'SendCellBag{}(),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar6:SortK{}))),VarDotVar4:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(Lbl'-LT-'schan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),Lbl'-LT-'msg'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(Lbl'-AT-UndsUnds'RHO-SYNTAX'UndsUnds'Proc{}(VarP:SortProc{})),dotk{}())))),VarDotVar3:SortSendCellBag{})),VarDotVar2:SortRecsCell{})),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(67,8,71,25)"), contentStartLine{}("67")]

// rule isGeneratedCounterCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedCounterCell(inj{GeneratedCounterCell,KItem}(GeneratedCounterCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCell{}(kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecsCellOpt(inj{RecsCellOpt,KItem}(RecsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCellOpt{}(kseq{}(inj{SortRecsCellOpt{}, SortKItem{}}(VarRecsCellOpt:SortRecsCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_dividesInt__INT__Int_Int`(I1,I2)=>`_==Int__INT__Int_Int`(`_%Int__INT__Int_Int`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(409) org.kframework.attributes.Location(Location(409,8,409,58)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0"))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(409,8,409,58)"), contentStartLine{}("409")]

// rule isCell(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_xorBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(313,8,313,38)"), contentStartLine{}("313")]

// rule isProc(inj{Proc,KItem}(Proc))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisProc{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarProc:SortProc{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRchanCellOpt(inj{RchanCellOpt,KItem}(RchanCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRchanCellOpt{}(kseq{}(inj{SortRchanCellOpt{}, SortKItem{}}(VarRchanCellOpt:SortRchanCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMsgCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarMsgCellOpt:SortMsgCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMsgCellOpt{}, SortKItem{}}(VarMsgCellOpt:SortMsgCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMsgCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarKCellOpt:SortKCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_orElseBool__BOOL__Bool_Bool`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,37)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\dv{SortBool{}}("false")),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(325,8,325,37)"), contentStartLine{}("325")]

// rule `_==Bool__BOOL__Bool_Bool`(K1,K2)=>`_==K_`(inj{Bool,KItem}(K1),inj{Bool,KItem}(K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(765) org.kframework.attributes.Location(Location(765,8,765,43)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK1:SortBool{},VarK2:SortBool{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarK1:SortBool{}),dotk{}()),kseq{}(inj{SortBool{}, SortKItem{}}(VarK2:SortBool{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(765,8,765,43)"), contentStartLine{}("765")]

// rule `_=/=Int__INT__Int_Int`(I1,I2)=>`notBool_`(`_==Int__INT__Int_Int`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(408) org.kframework.attributes.Location(Location(408,8,408,53)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(408,8,408,53)"), contentStartLine{}("408")]

// rule isGeneratedTopCellFragment(inj{GeneratedTopCellFragment,KItem}(GeneratedTopCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCellFragment{}(kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule initThreadCell(Init)=>`<thread>`(initKCell(Init)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortThreadCell{},R} (
        LblinitThreadCell{}(VarInit:SortMap{}),
        Lbl'-LT-'thread'-GT-'{}(LblinitKCell{}(VarInit:SortMap{}))),
      \top{R}()))
  [initializer{}()]

// rule isRecCellBag(inj{RecCellBag,KItem}(RecCellBag))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCellBag{}(kseq{}(inj{SortRecCellBag{}, SortKItem{}}(VarRecCellBag:SortRecCellBag{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSendCellBag(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendCellBag:SortSendCellBag{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendCellBag{}, SortKItem{}}(VarSendCellBag:SortSendCellBag{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendCellBag{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initRecCell(.KList)=>`<rec>`(initRchanCell(.KList),initBindCell(.KList),initContCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortRecCell{},R} (
        LblinitRecCell{}(),
        Lbl'-LT-'rec'-GT-'{}(LblinitRchanCell{}(),LblinitBindCell{}(),LblinitContCell{}())),
      \top{R}()))
  [initializer{}()]

// rule `#stdin_K-IO_`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(908) org.kframework.attributes.Location(Location(908,8,908,19)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdin'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(908,8,908,19)"), contentStartLine{}("908")]

// rule isSendsCellOpt(inj{SendsCellOpt,KItem}(SendsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCellOpt{}(kseq{}(inj{SortSendsCellOpt{}, SortKItem{}}(VarSendsCellOpt:SortSendsCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(`.ThreadCellBag`(.KList),DotVar5)),`<tuplespace>`(`<sends>`(`_SendCellBag_`(inj{SendCell,SendCellBag}(`<send>`(`<schan>`(inj{Name,KItem}(X)),`<msg>`(inj{Name,KItem}(Z) #as _301))),DotVar3)),`<recs>`(`_RecCellBag_`(inj{RecCell,RecCellBag}(`<rec>`(`<rchan>`(inj{Name,KItem}(X)),`<bind>`(inj{Name,KItem}(Y) #as _311),`<cont>`(inj{Proc,KItem}(P)))),DotVar4)))),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`_[_/_]_SUBSTITUTION__K_K_K`(P,_301,_311))))),DotVar5)),`<tuplespace>`(`<sends>`(`_SendCellBag_`(`.SendCellBag`(.KList),DotVar3)),`<recs>`(`_RecCellBag_`(`.RecCellBag`(.KList),DotVar4)))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [comm() contentStartColumn(3) contentStartLine(114) org.kframework.attributes.Location(Location(114,3,123,49)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Stop'ThreadCellBag{}(),VarDotVar5:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(inj{SortSendCell{}, SortSendCellBag{}}(Lbl'-LT-'send'-GT-'{}(Lbl'-LT-'schan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),Lbl'-LT-'msg'-GT-'{}(\and{SortK{}}(kseq{}(inj{SortName{}, SortKItem{}}(VarZ:SortName{}),dotk{}()),Var'Unds'301:SortK{})))),VarDotVar3:SortSendCellBag{})),Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(inj{SortRecCell{}, SortRecCellBag{}}(Lbl'-LT-'rec'-GT-'{}(Lbl'-LT-'rchan'-GT-'{}(kseq{}(inj{SortName{}, SortKItem{}}(VarX:SortName{}),dotk{}())),Lbl'-LT-'bind'-GT-'{}(\and{SortK{}}(kseq{}(inj{SortName{}, SortKItem{}}(VarY:SortName{}),dotk{}()),Var'Unds'311:SortK{})),Lbl'-LT-'cont'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP:SortProc{}),dotk{}())))),VarDotVar4:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsLSqBUndsSlshUndsRSqBUnds'SUBSTITUTION'UndsUnds'K'Unds'K'Unds'K{SortProc{}}(VarP:SortProc{},Var'Unds'301:SortK{},Var'Unds'311:SortK{})),dotk{}())))),VarDotVar5:SortThreadCellBag{})),Lbl'-LT-'tuplespace'-GT-'{}(Lbl'-LT-'sends'-GT-'{}(Lbl'Unds'SendCellBag'Unds'{}(Lbl'Stop'SendCellBag{}(),VarDotVar3:SortSendCellBag{})),Lbl'-LT-'recs'-GT-'{}(Lbl'Unds'RecCellBag'Unds'{}(Lbl'Stop'RecCellBag{}(),VarDotVar4:SortRecCellBag{})))),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("3"), comm{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,3,123,49)"), contentStartLine{}("114")]

// rule isActivityCellFragment(inj{ActivityCellFragment,KItem}(ActivityCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCellFragment{}(kseq{}(inj{SortActivityCellFragment{}, SortKItem{}}(VarActivityCellFragment:SortActivityCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isThreadCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarThreadCell:SortThreadCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarThreadCell:SortThreadCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisThreadCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSendsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSendsCell:SortSendsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSendsCell{}, SortKItem{}}(VarSendsCell:SortSendsCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSendsCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `_divInt__INT__Int_Int`(I1,I2)=>`_/Int__INT__Int_Int`(`_-Int__INT__Int_Int`(I1,`_modInt__INT__Int_Int`(I1,I2)),I2) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(388) org.kframework.attributes.Location(Location(388,8,389,23)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{})),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(388,8,389,23)"), contentStartLine{}("388")]

// rule isRecsCell(inj{RecsCell,KItem}(RecsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecsCell{}(kseq{}(inj{SortRecsCell{}, SortKItem{}}(VarRecsCell:SortRecsCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isRecCellBag(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarRecCellBag:SortRecCellBag{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortRecCellBag{}, SortKItem{}}(VarRecCellBag:SortRecCellBag{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisRecCellBag{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isActivityCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarActivityCellOpt:SortActivityCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortActivityCellOpt{}, SortKItem{}}(VarActivityCellOpt:SortActivityCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisActivityCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT__Int_Int`(`rfindString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(555) org.kframework.attributes.Location(Location(555,8,555,182)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(555,8,555,182)"), contentStartLine{}("555")]

// rule `_xorBool__BOOL__Bool_Bool`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(314) org.kframework.attributes.Location(Location(314,8,314,38)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},VarB:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/nightly/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(314,8,314,38)"), contentStartLine{}("314")]

// rule isBindCellOpt(inj{BindCellOpt,KItem}(BindCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBindCellOpt{}(kseq{}(inj{SortBindCellOpt{}, SortKItem{}}(VarBindCellOpt:SortBindCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSchanCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (VarSchanCell:SortSchanCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSchanCell{}, SortKItem{}}(VarSchanCell:SortSchanCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSchanCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTuplespaceCellFragment(inj{TuplespaceCellFragment,KItem}(TuplespaceCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTuplespaceCellFragment{}(kseq{}(inj{SortTuplespaceCellFragment{}, SortKItem{}}(VarTuplespaceCellFragment:SortTuplespaceCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(`_ThreadCellBag_`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(`_|__RHO-SYNTAX__Proc_Proc`(P1,P2))~>DotVar3))),`.ThreadCellBag`(.KList)),`.ThreadCellBag`(.KList)),DotVar2)),DotVar1),DotVar0)=>`<generatedTop>`(`<T>`(`<activity>`(`_ThreadCellBag_`(`_ThreadCellBag_`(`_ThreadCellBag_`(inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(DotVar3))),inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(P1))))),inj{ThreadCell,ThreadCellBag}(`<thread>`(`<k>`(inj{Proc,KItem}(P2))))),DotVar2)),DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(62) org.kframework.attributes.Location(Location(62,8,64,48)) org.kframework.attributes.Source(Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \and{SortGeneratedTopCell{}} (
    \top{SortGeneratedTopCell{}}(), \rewrites{SortGeneratedTopCell{}}(Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(Lbl'UndsPipeUndsUnds'RHO-SYNTAX'UndsUnds'Proc'Unds'Proc{}(VarP1:SortProc{},VarP2:SortProc{})),VarDotVar3:SortK{})))),Lbl'Stop'ThreadCellBag{}()),Lbl'Stop'ThreadCellBag{}()),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}),Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'activity'-GT-'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Unds'ThreadCellBag'Unds'{}(Lbl'Unds'ThreadCellBag'Unds'{}(inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar3:SortK{}))),inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP1:SortProc{}),dotk{}()))))),inj{SortThreadCell{}, SortThreadCellBag{}}(Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProc{}, SortKItem{}}(VarP2:SortProc{}),dotk{}()))))),VarDotVar2:SortThreadCellBag{})),VarDotVar1:SortTuplespaceCell{}),VarDotVar0:SortGeneratedCounterCell{}))))
  [org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(62,8,64,48)"), contentStartLine{}("62")]

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(33,1,134,9)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/isaac/Documents/Isaac/KFramework/Git/KFramework/Rho-Calc/./rho.k)")]
